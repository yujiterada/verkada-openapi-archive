{
    "components": {
        "schemas": {
            "AccessEvent": {
                "additionalProperties": false,
                "description": "Access control event",
                "properties": {
                    "device_id": {
                        "description": "ID of the device that generated the event",
                        "title": "Device Id",
                        "type": "string"
                    },
                    "device_type": {
                        "default": "access_control",
                        "description": "Always 'access_control' for access events",
                        "enum": [
                            "access_control"
                        ],
                        "title": "Device Type",
                        "type": "string"
                    },
                    "event_id": {
                        "description": "Unique identifier for the event",
                        "title": "Event Id",
                        "type": "string"
                    },
                    "event_info": {
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/AccessEventInfo"
                            }
                        ],
                        "description": "Access-specific event information",
                        "title": "Event Info"
                    },
                    "event_type": {
                        "description": "Type of event",
                        "title": "Event Type",
                        "type": "string"
                    },
                    "timestamp": {
                        "description": "Event timestamp in RFC 3339 format (e.g., '2025-01-17T21:06:20+00:00')",
                        "title": "Timestamp",
                        "type": "string"
                    }
                },
                "required": [
                    "event_id",
                    "device_id",
                    "event_type",
                    "timestamp"
                ],
                "title": "AccessEvent",
                "type": "object"
            },
            "AccessEventInfo": {
                "description": "Access control specific event fields",
                "properties": {
                    "accepted": {
                        "description": "Whether the unlock attempt was accepted",
                        "title": "Accepted",
                        "type": "boolean"
                    },
                    "access_controller_id": {
                        "description": "Unique identifier of the access controller",
                        "title": "Access Controller Id",
                        "type": "string"
                    },
                    "access_controller_name": {
                        "description": "Name of the access controller",
                        "title": "Access Controller Name",
                        "type": "string"
                    },
                    "aux_input_id": {
                        "description": "Identifier of the auxiliary input",
                        "title": "Aux Input Id",
                        "type": "string"
                    },
                    "aux_input_name": {
                        "description": "Name of the auxiliary input",
                        "title": "Aux Input Name",
                        "type": "string"
                    },
                    "building_id": {
                        "description": "Identifier of the building",
                        "title": "Building Id",
                        "type": "string"
                    },
                    "building_name": {
                        "description": "Name of the building",
                        "title": "Building Name",
                        "type": "string"
                    },
                    "direction": {
                        "description": "Direction of access (in/out)",
                        "title": "Direction",
                        "type": "string"
                    },
                    "door_id": {
                        "description": "Unique identifier of the door",
                        "title": "Door Id",
                        "type": "string"
                    },
                    "door_name": {
                        "description": "Name of the door",
                        "title": "Door Name",
                        "type": "string"
                    },
                    "entity_id": {
                        "description": "Identifier of the entity",
                        "title": "Entity Id",
                        "type": "string"
                    },
                    "entity_name": {
                        "description": "Name of the entity",
                        "title": "Entity Name",
                        "type": "string"
                    },
                    "entity_type": {
                        "description": "Type of the entity",
                        "title": "Entity Type",
                        "type": "string"
                    },
                    "floor_id": {
                        "description": "Identifier of the floor",
                        "title": "Floor Id",
                        "type": "string"
                    },
                    "floor_name": {
                        "description": "Name of the floor",
                        "title": "Floor Name",
                        "type": "string"
                    },
                    "floors": {
                        "description": "List of floors",
                        "items": {
                            "$ref": "#/components/schemas/FloorInfo"
                        },
                        "title": "Floors",
                        "type": "array"
                    },
                    "granted": {
                        "description": "Whether access was granted (true) or denied (false)",
                        "title": "Granted",
                        "type": "boolean"
                    },
                    "input_value": {
                        "description": "Value of the input",
                        "title": "Input Value",
                        "type": "string"
                    },
                    "message": {
                        "description": "Event message",
                        "title": "Message",
                        "type": "string"
                    },
                    "raw_card": {
                        "description": "Code or card number used in unlock attempt",
                        "title": "Raw Card",
                        "type": "string"
                    },
                    "scenario_info": {
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/ScenarioInfo"
                            }
                        ],
                        "description": "Information about scenario status (called lockdown in internal services)",
                        "title": "Scenario Info"
                    },
                    "user_info": {
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/UserInfo"
                            }
                        ],
                        "description": "Information about the user",
                        "title": "User Info"
                    }
                },
                "title": "AccessEventInfo",
                "type": "object"
            },
            "AccessGroupAddUserResponseV1": {
                "additionalProperties": false,
                "properties": {
                    "group_id": {
                        "description": "The unique identifier of the Access Group managed by Verkada.",
                        "format": "uuid",
                        "title": "Group Id",
                        "type": "string"
                    },
                    "name": {
                        "description": "The unique name of the Access Group provided by the customer.",
                        "title": "Name",
                        "type": "string"
                    },
                    "successful_adds": {
                        "description": "The list of successfully added Verkada-defined user identifiers.",
                        "items": {
                            "format": "uuid",
                            "type": "string"
                        },
                        "title": "Successful Adds",
                        "type": "array"
                    },
                    "unsuccessful_adds": {
                        "description": "The list of unsuccessfully added Verkada-defined user identifiers.",
                        "items": {
                            "format": "uuid",
                            "type": "string"
                        },
                        "title": "Unsuccessful Adds",
                        "type": "array"
                    }
                },
                "title": "AccessGroupAddUserResponseV1",
                "type": "object"
            },
            "AccessGroupObjectMetaResponseV1": {
                "additionalProperties": false,
                "properties": {
                    "group_id": {
                        "description": "The unique identifier of the Access Group managed by Verkada.",
                        "format": "uuid",
                        "title": "Group Id",
                        "type": "string"
                    },
                    "name": {
                        "description": "The unique name of the Access Group provided by the customer.",
                        "title": "Name",
                        "type": "string"
                    },
                    "user_ids": {
                        "description": "The list of Verkada-defined user identifiers within the access group.",
                        "items": {
                            "format": "uuid",
                            "type": "string"
                        },
                        "title": "User Ids",
                        "type": "array"
                    }
                },
                "title": "AccessGroupObjectMetaResponseV1",
                "type": "object"
            },
            "AccessGroupObjectResponseV1": {
                "additionalProperties": false,
                "properties": {
                    "group_id": {
                        "description": "The unique identifier of the Access Group managed by Verkada.",
                        "format": "uuid",
                        "title": "Group Id",
                        "type": "string"
                    },
                    "name": {
                        "description": "The unique name of the Access Group provided by the customer.",
                        "title": "Name",
                        "type": "string"
                    }
                },
                "title": "AccessGroupObjectResponseV1",
                "type": "object"
            },
            "AccessGroupsResponseV1": {
                "additionalProperties": false,
                "properties": {
                    "access_groups": {
                        "default": [],
                        "description": "The List of Access Group Objects a user belongs to.",
                        "items": {
                            "$ref": "#/components/schemas/AccessGroupObjectResponseV1"
                        },
                        "title": "Access Groups",
                        "type": "array"
                    }
                },
                "title": "AccessGroupsResponseV1",
                "type": "object"
            },
            "AccessInformationResponseV1": {
                "additionalProperties": false,
                "properties": {
                    "access_groups": {
                        "default": [],
                        "description": "The list of Access Group Objects a user belongs to.",
                        "items": {
                            "$ref": "#/components/schemas/AccessGroupObjectResponseV1"
                        },
                        "title": "Access Groups",
                        "type": "array"
                    },
                    "ble_unlock": {
                        "default": false,
                        "description": "The permission state of a user's ability to perform a Bluetooth Unlock. Format is a boolean True or False. Default is False.",
                        "title": "Ble Unlock",
                        "type": "boolean"
                    },
                    "cards": {
                        "default": [],
                        "description": "The list of access cards associated with the user.",
                        "items": {
                            "$ref": "#/components/schemas/CardObjectResponseV1"
                        },
                        "title": "Cards",
                        "type": "array"
                    },
                    "end_date": {
                        "description": "The end time value of the time range controlling when a users credentials are active. Formatted as a Unix timestamp in seconds. Default is Null.",
                        "title": "End Date",
                        "type": "string"
                    },
                    "entry_code": {
                        "description": "The access pin code used for keypad readers alone or in 2FA mode. Formatted as a string of digits between 4 and 16 in length. Must be unique within the organization.",
                        "title": "Entry Code",
                        "type": "string"
                    },
                    "external_id": {
                        "description": "A unique identifier managed externally provided by the customer.",
                        "title": "External Id",
                        "type": "string"
                    },
                    "has_profile_photo": {
                        "description": "A flag that states whether or not the user has a profile photo.",
                        "title": "Has Profile Photo",
                        "type": "boolean"
                    },
                    "license_plates": {
                        "default": [],
                        "description": "The list of license plates associated with the user.",
                        "items": {
                            "$ref": "#/components/schemas/LicensePlateObjectResponseV1"
                        },
                        "title": "License Plates",
                        "type": "array"
                    },
                    "mfa_codes": {
                        "default": [],
                        "description": "The list of MFA codes associated with the user.",
                        "items": {
                            "$ref": "#/components/schemas/MFACodeObjectResponseV1"
                        },
                        "title": "Mfa Codes",
                        "type": "array"
                    },
                    "profile_photo_last_updated": {
                        "description": "The timestamp of when the user's profile photo was last updated.",
                        "format": "date-time",
                        "title": "Profile Photo Last Updated",
                        "type": "string"
                    },
                    "remote_unlock": {
                        "default": false,
                        "description": "The permission state of a user's ability to perform a Remote Unlock. Format is a boolean True or False. Default is False.",
                        "title": "Remote Unlock",
                        "type": "boolean"
                    },
                    "start_date": {
                        "description": "The start time value of the time range controlling when a users credentials are active. Formatted as a Unix timestamp in seconds. Default is Null.",
                        "title": "Start Date",
                        "type": "string"
                    },
                    "user_id": {
                        "description": "The unique identifier of the user managed by Verkada.",
                        "format": "uuid",
                        "title": "User Id",
                        "type": "string"
                    }
                },
                "title": "AccessInformationResponseV1",
                "type": "object"
            },
            "AccessLevelListResponseV1": {
                "description": "Response schema for listing Access Levels.",
                "properties": {
                    "access_levels": {
                        "items": {
                            "$ref": "#/components/schemas/AccessLevelResponseV1"
                        },
                        "title": "Access Levels",
                        "type": "array"
                    }
                },
                "required": [
                    "access_levels"
                ],
                "title": "AccessLevelListResponseV1",
                "type": "object"
            },
            "AccessLevelResponseV1": {
                "description": "Response schema for Access Level operations.",
                "properties": {
                    "access_groups": {
                        "description": "IDs of Access Groups granted door access via this Access Level",
                        "items": {
                            "type": "string"
                        },
                        "title": "Access Groups",
                        "type": "array"
                    },
                    "access_level_id": {
                        "description": "Unique identifier for the Access Level",
                        "title": "Access Level Id",
                        "type": "string"
                    },
                    "access_schedule_events": {
                        "description": "List of Access Schedule Events associated with this Access Level",
                        "items": {
                            "$ref": "#/components/schemas/AccessScheduleEventV1"
                        },
                        "title": "Access Schedule Events",
                        "type": "array"
                    },
                    "doors": {
                        "description": "IDs of Doors accessible under this Access Level",
                        "items": {
                            "type": "string"
                        },
                        "title": "Doors",
                        "type": "array"
                    },
                    "last_updated_at": {
                        "description": "Last updated timestamp of the Access Level (Unix timestamp in seconds)",
                        "title": "Last Updated At",
                        "type": "integer"
                    },
                    "name": {
                        "description": "Name of the Access Level",
                        "title": "Name",
                        "type": "string"
                    },
                    "sites": {
                        "description": "IDs of Sites containing the Doors this Access Level applies to",
                        "items": {
                            "type": "string"
                        },
                        "title": "Sites",
                        "type": "array"
                    }
                },
                "required": [
                    "access_level_id",
                    "name",
                    "access_groups",
                    "sites",
                    "doors",
                    "access_schedule_events",
                    "last_updated_at"
                ],
                "title": "AccessLevelResponseV1",
                "type": "object"
            },
            "AccessScheduleEventResponseV1": {
                "description": "Response schema for Access Schedule Event operations.",
                "properties": {
                    "access_schedule_event_id": {
                        "description": "Unique identifier for the Access Schedule Event",
                        "title": "Access Schedule Event Id",
                        "type": "string"
                    },
                    "door_status": {
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/DoorStatus"
                            }
                        ],
                        "default": "access_granted",
                        "description": "Status of the door during the event"
                    },
                    "end_time": {
                        "description": "End time of the event in hh:mm format (ISO 8601)",
                        "title": "End Time",
                        "type": "string"
                    },
                    "start_time": {
                        "description": "Start time of the event in hh:mm format (ISO 8601)",
                        "title": "Start Time",
                        "type": "string"
                    },
                    "weekday": {
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/WeekDay"
                            }
                        ],
                        "description": "Day of the week for the event"
                    }
                },
                "required": [
                    "access_schedule_event_id",
                    "weekday",
                    "start_time",
                    "end_time"
                ],
                "title": "AccessScheduleEventResponseV1",
                "type": "object"
            },
            "AccessScheduleEventV1": {
                "description": "Schema for an Access Schedule Event.",
                "properties": {
                    "access_schedule_event_id": {
                        "description": "Unique identifier for the Access Schedule Event",
                        "title": "Access Schedule Event Id",
                        "type": "string"
                    },
                    "door_status": {
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/DoorStatus"
                            }
                        ],
                        "default": "access_granted",
                        "description": "Status of the door during the event. Always set to 'access_granted' and does not need to be specified."
                    },
                    "end_time": {
                        "description": "End time of the event in HH:MM format (00:00 to 23:59) with required leading zeros",
                        "title": "End Time",
                        "type": "string"
                    },
                    "start_time": {
                        "description": "Start time of the event in HH:MM format (00:00 to 23:59) with required leading zeros",
                        "title": "Start Time",
                        "type": "string"
                    },
                    "weekday": {
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/WeekDay"
                            }
                        ],
                        "description": "Day of the week for the event"
                    }
                },
                "required": [
                    "weekday",
                    "start_time",
                    "end_time"
                ],
                "title": "AccessScheduleEventV1",
                "type": "object"
            },
            "AccessSiteInfo": {
                "additionalProperties": false,
                "properties": {
                    "name": {
                        "default": "",
                        "description": "The name of the site.",
                        "title": "Name",
                        "type": "string"
                    },
                    "site_id": {
                        "default": "",
                        "description": "The unique ID of the site.",
                        "title": "Site Id",
                        "type": "string"
                    }
                },
                "title": "AccessSiteInfo",
                "type": "object"
            },
            "AccessUserCodeOverrideRequestV1": {
                "properties": {
                    "email": {
                        "description": "The email address of the user.",
                        "title": "Email",
                        "type": "string"
                    },
                    "employee_id": {
                        "description": "The organization-defined employee ID of the user.",
                        "title": "Employee Id",
                        "type": "string"
                    },
                    "external_id": {
                        "description": "A unique identifier managed externally provided by the customer.",
                        "title": "External Id",
                        "type": "string"
                    },
                    "override": {
                        "default": false,
                        "description": "The flag that states whether or not the client wants to apply the given entry code to the given user even if the entry code is already in use by another user. This will reset the other user's entry code.",
                        "title": "Override",
                        "type": "boolean"
                    },
                    "user_id": {
                        "description": "The unique identifier of the user managed by Verkada.",
                        "format": "uuid",
                        "title": "User Id",
                        "type": "string"
                    }
                },
                "title": "AccessUserCodeOverrideRequestV1",
                "type": "object"
            },
            "AccessUserRequestV1": {
                "properties": {
                    "email": {
                        "description": "The email address of the user.",
                        "title": "Email",
                        "type": "string"
                    },
                    "employee_id": {
                        "description": "The organization-defined employee ID of the user.",
                        "title": "Employee Id",
                        "type": "string"
                    },
                    "external_id": {
                        "description": "A unique identifier managed externally provided by the customer.",
                        "title": "External Id",
                        "type": "string"
                    },
                    "user_id": {
                        "description": "The unique identifier of the user managed by Verkada.",
                        "format": "uuid",
                        "title": "User Id",
                        "type": "string"
                    }
                },
                "title": "AccessUserRequestV1",
                "type": "object"
            },
            "AlarmsDeviceType": {
                "description": "Device types",
                "enum": [
                    "door_contact_sensor",
                    "glass_break_sensor",
                    "motion_sensor",
                    "panic_button",
                    "water_sensor",
                    "wired_door_contact_sensor",
                    "wired_generic_sensor",
                    "wired_glass_break_sensor",
                    "wired_motion_sensor",
                    "wired_panic_button",
                    "wired_smoke_sensor",
                    "wired_water_sensor",
                    "wireless_relay"
                ],
                "title": "AlarmsDeviceType",
                "type": "string"
            },
            "AlarmsDevicesRequest": {
                "description": "A request for information about all sites or a single site",
                "properties": {
                    "device_ids": {
                        "description": "A comma delimited list of device unique identifiers. If not supplied, all devices in the site will be returned.",
                        "title": "Device Ids",
                        "type": "string"
                    },
                    "site_id": {
                        "description": "The unique identifier of the site",
                        "title": "Site Id",
                        "type": "string"
                    }
                },
                "required": [
                    "site_id"
                ],
                "title": "AlarmsDevicesRequest",
                "type": "object"
            },
            "AlarmsDevicesResponse": {
                "additionalProperties": false,
                "description": "Detailed information about a single site",
                "properties": {
                    "devices": {
                        "description": "Detailed information about device(s)",
                        "items": {
                            "$ref": "#/components/schemas/DeviceInfo"
                        },
                        "title": "Devices",
                        "type": "array"
                    }
                },
                "required": [
                    "devices"
                ],
                "title": "AlarmsDevicesResponse",
                "type": "object"
            },
            "AlarmsSitesRequestV1": {
                "description": "A request for information about all sites or a single site",
                "properties": {
                    "site_ids": {
                        "description": "A comma delimited list of site unique identifiers. If not supplied, will return information on all sites.",
                        "title": "Site Ids",
                        "type": "string"
                    }
                },
                "title": "AlarmsSitesRequestV1",
                "type": "object"
            },
            "AlarmsSitesResponseV1": {
                "additionalProperties": false,
                "description": "Information about a list of sites",
                "properties": {
                    "sites": {
                        "description": "A list containing information about alarm sites",
                        "items": {
                            "$ref": "#/components/schemas/SiteInfoV1"
                        },
                        "title": "Sites",
                        "type": "array"
                    }
                },
                "required": [
                    "sites"
                ],
                "title": "AlarmsSitesResponseV1",
                "type": "object"
            },
            "ApiErrorModel": {
                "properties": {
                    "data": {
                        "description": "Relevant data",
                        "title": "Data",
                        "type": "string"
                    },
                    "id": {
                        "description": "ID of specific error",
                        "title": "Id",
                        "type": "string"
                    },
                    "message": {
                        "description": "Error message, contains specific human readable context for the error",
                        "title": "Message",
                        "type": "string"
                    }
                },
                "required": [
                    "id",
                    "message",
                    "data"
                ],
                "title": "ApiErrorModel",
                "type": "object"
            },
            "ApiKeyItem": {
                "additionalProperties": false,
                "properties": {
                    "accessibleAccessSites": {
                        "items": {
                            "format": "uuid",
                            "type": "string"
                        },
                        "title": "Accessibleaccesssites",
                        "type": "array"
                    },
                    "accessibleCameras": {
                        "items": {
                            "format": "uuid",
                            "type": "string"
                        },
                        "title": "Accessiblecameras",
                        "type": "array"
                    },
                    "accessibleSites": {
                        "items": {
                            "format": "uuid",
                            "type": "string"
                        },
                        "title": "Accessiblesites",
                        "type": "array"
                    },
                    "apiKey": {
                        "title": "Apikey",
                        "type": "string"
                    },
                    "apiKeyId": {
                        "title": "Apikeyid",
                        "type": "string"
                    },
                    "apiKeyName": {
                        "title": "Apikeyname",
                        "type": "string"
                    },
                    "createdAt": {
                        "title": "Createdat",
                        "type": "integer"
                    },
                    "expiresAt": {
                        "title": "Expiresat",
                        "type": "integer"
                    },
                    "lastUsedIpAddress": {
                        "title": "Lastusedipaddress",
                        "type": "string"
                    },
                    "lastUsedTime": {
                        "title": "Lastusedtime",
                        "type": "integer"
                    },
                    "orgId": {
                        "format": "uuid",
                        "title": "Orgid",
                        "type": "string"
                    },
                    "ownerId": {
                        "title": "Ownerid",
                        "type": "string"
                    },
                    "permission": {
                        "title": "Permission",
                        "type": "string"
                    },
                    "roles": {
                        "items": {
                            "type": "string"
                        },
                        "title": "Roles",
                        "type": "array"
                    }
                },
                "required": [
                    "apiKeyId",
                    "orgId",
                    "createdAt"
                ],
                "title": "ApiKeyItem",
                "type": "object"
            },
            "ApiKeyList": {
                "additionalProperties": false,
                "properties": {
                    "apiKeys": {
                        "items": {
                            "$ref": "#/components/schemas/ApiKeyItem"
                        },
                        "title": "Apikeys",
                        "type": "array"
                    }
                },
                "required": [
                    "apiKeys"
                ],
                "title": "ApiKeyList",
                "type": "object"
            },
            "ApiKeyPermission": {
                "description": "API key permission levels",
                "enum": [
                    "READ_ONLY",
                    "READ_WRITE",
                    "STREAMING",
                    "LIVE_ONLY",
                    "CAMERA_AUDIO"
                ],
                "title": "ApiKeyPermission",
                "type": "string"
            },
            "ApiKeyRequest": {
                "properties": {
                    "accessible_access_sites": {
                        "description": "Comma separated list of access sites which the API key has access to",
                        "title": "Accessible Access Sites",
                        "type": "string"
                    },
                    "accessible_cameras": {
                        "description": "Comma separated list of cameras which the API key has access to",
                        "title": "Accessible Cameras",
                        "type": "string"
                    },
                    "accessible_sites": {
                        "description": "Comma separated list of sites which the API key has access to",
                        "title": "Accessible Sites",
                        "type": "string"
                    },
                    "api_key_name": {
                        "title": "Api Key Name",
                        "type": "string"
                    },
                    "expires_at": {
                        "title": "Expires At",
                        "type": "integer"
                    },
                    "permission": {
                        "$ref": "#/components/schemas/ApiKeyPermission"
                    }
                },
                "required": [
                    "api_key_name",
                    "permission",
                    "expires_at"
                ],
                "title": "ApiKeyRequest",
                "type": "object"
            },
            "ApiLoginToken": {
                "additionalProperties": false,
                "properties": {
                    "token": {
                        "description": "Token to use for API requests",
                        "title": "Token",
                        "type": "string"
                    }
                },
                "title": "ApiLoginToken",
                "type": "object"
            },
            "AttributeFilter": {
                "properties": {
                    "attribute_key": {
                        "description": "Name of attribute in schema",
                        "title": "Attribute Key",
                        "type": "string"
                    },
                    "attribute_value": {
                        "description": "Value to compare to attribute",
                        "title": "Attribute Value"
                    },
                    "op": {
                        "description": "Operator to compare value to attribute",
                        "enum": [
                            "eq",
                            "gt",
                            "lt"
                        ],
                        "title": "Op",
                        "type": "string"
                    }
                },
                "required": [
                    "attribute_key",
                    "attribute_value",
                    "op"
                ],
                "title": "AttributeFilter",
                "type": "object"
            },
            "AuditLogDeviceDetails": {
                "additionalProperties": false,
                "properties": {
                    "details": {
                        "description": "The device details for the audit log item.",
                        "title": "Details",
                        "type": "object"
                    },
                    "device_id": {
                        "description": "The unique identifier of a device.",
                        "title": "Device Id",
                        "type": "string"
                    },
                    "device_name": {
                        "description": "The name of the device.",
                        "title": "Device Name",
                        "type": "string"
                    },
                    "device_site_name": {
                        "description": "The site name of the device.",
                        "title": "Device Site Name",
                        "type": "string"
                    },
                    "device_type": {
                        "description": "The type of the device type, e.g., camera.",
                        "title": "Device Type",
                        "type": "string"
                    }
                },
                "title": "AuditLogDeviceDetails",
                "type": "object"
            },
            "AuditLogRequest": {
                "properties": {
                    "end_time": {
                        "description": "End of time range for which audit logs are requested",
                        "title": "End Time",
                        "type": "integer"
                    },
                    "page_num": {
                        "description": "PageNum to be used whe",
                        "title": "Page Num",
                        "type": "integer"
                    },
                    "per_page": {
                        "description": "Size of the results to be returned",
                        "title": "Per Page",
                        "type": "integer"
                    },
                    "start_time": {
                        "description": "Start of time range for which audit logs are requested",
                        "title": "Start Time",
                        "type": "integer"
                    }
                },
                "title": "AuditLogRequest",
                "type": "object"
            },
            "AuditLogRequestV1": {
                "properties": {
                    "end_time": {
                        "description": "The end of time range for requested audit logs.\nFormatted as a Unix timestamp in seconds.\nDefaults to the current time.",
                        "title": "End Time",
                        "type": "integer"
                    },
                    "page_size": {
                        "default": 100,
                        "description": "The number of items returned in a single response.\nDefault is 100. Max is 200.",
                        "exclusiveMinimum": true,
                        "maximum": 200,
                        "minimum": 0,
                        "title": "Page Size",
                        "type": "integer"
                    },
                    "page_token": {
                        "description": "The pagination token used to fetch the next page of results.",
                        "title": "Page Token",
                        "type": "string"
                    },
                    "start_time": {
                        "description": "The start of time range for requested audit logs.\nFormatted as a Unix timestamp in seconds.\nDefaults to an hour from the current time.",
                        "title": "Start Time",
                        "type": "integer"
                    },
                    "use_processed_timestamp": {
                        "default": false,
                        "description": "Whether to return audit logs where `processed_timestamp` is between `start_time` and `end_time` instead of `timestamp`. Useful when polling for new audit logs on a regular cadence to ensure logs that had not finished processing during an earlier polling window are still eventually captured.\n\nNote that audit logs where `timestamp` is before 2025-08-12 do not support this feature.",
                        "title": "Use Processed Timestamp",
                        "type": "boolean"
                    }
                },
                "title": "AuditLogRequestV1",
                "type": "object"
            },
            "AuditLogResponse": {
                "additionalProperties": false,
                "example": {
                    "audit_logs": [
                        {
                            "details": {
                                "success": true
                            },
                            "devices": null,
                            "event_description": "Login successful",
                            "event_name": "User Login",
                            "ip_address": "2607:fb90:9d41:cac4:4bf:1d9d:c4bd:4449",
                            "organization_id": "536330b2-5d65-4d53-bebb-e55bda318533",
                            "timestamp": "2021-07-21T04:11:51Z",
                            "user_id": "6eef97d3-9b33-4630-8a0c-37fcd58cc34d",
                            "user_name": "John Doe",
                            "verkada_support_id": null
                        },
                        {
                            "details": null,
                            "devices": [
                                {
                                    "details": null,
                                    "deviceId": "7db419e8-f274-474a-b16d-099eac18751b",
                                    "deviceType": "camera",
                                    "device_name": "Front door",
                                    "device_site_name": "San Mateo HQ"
                                }
                            ],
                            "event_description": "Live Stream started",
                            "event_name": "Live Stream Started",
                            "ip_address": "2607:fb90:9d41:cac4:4bf:1d9d:c4bd:4449",
                            "organization_id": "536330b2-5d65-4d53-bebb-e55bda318533",
                            "timestamp": "2021-07-21T04:11:38Z",
                            "user_id": "80f71f67-56d2-4963-8250-7c9fb81a3f24",
                            "user_name": "John Doe 2",
                            "verkada_support_id": null
                        }
                    ],
                    "has_next": null
                },
                "properties": {
                    "audit_logs": {
                        "items": {
                            "$ref": "#/components/schemas/AuditLogResponseItem"
                        },
                        "title": "Audit Logs",
                        "type": "array"
                    },
                    "has_next": {
                        "default": false,
                        "title": "Has Next",
                        "type": "boolean"
                    }
                },
                "required": [
                    "audit_logs"
                ],
                "title": "AuditLogResponse",
                "type": "object"
            },
            "AuditLogResponseItem": {
                "additionalProperties": false,
                "properties": {
                    "details": {
                        "description": "The details of the audit log entry.",
                        "title": "Details",
                        "type": "object"
                    },
                    "devices": {
                        "description": "The list of devices associated with the audit log entry.",
                        "items": {
                            "$ref": "#/components/schemas/AuditLogDeviceDetails"
                        },
                        "title": "Devices",
                        "type": "array"
                    },
                    "event_description": {
                        "description": "The description of the event.",
                        "title": "Event Description",
                        "type": "string"
                    },
                    "event_name": {
                        "description": "The name of the event.",
                        "title": "Event Name",
                        "type": "string"
                    },
                    "ip_address": {
                        "description": "The IP address of the user.",
                        "title": "Ip Address",
                        "type": "string"
                    },
                    "organization_id": {
                        "description": "The unique identifier of the organization.",
                        "format": "uuid",
                        "title": "Organization Id",
                        "type": "string"
                    },
                    "processed_timestamp": {
                        "description": "The timestamp when the audit log entry had finished processing and became available to retrieve via API.\nFormatted in ISO 8601 date time format.",
                        "title": "Processed Timestamp",
                        "type": "string"
                    },
                    "timestamp": {
                        "description": "The timestamp when the action identified by the audit log entry occurred.\nFormatted in ISO 8601 date time format.",
                        "title": "Timestamp",
                        "type": "string"
                    },
                    "user_email": {
                        "description": "The email of the user.",
                        "title": "User Email",
                        "type": "string"
                    },
                    "user_id": {
                        "description": "The unique identifier of the user for the audit log entry.",
                        "format": "uuid",
                        "title": "User Id",
                        "type": "string"
                    },
                    "user_name": {
                        "description": "The user name for the audit log entry.",
                        "title": "User Name",
                        "type": "string"
                    },
                    "verkada_support_id": {
                        "description": "The unique identifier used by Verkada support.",
                        "title": "Verkada Support Id",
                        "type": "string"
                    }
                },
                "title": "AuditLogResponseItem",
                "type": "object"
            },
            "AuditLogResponseV1": {
                "additionalProperties": false,
                "example": {
                    "audit_logs": [
                        {
                            "details": {
                                "success": true
                            },
                            "devices": null,
                            "event_description": "Login successful",
                            "event_name": "User Login",
                            "ip_address": "fd1b:9a8c:d3ef:20a3:fdca:f931:608b:1fa5",
                            "organization_id": "153818af-6726-4700-b2bf-882769006456",
                            "timestamp": "2021-07-21T04:11:51Z",
                            "user_id": "11205c1c-16d3-469f-b704-9e3dfa33097b",
                            "user_name": "John Doe",
                            "verkada_support_id": null
                        },
                        {
                            "details": null,
                            "devices": [
                                {
                                    "details": null,
                                    "deviceId": "d6ec4e98-c660-4079-8f7a-2adf3b4af1f2",
                                    "deviceType": "camera",
                                    "device_name": "Front door",
                                    "device_site_name": "San Mateo HQ"
                                }
                            ],
                            "event_description": "Live Stream started",
                            "event_name": "Live Stream Started",
                            "ip_address": "fdfc:6b74:3a02:baf1:fda6:1b58:7c40:374c",
                            "organization_id": "108336c7-ece8-4c9d-b4a4-af2c4be965d9",
                            "timestamp": "2021-07-21T04:11:38Z",
                            "user_id": "8df56f16-0966-4532-822a-ca9a1e52e6c6",
                            "user_name": "John Doe 2",
                            "verkada_support_id": null
                        }
                    ],
                    "next_page_token": null
                },
                "properties": {
                    "audit_logs": {
                        "description": "A list of audit logs.",
                        "items": {
                            "$ref": "#/components/schemas/AuditLogResponseItem"
                        },
                        "title": "Audit Logs",
                        "type": "array"
                    },
                    "next_page_token": {
                        "description": "The pagination token used to fetch the next page of results.",
                        "title": "Next Page Token",
                        "type": "string"
                    }
                },
                "title": "AuditLogResponseV1",
                "type": "object"
            },
            "BadRequestCreate": {
                "description": "Request is invalid. The possible reasons include.\n1. Email, first_name or last_name must be provided.\n2. User ID or External ID were not provided.\n3. External ID has invalid characters.",
                "properties": {
                    "data": {
                        "description": "Relevant data",
                        "title": "Data",
                        "type": "string"
                    },
                    "id": {
                        "description": "ID of specific error",
                        "title": "Id",
                        "type": "string"
                    },
                    "message": {
                        "description": "Error message, contains specific human readable context for the error",
                        "title": "Message",
                        "type": "string"
                    }
                },
                "required": [
                    "id",
                    "message",
                    "data"
                ],
                "title": "BadRequestCreate",
                "type": "object"
            },
            "BadRequestDelete": {
                "description": "Invalid Parameters. Possible reasons:\n1. User ID or External ID were not provided.\n2. External ID has invalid characters.\n3. Target is invalid because the user is SCIM managed, the last user in an organization with active devices, or the last admin user.",
                "properties": {
                    "data": {
                        "description": "Relevant data",
                        "title": "Data",
                        "type": "string"
                    },
                    "id": {
                        "description": "ID of specific error",
                        "title": "Id",
                        "type": "string"
                    },
                    "message": {
                        "description": "Error message, contains specific human readable context for the error",
                        "title": "Message",
                        "type": "string"
                    }
                },
                "required": [
                    "id",
                    "message",
                    "data"
                ],
                "title": "BadRequestDelete",
                "type": "object"
            },
            "BadRequestGet": {
                "description": "Invalid Parameters. Possible reasons:\n1. User ID or External ID were not provided.\n2. External ID has invalid characters.",
                "properties": {
                    "data": {
                        "description": "Relevant data",
                        "title": "Data",
                        "type": "string"
                    },
                    "id": {
                        "description": "ID of specific error",
                        "title": "Id",
                        "type": "string"
                    },
                    "message": {
                        "description": "Error message, contains specific human readable context for the error",
                        "title": "Message",
                        "type": "string"
                    }
                },
                "required": [
                    "id",
                    "message",
                    "data"
                ],
                "title": "BadRequestGet",
                "type": "object"
            },
            "BadRequestUpdate": {
                "description": "Invalid Parameters. Possible reasons:\n1. User ID or External ID were not provided.\n2. External ID has invalid characters.",
                "properties": {
                    "data": {
                        "description": "Relevant data",
                        "title": "Data",
                        "type": "string"
                    },
                    "id": {
                        "description": "ID of specific error",
                        "title": "Id",
                        "type": "string"
                    },
                    "message": {
                        "description": "Error message, contains specific human readable context for the error",
                        "title": "Message",
                        "type": "string"
                    }
                },
                "required": [
                    "id",
                    "message",
                    "data"
                ],
                "title": "BadRequestUpdate",
                "type": "object"
            },
            "BaseAccessMemberResponseListV1": {
                "additionalProperties": false,
                "properties": {
                    "access_members": {
                        "default": [],
                        "description": "The list of access members in an organization.",
                        "items": {
                            "$ref": "#/components/schemas/BaseAccessMemberResponseV1"
                        },
                        "title": "Access Members",
                        "type": "array"
                    }
                },
                "title": "BaseAccessMemberResponseListV1",
                "type": "object"
            },
            "BaseAccessMemberResponseV1": {
                "additionalProperties": false,
                "properties": {
                    "company_name": {
                        "description": "Company name",
                        "title": "Company Name",
                        "type": "string"
                    },
                    "department": {
                        "description": "Department",
                        "title": "Department",
                        "type": "string"
                    },
                    "department_id": {
                        "description": "Department ID",
                        "title": "Department Id",
                        "type": "string"
                    },
                    "email": {
                        "description": "The email of the access member.",
                        "title": "Email",
                        "type": "string"
                    },
                    "employee_id": {
                        "description": "Employee ID",
                        "title": "Employee Id",
                        "type": "string"
                    },
                    "employee_title": {
                        "description": "Employee title",
                        "title": "Employee Title",
                        "type": "string"
                    },
                    "external_id": {
                        "description": "An external user ID of the access member.",
                        "title": "External Id",
                        "type": "string"
                    },
                    "full_name": {
                        "description": "The full name of the access member.",
                        "title": "Full Name",
                        "type": "string"
                    },
                    "has_profile_photo": {
                        "description": "A flag that states whether or not the user has a profile photo.",
                        "title": "Has Profile Photo",
                        "type": "boolean"
                    },
                    "profile_photo_last_updated": {
                        "description": "The timestamp of when the user's profile photo was last updated.",
                        "format": "date-time",
                        "title": "Profile Photo Last Updated",
                        "type": "string"
                    },
                    "user_id": {
                        "description": "The unique identifier of the user managed by Verkada.",
                        "title": "User Id",
                        "type": "string"
                    }
                },
                "title": "BaseAccessMemberResponseV1",
                "type": "object"
            },
            "CCRData": {
                "additionalProperties": false,
                "properties": {
                    "conversion_rates": {
                        "additionalProperties": {
                            "type": "number"
                        },
                        "description": "A map of unix timestamps to conversion rate for that time bucket",
                        "title": "Conversion Rates",
                        "type": "object"
                    },
                    "helix_cameras_used": {
                        "description": "A list of cameras used for helix counts.",
                        "items": {
                            "type": "string"
                        },
                        "title": "Helix Cameras Used",
                        "type": "array"
                    },
                    "helix_counts": {
                        "additionalProperties": {
                            "type": "number"
                        },
                        "description": "A map of unix timestamps to helix event counts for that time bucket",
                        "title": "Helix Counts",
                        "type": "object"
                    },
                    "occupancy_camera_presets_used": {
                        "description": "A list of camera and preset pairs that were used for occupancy counts.",
                        "items": {
                            "type": "object"
                        },
                        "title": "Occupancy Camera Presets Used",
                        "type": "array"
                    },
                    "occupancy_in": {
                        "additionalProperties": {
                            "type": "number"
                        },
                        "description": "A map of unix timestamps to occupancy in counts for that time bucket",
                        "title": "Occupancy In",
                        "type": "object"
                    }
                },
                "title": "CCRData",
                "type": "object"
            },
            "CameraAudioStatusGetRequest": {
                "properties": {
                    "camera_id": {
                        "description": "The unique identifier of the camera.",
                        "title": "Camera Id",
                        "type": "string"
                    }
                },
                "required": [
                    "camera_id"
                ],
                "title": "CameraAudioStatusGetRequest",
                "type": "object"
            },
            "CameraAudioStatusGetResponse": {
                "additionalProperties": false,
                "properties": {
                    "camera_id": {
                        "description": "The unique identifier of the camera.",
                        "title": "Camera Id",
                        "type": "string"
                    },
                    "enabled": {
                        "description": "The status of audio for the camera. If value is True, audio is turned on for the camera.",
                        "title": "Enabled",
                        "type": "boolean"
                    }
                },
                "required": [
                    "camera_id",
                    "enabled"
                ],
                "title": "CameraAudioStatusGetResponse",
                "type": "object"
            },
            "CameraAudioStatusPostRequest": {
                "properties": {
                    "camera_id": {
                        "description": "The unique identifier of the camera.",
                        "title": "Camera Id",
                        "type": "string"
                    },
                    "enabled": {
                        "description": "The status of audio for the camera. If value is True, audio is turned on for the camera.",
                        "title": "Enabled",
                        "type": "boolean"
                    }
                },
                "required": [
                    "camera_id",
                    "enabled"
                ],
                "title": "CameraAudioStatusPostRequest",
                "type": "object"
            },
            "CameraConfigGetRequestV1": {
                "properties": {
                    "cameraId": {
                        "description": "The unique identifier of a  camera.",
                        "title": "Cameraid",
                        "type": "string"
                    },
                    "paramName": {
                        "description": "Camera configuration parameter name.",
                        "title": "Paramname",
                        "type": "string"
                    }
                },
                "required": [
                    "cameraId",
                    "paramName"
                ],
                "title": "CameraConfigGetRequestV1",
                "type": "object"
            },
            "CameraConfigGetResponseV1": {
                "additionalProperties": false,
                "properties": {
                    "cameraId": {
                        "description": "The unique identifier of a  camera.",
                        "title": "Cameraid",
                        "type": "string"
                    },
                    "paramName": {
                        "description": "Camera configuration parameter name.",
                        "title": "Paramname",
                        "type": "string"
                    },
                    "paramValue": {
                        "description": "Camera configuration parameter value.",
                        "title": "Paramvalue"
                    }
                },
                "required": [
                    "cameraId",
                    "paramName",
                    "paramValue"
                ],
                "title": "CameraConfigGetResponseV1",
                "type": "object"
            },
            "CameraConfigPostRequestV1": {
                "properties": {
                    "cameraIds": {
                        "description": "List of unique identifiers per camera.",
                        "items": {
                            "type": "string"
                        },
                        "title": "Cameraids",
                        "type": "array"
                    },
                    "paramName": {
                        "description": "Camera configuration parameter name.",
                        "title": "Paramname",
                        "type": "string"
                    },
                    "paramValue": {
                        "description": "Camera configuration parameter value.",
                        "title": "Paramvalue"
                    }
                },
                "required": [
                    "cameraIds",
                    "paramName",
                    "paramValue"
                ],
                "title": "CameraConfigPostRequestV1",
                "type": "object"
            },
            "CameraEvent": {
                "additionalProperties": false,
                "description": "Camera event",
                "properties": {
                    "device_id": {
                        "description": "ID of the device that generated the event",
                        "title": "Device Id",
                        "type": "string"
                    },
                    "device_type": {
                        "default": "camera",
                        "description": "Always 'camera' for camera events",
                        "enum": [
                            "camera"
                        ],
                        "title": "Device Type",
                        "type": "string"
                    },
                    "event_id": {
                        "description": "Unique identifier for the event",
                        "title": "Event Id",
                        "type": "string"
                    },
                    "event_info": {
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/CameraEventInfo"
                            }
                        ],
                        "description": "Camera-specific event information",
                        "title": "Event Info"
                    },
                    "event_type": {
                        "description": "Type of event",
                        "title": "Event Type",
                        "type": "string"
                    },
                    "timestamp": {
                        "description": "Event timestamp in RFC 3339 format (e.g., '2025-01-17T21:06:20+00:00')",
                        "title": "Timestamp",
                        "type": "string"
                    }
                },
                "required": [
                    "event_id",
                    "device_id",
                    "event_type",
                    "timestamp"
                ],
                "title": "CameraEvent",
                "type": "object"
            },
            "CameraEventInfo": {
                "description": "Camera-specific event fields",
                "properties": {
                    "crowd_threshold": {
                        "description": "Threshold that was exceeded for crowd events",
                        "title": "Crowd Threshold",
                        "type": "integer"
                    },
                    "detected_objects": {
                        "description": "Objects detected in motion/crowd events (e.g., ['person', 'vehicle'])",
                        "items": {
                            "type": "string"
                        },
                        "title": "Detected Objects",
                        "type": "array"
                    },
                    "event_description": {
                        "description": "Description for AI-generated events",
                        "title": "Event Description",
                        "type": "string"
                    },
                    "license_plate_number": {
                        "description": "License plate number detected",
                        "title": "License Plate Number",
                        "type": "string"
                    },
                    "license_plate_state": {
                        "description": "State/region of the license plate",
                        "title": "License Plate State",
                        "type": "string"
                    },
                    "location": {
                        "description": "Location description",
                        "title": "Location",
                        "type": "string"
                    },
                    "location_lat": {
                        "description": "Latitude coordinate",
                        "title": "Location Lat",
                        "type": "string"
                    },
                    "location_lon": {
                        "description": "Longitude coordinate",
                        "title": "Location Lon",
                        "type": "string"
                    },
                    "person_label": {
                        "description": "Label/name of the person of interest detected",
                        "title": "Person Label",
                        "type": "string"
                    }
                },
                "title": "CameraEventInfo",
                "type": "object"
            },
            "CameraFeatureGetRequestV1": {
                "properties": {
                    "cameraId": {
                        "description": "The unique identifier of a  camera.",
                        "title": "Cameraid",
                        "type": "string"
                    },
                    "featureName": {
                        "description": "Camera feature name.",
                        "title": "Featurename",
                        "type": "string"
                    }
                },
                "required": [
                    "cameraId",
                    "featureName"
                ],
                "title": "CameraFeatureGetRequestV1",
                "type": "object"
            },
            "CameraFeatureGetResponseV1": {
                "additionalProperties": false,
                "properties": {
                    "cameraId": {
                        "description": "The unique identifier of a  camera.",
                        "title": "Cameraid",
                        "type": "string"
                    },
                    "enabled": {
                        "description": "Is feature enabled.",
                        "title": "Enabled",
                        "type": "boolean"
                    },
                    "featureName": {
                        "description": "Camera feature name.",
                        "title": "Featurename",
                        "type": "string"
                    }
                },
                "required": [
                    "cameraId",
                    "featureName",
                    "enabled"
                ],
                "title": "CameraFeatureGetResponseV1",
                "type": "object"
            },
            "CameraFeaturePostRequestV1": {
                "properties": {
                    "cameraIds": {
                        "description": "List of unique identifiers per camera.",
                        "items": {
                            "type": "string"
                        },
                        "title": "Cameraids",
                        "type": "array"
                    },
                    "enabled": {
                        "description": "Is feature enabled.",
                        "title": "Enabled",
                        "type": "boolean"
                    },
                    "featureName": {
                        "description": "Camera feature name.",
                        "title": "Featurename",
                        "type": "string"
                    }
                },
                "required": [
                    "cameraIds",
                    "featureName",
                    "enabled"
                ],
                "title": "CameraFeaturePostRequestV1",
                "type": "object"
            },
            "CameraFootageStreamRequestV1": {
                "properties": {
                    "bucket": {
                        "default": "",
                        "description": "The location for cloud backup segment.\nThe API User should not have to manually specify this parameter. It should be pre-loaded in the URLs contained in the HLS playlist file.",
                        "title": "Bucket",
                        "type": "string"
                    },
                    "byte_range": {
                        "default": "",
                        "description": "The byte range of video segments.\nThe API User should not have to manually specify this parameter. It should be pre-loaded in the URLs contained in the HLS playlist file.",
                        "title": "Byte Range",
                        "type": "string"
                    },
                    "camera": {
                        "default": "",
                        "description": "The unique identifier of the camera.\nThe API User should not have to manually specify this parameter. It should be pre-loaded in the URLs contained in the HLS playlist file.",
                        "title": "Camera",
                        "type": "string"
                    },
                    "camera_id": {
                        "description": "The unique identifier of the camera.",
                        "title": "Camera Id",
                        "type": "string"
                    },
                    "codec": {
                        "default": "hevc",
                        "description": "The codec used for the video stream.\n\nDefault: <code>hevc</code>",
                        "title": "Codec",
                        "type": "string"
                    },
                    "data_location": {
                        "default": "",
                        "description": "The location of video segments.\nThe API User should not have to manually specify this parameter. It should be pre-loaded in the URLs contained in the HLS playlist file.",
                        "title": "Data Location",
                        "type": "string"
                    },
                    "end_time": {
                        "default": 0,
                        "description": "The end time of the video stream on a specified camera.\nFormatted as epoch time in seconds.\nFor live footage stream, set to <code>0</code>.\nFor history footage stream, <code>start_time</code> - <code>end_time</code> should be less than or equal to <code>3600</code>.\n\nDefault: <code>0</code>",
                        "title": "End Time",
                        "type": "integer"
                    },
                    "file": {
                        "default": "",
                        "description": "File name to fetch the video segments.\nThe API User should not have to manually specify this parameter. It should be pre-loaded in the URLs contained in the HLS playlist file.",
                        "title": "File",
                        "type": "string"
                    },
                    "init": {
                        "default": "",
                        "description": "The init segment of video segments.\nThe API User should not have to manually specify this parameter. It should be pre-loaded in the URLs contained in the HLS playlist file.",
                        "title": "Init",
                        "type": "string"
                    },
                    "init_byte_range": {
                        "default": "",
                        "description": "The byte range of init segment.\nThe API User should not have to manually specify this parameter. It should be pre-loaded in the URLs contained in the HLS playlist file.",
                        "title": "Init Byte Range",
                        "type": "string"
                    },
                    "iv": {
                        "default": "",
                        "description": "The initialization vector of video segments.\nThe API User should not have to manually specify this parameter. It should be pre-loaded in the URLs contained in the HLS playlist file.",
                        "title": "Iv",
                        "type": "string"
                    },
                    "jwt": {
                        "description": "A short lived token that will be used to verify the permission to stream live or history footage from the camera.\nThis can be acquired with the <a href='https://apidocs.verkada.com/reference/getfootagetokenviewv1'>Get Streaming Token endpoint</a>.",
                        "title": "Jwt",
                        "type": "string"
                    },
                    "key_name": {
                        "default": "",
                        "description": "The key name of video segments.\nThe API User should not have to manually specify this parameter. It should be pre-loaded in the URLs contained in the HLS playlist file.",
                        "title": "Key Name",
                        "type": "string"
                    },
                    "offset": {
                        "default": "",
                        "description": "The offset of video segments. Only relevant for recent historical segments.\nThe API User should not have to manually specify this parameter. It should be pre-loaded in the URLs contained in the HLS playlist file.",
                        "title": "Offset",
                        "type": "string"
                    },
                    "org_id": {
                        "description": "The unique identifier of the organization.",
                        "title": "Org Id",
                        "type": "string"
                    },
                    "prefetch": {
                        "default": "",
                        "description": "List of segments to preload.\nThe API User should not have to manually specify this parameter. It should be pre-loaded in the URLs contained in the HLS playlist file.",
                        "title": "Prefetch",
                        "type": "string"
                    },
                    "resolution": {
                        "default": "low_res",
                        "description": "The resolution of the video stream.\nFor live video stream, set to <code>high_res</code> for the high resolution stream, and set to <code>low_res</code> for the low resolution stream.\nFor history video streaming, set to <code>high_res</code> for a mix of low and high resolution video stream with high resolution footage prioritized when available and set to <code>low_res</code> for only low resolution footage.\n\nDefault: <code>low_res</code>",
                        "title": "Resolution",
                        "type": "string"
                    },
                    "source": {
                        "default": "",
                        "description": "The source of video segments.\nThe API User should not have to manually specify this parameter. It should be pre-loaded in the URLs contained in the HLS playlist file.",
                        "title": "Source",
                        "type": "string"
                    },
                    "source_encrypted": {
                        "default": "",
                        "description": "The encryption state of video segments.\nThe API User should not have to manually specify this parameter. It should be pre-loaded in the URLs contained in the HLS playlist file.",
                        "title": "Source Encrypted",
                        "type": "string"
                    },
                    "start_time": {
                        "default": 0,
                        "description": "The start time of the video stream on a specified camera.\nFormatted as epoch time in seconds.\nFor live footage stream, set to <code>0</code>.\nFor history footage stream, <code>start_time</code> - <code>end_time</code> should be less than or equal to <code>3600</code>.\n\nDefault: <code>0</code>",
                        "title": "Start Time",
                        "type": "integer"
                    },
                    "start_ts": {
                        "default": "",
                        "description": "The start time of video segments. Used for recent historical segments.\nThe API User should not have to manually specify this parameter. It should be pre-loaded in the URLs contained in the HLS playlist file.",
                        "title": "Start Ts",
                        "type": "string"
                    },
                    "stream_id": {
                        "default": "",
                        "description": "The stream identifier of video segments.\nThe API User should not have to manually specify this parameter. It should be pre-loaded in the URLs contained in the HLS playlist file.",
                        "title": "Stream Id",
                        "type": "string"
                    },
                    "transcode": {
                        "default": false,
                        "description": "If a segment should be transcoded to H264.\nThe API User should not have to manually specify this parameter. It should be pre-loaded in the URLs contained in the HLS playlist file.",
                        "title": "Transcode",
                        "type": "boolean"
                    },
                    "ts": {
                        "default": "",
                        "description": "The timestamp of video segments.\nThe API User should not have to manually specify this parameter. It should be pre-loaded in the URLs contained in the HLS playlist file.",
                        "title": "Ts",
                        "type": "string"
                    },
                    "type": {
                        "default": "stream",
                        "description": "The video type.\nThis parameter is reserved for solely future compatibility. Set to <code>stream</code>.\n\nDefault: <code>stream</code>",
                        "title": "Type",
                        "type": "string"
                    }
                },
                "required": [
                    "org_id",
                    "camera_id",
                    "jwt"
                ],
                "title": "CameraFootageStreamRequestV1",
                "type": "object"
            },
            "CameraInfo": {
                "additionalProperties": false,
                "properties": {
                    "inside_camera_id": {
                        "description": "The ID of the nearby camera positioned inside the door.",
                        "title": "Inside Camera Id",
                        "type": "string"
                    },
                    "intercom_camera_id": {
                        "description": "The ID of the intercom camera if the door is controlled by an inercom",
                        "title": "Intercom Camera Id",
                        "type": "string"
                    },
                    "outside_camera_id": {
                        "description": "The ID of the nearby camera positioned inside the door.",
                        "title": "Outside Camera Id",
                        "type": "string"
                    }
                },
                "title": "CameraInfo",
                "type": "object"
            },
            "CameraInfoItem": {
                "additionalProperties": false,
                "properties": {
                    "camera_id": {
                        "description": "The unique identifier of the camera.",
                        "format": "uuid",
                        "title": "Camera Id",
                        "type": "string"
                    },
                    "cloud_retention": {
                        "description": "The number of days of cloud backup storage of the camera.",
                        "title": "Cloud Retention",
                        "type": "integer"
                    },
                    "date_added": {
                        "description": "The time when the camera added to your organization.\nFormatted in Unix epoch format.",
                        "title": "Date Added",
                        "type": "integer"
                    },
                    "device_retention": {
                        "description": "The number of days of storage available on the camera.",
                        "title": "Device Retention",
                        "type": "integer"
                    },
                    "firmware": {
                        "description": "The status of the camera firmware.",
                        "title": "Firmware",
                        "type": "string"
                    },
                    "firmware_update_schedule": {
                        "description": "Delimited list of <code>start_time, end_time</code> as timeslot for which         camera firmware can be updated, start_time and end_time are integers         indicating seconds to midnight, i.e, [3600, 7200] means 1am - 2am",
                        "title": "Firmware Update Schedule",
                        "type": "string"
                    },
                    "last_online": {
                        "description": "The last time when camera was online.\nFormatted in Unix epoch format.",
                        "title": "Last Online",
                        "type": "integer"
                    },
                    "local_ip": {
                        "description": "The local IP address of the camera.",
                        "title": "Local Ip",
                        "type": "string"
                    },
                    "location": {
                        "description": "The location of the camera.",
                        "title": "Location",
                        "type": "string"
                    },
                    "location_angle": {
                        "description": "The angle of the camera.",
                        "title": "Location Angle",
                        "type": "number"
                    },
                    "location_lat": {
                        "description": "The latitude of the camera location.",
                        "title": "Location Lat",
                        "type": "number"
                    },
                    "location_lon": {
                        "description": "The longitude of the camera location.",
                        "title": "Location Lon",
                        "type": "number"
                    },
                    "mac": {
                        "description": "The MAC address of the camera.",
                        "title": "Mac",
                        "type": "string"
                    },
                    "model": {
                        "description": "The model name of the camera.",
                        "title": "Model",
                        "type": "string"
                    },
                    "name": {
                        "description": "The name of the camera.",
                        "title": "Name",
                        "type": "string"
                    },
                    "people_history_enabled": {
                        "default": false,
                        "description": "Whether people history is enabled or not",
                        "title": "People History Enabled",
                        "type": "boolean"
                    },
                    "serial": {
                        "description": "The serial number of the camera.",
                        "title": "Serial",
                        "type": "string"
                    },
                    "site": {
                        "description": "The site name of the camera.",
                        "title": "Site",
                        "type": "string"
                    },
                    "site_id": {
                        "description": "The site ID of the camera.",
                        "title": "Site Id",
                        "type": "string"
                    },
                    "status": {
                        "description": "The status of the camera.",
                        "title": "Status",
                        "type": "string"
                    },
                    "timezone": {
                        "description": "The timezone the camera is located in.",
                        "title": "Timezone",
                        "type": "string"
                    },
                    "vehicle_history_enabled": {
                        "default": false,
                        "description": "Whether vehicle history is enabled or not",
                        "title": "Vehicle History Enabled",
                        "type": "boolean"
                    }
                },
                "title": "CameraInfoItem",
                "type": "object"
            },
            "CameraInfoRequest": {
                "properties": {
                    "page_num": {
                        "default": 1,
                        "description": "The page number used for pagination in order to fetch the current page of results.",
                        "title": "Page Num",
                        "type": "integer"
                    },
                    "per_page": {
                        "default": 100,
                        "description": "The number of items returned in a single response. Default is 100. Max is 200.",
                        "exclusiveMinimum": true,
                        "maximum": 200,
                        "minimum": 0,
                        "title": "Per Page",
                        "type": "integer"
                    }
                },
                "title": "CameraInfoRequest",
                "type": "object"
            },
            "CameraInfoRequestV1": {
                "properties": {
                    "page_size": {
                        "default": 100,
                        "description": "The number of items returned in a single response.\nDefault is 100. Max is 200.",
                        "exclusiveMinimum": true,
                        "maximum": 200,
                        "minimum": 0,
                        "title": "Page Size",
                        "type": "integer"
                    },
                    "page_token": {
                        "description": "The pagination token used to fetch the next page of results.",
                        "title": "Page Token",
                        "type": "string"
                    }
                },
                "title": "CameraInfoRequestV1",
                "type": "object"
            },
            "CameraInfoResponse": {
                "additionalProperties": false,
                "example": {
                    "cameras": [
                        {
                            "camera_id": "8438a7f2-fdbc-4392-8b9b-d47513bcf5c8",
                            "cloud_rentention": 0,
                            "date_added": 1590699308,
                            "device_retention": 30,
                            "firmware": "Up to date",
                            "last_online": 1590899308,
                            "local_ip": "192.248.226.197",
                            "location": "San Mateo, California",
                            "mac": "E0:A7:00:06:25:49",
                            "model": "CD41",
                            "name": "CD41 Elevators",
                            "serial": "TAC3-R9CG-RF6X",
                            "site": "3rd Floor",
                            "status": "Live"
                        }
                    ]
                },
                "properties": {
                    "cameras": {
                        "items": {
                            "$ref": "#/components/schemas/CameraInfoItem"
                        },
                        "title": "Cameras",
                        "type": "array"
                    },
                    "has_next": {
                        "title": "Has Next",
                        "type": "boolean"
                    }
                },
                "required": [
                    "cameras"
                ],
                "title": "CameraInfoResponse",
                "type": "object"
            },
            "CameraInfoResponseV1": {
                "additionalProperties": false,
                "example": {
                    "cameras": [
                        {
                            "camera_id": "ba5ee6da-a33a-4008-b11f-a33dcb133239",
                            "cloud_rentention": 0,
                            "date_added": 1590699308,
                            "device_retention": 30,
                            "firmware": "Up to date",
                            "last_online": 1590899308,
                            "local_ip": "40.164.249.110",
                            "location": "San Mateo, California",
                            "mac": "A6:3C:C7:EC:10:03",
                            "model": "CD41",
                            "name": "CD41 Elevators",
                            "serial": "CB2N-GxCK-FM5P",
                            "site": "3rd Floor",
                            "status": "Live"
                        }
                    ]
                },
                "properties": {
                    "cameras": {
                        "description": "A list of camera device information.",
                        "items": {
                            "$ref": "#/components/schemas/CameraInfoItem"
                        },
                        "title": "Cameras",
                        "type": "array"
                    },
                    "next_page_token": {
                        "description": "The pagination token used to fetch the next page of results.",
                        "title": "Next Page Token",
                        "type": "string"
                    }
                },
                "title": "CameraInfoResponseV1",
                "type": "object"
            },
            "CardObjectResponseV1": {
                "additionalProperties": false,
                "properties": {
                    "active": {
                        "default": false,
                        "description": "Bool value specifying if the credential is currently active. Can be True or False. Default value is False.",
                        "title": "Active",
                        "type": "boolean"
                    },
                    "card_id": {
                        "description": "The unique identifier of the Access Card managed by Verkada.",
                        "title": "Card Id",
                        "type": "string"
                    },
                    "card_number": {
                        "description": "The card number  used to grant or deny access to a door.",
                        "title": "Card Number",
                        "type": "string"
                    },
                    "card_number_base36": {
                        "description": "The card number in base36 used to grant or deny access to a door.",
                        "title": "Card Number Base36",
                        "type": "string"
                    },
                    "card_number_hex": {
                        "description": "The card number in hexadecimal used to grant or deny access to a door.",
                        "title": "Card Number Hex",
                        "type": "string"
                    },
                    "facility_code": {
                        "description": "The facility code used to grant or deny access to a door.",
                        "title": "Facility Code",
                        "type": "string"
                    },
                    "type": {
                        "description": "The type of card used during the credential evaluation process.",
                        "title": "Type",
                        "type": "string"
                    }
                },
                "title": "CardObjectResponseV1",
                "type": "object"
            },
            "CloudBackupSettingsGetRequest": {
                "properties": {
                    "camera_id": {
                        "description": "The unique identifier of the camera.",
                        "title": "Camera Id",
                        "type": "string"
                    }
                },
                "required": [
                    "camera_id"
                ],
                "title": "CloudBackupSettingsGetRequest",
                "type": "object"
            },
            "CloudBackupSettingsGetResponse": {
                "additionalProperties": false,
                "properties": {
                    "camera_id": {
                        "description": "The unique identifier of the camera.",
                        "title": "Camera Id",
                        "type": "string"
                    },
                    "days_to_preserve": {
                        "description": "Array of booleans indicating for which days footage         should be uploaded. In order the elements in the array indicate the following days:         Sunday, Monday, Tuesday, Wednesday, Thursday, Friday, Saturday. If value is 1,         cloud backup is on for that day. If value is 0, cloud backup is off for that day",
                        "title": "Days To Preserve",
                        "type": "string"
                    },
                    "enabled": {
                        "description": "Status of cloud backup for a camera. It has two possible values: 1, 0.",
                        "title": "Enabled",
                        "type": "integer"
                    },
                    "last_updated_segment_hq": {
                        "description": "Epoch timestamp of the latest available backup segment in HD quality.",
                        "title": "Last Updated Segment Hq",
                        "type": "string"
                    },
                    "last_updated_segment_sq": {
                        "description": "Epoch timestamp of the latest available backup segment in SD quality.",
                        "title": "Last Updated Segment Sq",
                        "type": "string"
                    },
                    "time_to_preserve": {
                        "description": "Delimited list of <code>start_time, end_time</code> as timeslot for which a         user wants footage to be backed up to the cloud, start_time and end_time are integers         indicating seconds to midnight, i.e, [3600, 7200] means 1am - 2am",
                        "title": "Time To Preserve",
                        "type": "string"
                    },
                    "upload_timeslot": {
                        "description": "Delimited list of <code>start_time, end_time</code> as timeslot for scheduled         time for footage upload, start_time and end_time are integers indicating seconds to         midnight, i.e, [3600, 7200] means 1am - 2am",
                        "title": "Upload Timeslot",
                        "type": "string"
                    },
                    "video_quality": {
                        "description": "Quality of the uploaded video.         Two values are possible: <code>STANDARD_QUALITY</code> and <code>HIGH_QUALITY</code>.",
                        "title": "Video Quality",
                        "type": "string"
                    },
                    "video_to_upload": {
                        "description": "Defines what type of video is backed-up.         Two values are possible: <code>MOTION</code> and <code>ALL</code>.",
                        "title": "Video To Upload",
                        "type": "string"
                    }
                },
                "required": [
                    "camera_id",
                    "enabled",
                    "video_to_upload",
                    "video_quality",
                    "days_to_preserve",
                    "time_to_preserve",
                    "upload_timeslot",
                    "last_updated_segment_sq",
                    "last_updated_segment_hq"
                ],
                "title": "CloudBackupSettingsGetResponse",
                "type": "object"
            },
            "CloudBackupSettingsPostRequest": {
                "properties": {
                    "camera_id": {
                        "description": "The unique identifier of the camera.",
                        "title": "Camera Id",
                        "type": "string"
                    },
                    "days_to_preserve": {
                        "description": "Delimited list of booleans indicating which days footage         should be uploaded. The elements in the array indicate the following days in order:         Sunday, Monday, Tuesday, Wednesday, Thursday, Friday, Saturday. If value is 1,         cloud backup is on for that day. If value is 0, cloud backup is off for that day.        For example, <code>0,1,1,1,1,1,0</code> means only backup on weekdays.",
                        "title": "Days To Preserve",
                        "type": "string"
                    },
                    "enabled": {
                        "description": "Status of cloud backup for a camera.         If value is 1, cloud backup is enabled. If value is 0, cloud backup is disabled.",
                        "title": "Enabled",
                        "type": "integer"
                    },
                    "time_to_preserve": {
                        "description": "Delimited list of <code>start_time, end_time</code> as timeslot for which a         user wants footage to be backed up to the cloud, start_time and end_time are integers         indicating seconds to midnight, i.e, <code>3600,7200</code> means 1am - 2am",
                        "title": "Time To Preserve",
                        "type": "string"
                    },
                    "upload_timeslot": {
                        "description": "Delimited list of <code>start_time, end_time</code> as timeslot for scheduled         time for footage upload, start_time and end_time are integers indicating seconds to         midnight, i.e, <code>3600,7200</code> means 1am - 2am",
                        "title": "Upload Timeslot",
                        "type": "string"
                    },
                    "video_quality": {
                        "description": "Quality of the uploaded video.         Two values are possible: <code>STANDARD_QUALITY</code> and <code>HIGH_QUALITY</code>.",
                        "title": "Video Quality",
                        "type": "string"
                    },
                    "video_to_upload": {
                        "description": "The type of video that is backed-up.         Two values are possible: <code>MOTION</code> and <code>ALL</code>.",
                        "title": "Video To Upload",
                        "type": "string"
                    }
                },
                "required": [
                    "camera_id",
                    "enabled",
                    "video_to_upload",
                    "video_quality",
                    "days_to_preserve",
                    "time_to_preserve",
                    "upload_timeslot"
                ],
                "title": "CloudBackupSettingsPostRequest",
                "type": "object"
            },
            "ConflictingExternalId": {
                "description": "External ID already exists in organization on another user",
                "properties": {
                    "data": {
                        "description": "Relevant data",
                        "title": "Data",
                        "type": "string"
                    },
                    "id": {
                        "description": "ID of specific error",
                        "title": "Id",
                        "type": "string"
                    },
                    "message": {
                        "description": "Error message, contains specific human readable context for the error",
                        "title": "Message",
                        "type": "string"
                    }
                },
                "required": [
                    "id",
                    "message",
                    "data"
                ],
                "title": "ConflictingExternalId",
                "type": "object"
            },
            "CreateAccessLevelRequestV1": {
                "description": "Request schema for creating Access Levels.",
                "properties": {
                    "access_groups": {
                        "description": "IDs of Access Groups granted door access via this Access Level",
                        "items": {
                            "type": "string"
                        },
                        "title": "Access Groups",
                        "type": "array"
                    },
                    "access_schedule_events": {
                        "description": "List of Access Schedule Events associated with this Access Level",
                        "items": {
                            "$ref": "#/components/schemas/AccessScheduleEventV1"
                        },
                        "title": "Access Schedule Events",
                        "type": "array"
                    },
                    "doors": {
                        "description": "IDs of Doors accessible under this Access Level",
                        "items": {
                            "type": "string"
                        },
                        "title": "Doors",
                        "type": "array"
                    },
                    "name": {
                        "description": "Name of the Access Level",
                        "title": "Name",
                        "type": "string"
                    },
                    "sites": {
                        "description": "IDs of Sites containing the Doors this Access Level applies to",
                        "items": {
                            "type": "string"
                        },
                        "title": "Sites",
                        "type": "array"
                    }
                },
                "required": [
                    "name",
                    "access_groups",
                    "sites",
                    "doors",
                    "access_schedule_events"
                ],
                "title": "CreateAccessLevelRequestV1",
                "type": "object"
            },
            "CreateAccessScheduleEventRequestV1": {
                "description": "Request schema for creating an Access Schedule Event.",
                "properties": {
                    "door_status": {
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/DoorStatus"
                            }
                        ],
                        "default": "access_granted",
                        "description": "Status of the door during the event. Always set to 'access_granted' and does not need to be specified."
                    },
                    "end_time": {
                        "description": "End time of the event in HH:MM format (00:00 to 23:59) with required leading zeros",
                        "title": "End Time",
                        "type": "string"
                    },
                    "start_time": {
                        "description": "Start time of the event in HH:MM format (00:00 to 23:59) with required leading zeros",
                        "title": "Start Time",
                        "type": "string"
                    },
                    "weekday": {
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/WeekDay"
                            }
                        ],
                        "description": "Day of the week for the event"
                    }
                },
                "required": [
                    "weekday",
                    "start_time",
                    "end_time"
                ],
                "title": "CreateAccessScheduleEventRequestV1",
                "type": "object"
            },
            "CreateUserRequestBody": {
                "properties": {
                    "company_name": {
                        "description": "The name of the company the user is part of.",
                        "title": "Company Name",
                        "type": "string"
                    },
                    "department": {
                        "description": "The name of the department the user is part of.",
                        "title": "Department",
                        "type": "string"
                    },
                    "department_id": {
                        "description": "The department ID of the department the user is in.",
                        "title": "Department Id",
                        "type": "string"
                    },
                    "email": {
                        "description": "The email of the user.",
                        "title": "Email",
                        "type": "string"
                    },
                    "employee_id": {
                        "description": "The user's employee ID, does not have to be unique.",
                        "title": "Employee Id",
                        "type": "string"
                    },
                    "employee_title": {
                        "description": "The title of employee.",
                        "title": "Employee Title",
                        "type": "string"
                    },
                    "employee_type": {
                        "description": "The type of employee.",
                        "title": "Employee Type",
                        "type": "string"
                    },
                    "external_id": {
                        "description": "A unique identifier managed externally provided by the consumer.",
                        "title": "External Id",
                        "type": "string"
                    },
                    "first_name": {
                        "description": "The first name of the user.",
                        "title": "First Name",
                        "type": "string"
                    },
                    "last_name": {
                        "description": "The last name of the user.",
                        "title": "Last Name",
                        "type": "string"
                    },
                    "middle_name": {
                        "description": "The middle name of the user.",
                        "title": "Middle Name",
                        "type": "string"
                    },
                    "phone": {
                        "description": "The main phone number of a user, E.164 format preferred.",
                        "title": "Phone",
                        "type": "string"
                    }
                },
                "title": "CreateUserRequestBody",
                "type": "object"
            },
            "CreateUserResponse": {
                "additionalProperties": false,
                "properties": {
                    "active": {
                        "description": "Whether the user is active in the system.",
                        "title": "Active",
                        "type": "boolean"
                    },
                    "company_name": {
                        "description": "The name of the company the user is part of.",
                        "title": "Company Name",
                        "type": "string"
                    },
                    "department": {
                        "description": "The name of the department the user is part of.",
                        "title": "Department",
                        "type": "string"
                    },
                    "department_id": {
                        "description": "The department ID of the department the user is in.",
                        "title": "Department Id",
                        "type": "string"
                    },
                    "email": {
                        "description": "The email of the user.",
                        "title": "Email",
                        "type": "string"
                    },
                    "employee_id": {
                        "description": "The user's employee ID, does not have to be unique.",
                        "title": "Employee Id",
                        "type": "string"
                    },
                    "employee_title": {
                        "description": "The title of employee.",
                        "title": "Employee Title",
                        "type": "string"
                    },
                    "employee_type": {
                        "description": "The type of employee.",
                        "title": "Employee Type",
                        "type": "string"
                    },
                    "external_id": {
                        "description": "A unique identifier managed externally provided by the consumer.",
                        "title": "External Id",
                        "type": "string"
                    },
                    "first_name": {
                        "description": "The first name of the user.",
                        "title": "First Name",
                        "type": "string"
                    },
                    "last_name": {
                        "description": "The last name of the user.",
                        "title": "Last Name",
                        "type": "string"
                    },
                    "middle_name": {
                        "description": "The middle name of the user.",
                        "title": "Middle Name",
                        "type": "string"
                    },
                    "phone": {
                        "description": "The main phone number of a user, E.164 format preferred.",
                        "title": "Phone",
                        "type": "string"
                    },
                    "user_id": {
                        "default": "",
                        "description": "The unique identifier of the user managed by Verkada.",
                        "title": "User Id",
                        "type": "string"
                    }
                },
                "title": "CreateUserResponse",
                "type": "object"
            },
            "DashboardOccupancyTrendsRequestV1": {
                "properties": {
                    "dashboard_id": {
                        "description": "The unique identifier of the dashboard.",
                        "title": "Dashboard Id",
                        "type": "string"
                    },
                    "end_time": {
                        "description": "The end of the time range for dashboard occupancy trends.\nFormatted as a Unix timestamp in seconds.\nDefaults to the current time.",
                        "title": "End Time",
                        "type": "integer"
                    },
                    "interval": {
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/IntervalEnum"
                            }
                        ],
                        "default": "1_hour",
                        "description": "The time interval for each array in <code>trend_in</code> and <code>trend_out</code>.\nOptions available are: <code>15_minutes</code>, <code>1_hour</code>, <code>1_day</code>.\nDefaults to <code>1_hour</code>."
                    },
                    "start_time": {
                        "description": "The start of the time range for dashboard occupancy trends.\nFormatted as a Unix timestamp in seconds.\nDefaults to an hour from the current time.",
                        "title": "Start Time",
                        "type": "integer"
                    }
                },
                "required": [
                    "dashboard_id"
                ],
                "title": "DashboardOccupancyTrendsRequestV1",
                "type": "object"
            },
            "DashboardOccupancyTrendsResponseV1": {
                "additionalProperties": false,
                "properties": {
                    "dashboard_id": {
                        "description": "The unique identifier of the dashboard.",
                        "title": "Dashboard Id",
                        "type": "string"
                    },
                    "dashboard_name": {
                        "description": "The name of the dashboard.",
                        "title": "Dashboard Name",
                        "type": "string"
                    },
                    "end_time": {
                        "description": "The end of the time range for occupancy trends.",
                        "title": "End Time",
                        "type": "integer"
                    },
                    "occupancy": {
                        "description": "An array with range timestamps, and net occupancy.",
                        "items": {
                            "items": {
                                "type": "integer"
                            },
                            "type": "array"
                        },
                        "title": "Occupancy",
                        "type": "array"
                    },
                    "org_id": {
                        "description": "The unique identifier of the organization.",
                        "title": "Org Id",
                        "type": "string"
                    },
                    "org_name": {
                        "description": "The name of the organization.",
                        "title": "Org Name",
                        "type": "string"
                    },
                    "start_time": {
                        "description": "The start of the time range of occupancy trends.",
                        "title": "Start Time",
                        "type": "integer"
                    },
                    "trend_in": {
                        "description": "An array with range timestamps, and count for “in” direction.",
                        "items": {
                            "items": {
                                "type": "integer"
                            },
                            "type": "array"
                        },
                        "title": "Trend In",
                        "type": "array"
                    },
                    "trend_out": {
                        "description": "An array with range timestamps, and count for “out” direction.",
                        "items": {
                            "items": {
                                "type": "integer"
                            },
                            "type": "array"
                        },
                        "title": "Trend Out",
                        "type": "array"
                    }
                },
                "required": [
                    "org_id",
                    "dashboard_id",
                    "start_time",
                    "end_time",
                    "dashboard_name",
                    "org_name",
                    "trend_in",
                    "trend_out",
                    "occupancy"
                ],
                "title": "DashboardOccupancyTrendsResponseV1",
                "type": "object"
            },
            "DashboardWidgetTrendsRequestV2": {
                "properties": {
                    "end_time": {
                        "description": "The end of the time range for dashboard trends.\nFormatted as an IS0 8601 string.\nDefaults to the end of the last full bucket of data.",
                        "title": "End Time",
                        "type": "string"
                    },
                    "interval": {
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/IntervalEnum"
                            }
                        ],
                        "default": "PT1H",
                        "description": "The time interval for each array in <code>trend_in</code> and <code>trend_out</code>.\nOptions available are: <code>PT15M</code>, <code>PT1H</code>, <code>PT1D</code>.\nDefaults to <code>PT1H</code>."
                    },
                    "site_ids": {
                        "description": "The unique site identifiers to filter on.\nEach value must be a valid site UID.\nDefaults to all sites in the dashboard.",
                        "items": {
                            "type": "string"
                        },
                        "title": "Site Ids",
                        "type": "array"
                    },
                    "start_time": {
                        "description": "The start of the time range for dashboard trends.\nFormatted as an IS0 8601 string.\nDefaults to beginning of the last full bucket of data.",
                        "title": "Start Time",
                        "type": "string"
                    },
                    "widget_ids": {
                        "description": "The unique widget identifiers to filter on.\nEach value must be a valid widget UID.\nDefaults to all widgets in the dashboard.",
                        "items": {
                            "type": "string"
                        },
                        "title": "Widget Ids",
                        "type": "array"
                    },
                    "widget_types": {
                        "description": "The widget types to filter on.\nOne or multiple values from <code>occupancy</code>, <code>helix</code>, <code>conversion</code>, <code>queue</code>.\n\nDefaults to all widget types.",
                        "items": {
                            "$ref": "#/components/schemas/WidgetType"
                        },
                        "type": "array"
                    }
                },
                "title": "DashboardWidgetTrendsRequestV2",
                "type": "object"
            },
            "DashboardWidgetTrendsResponseV2": {
                "additionalProperties": false,
                "properties": {
                    "dashboard_id": {
                        "description": "The unique identifier of the dashboard.",
                        "title": "Dashboard Id",
                        "type": "string"
                    },
                    "dashboard_name": {
                        "description": "The name of the dashboard.",
                        "title": "Dashboard Name",
                        "type": "string"
                    },
                    "end_time": {
                        "description": "The end of the time range for dashboard trends.",
                        "title": "End Time",
                        "type": "string"
                    },
                    "interval": {
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/IntervalEnum"
                            }
                        ],
                        "description": "The time interval used."
                    },
                    "start_time": {
                        "description": "The start of the time range of dashboard trends.",
                        "title": "Start Time",
                        "type": "string"
                    },
                    "widgets": {
                        "description": "List of widgets found.",
                        "items": {
                            "$ref": "#/components/schemas/Widget"
                        },
                        "title": "Widgets",
                        "type": "array"
                    }
                },
                "required": [
                    "dashboard_id",
                    "start_time",
                    "end_time",
                    "dashboard_name",
                    "interval"
                ],
                "title": "DashboardWidgetTrendsResponseV2",
                "type": "object"
            },
            "DeleteAccessGroupRequestQueryV1": {
                "properties": {
                    "external_id": {
                        "description": "A unique identifier managed externally provided by the customer.",
                        "title": "External Id",
                        "type": "string"
                    },
                    "group_id": {
                        "description": "The unique identifier of the Access Group managed by Verkada.",
                        "format": "uuid",
                        "title": "Group Id",
                        "type": "string"
                    },
                    "user_id": {
                        "description": "The unique identifier of the user managed by Verkada.",
                        "format": "uuid",
                        "title": "User Id",
                        "type": "string"
                    }
                },
                "required": [
                    "group_id"
                ],
                "title": "DeleteAccessGroupRequestQueryV1",
                "type": "object"
            },
            "DeleteMFACodeQueryV1": {
                "properties": {
                    "code": {
                        "description": "The unique mfa code identifying a mfa code credential for a user.",
                        "title": "Code",
                        "type": "string"
                    },
                    "external_id": {
                        "description": "A unique identifier managed externally provided by the customer.",
                        "title": "External Id",
                        "type": "string"
                    },
                    "user_id": {
                        "description": "The unique identifier of the user managed by Verkada.",
                        "format": "uuid",
                        "title": "User Id",
                        "type": "string"
                    }
                },
                "required": [
                    "code"
                ],
                "title": "DeleteMFACodeQueryV1",
                "type": "object"
            },
            "DeleteProfilePhotoQuery": {
                "properties": {
                    "external_id": {
                        "description": "A unique identifier managed externally provided by the customer.",
                        "title": "External Id",
                        "type": "string"
                    },
                    "user_id": {
                        "description": "The unique identifier of the user managed by Verkada.",
                        "format": "uuid",
                        "title": "User Id",
                        "type": "string"
                    }
                },
                "title": "DeleteProfilePhotoQuery",
                "type": "object"
            },
            "DeleteUserRequest": {
                "properties": {
                    "external_id": {
                        "description": "A unique identifier managed externally provided by the consumer.",
                        "title": "External Id",
                        "type": "string"
                    },
                    "user_id": {
                        "description": "The unique identifier of the user managed by Verkada.",
                        "title": "User Id",
                        "type": "string"
                    }
                },
                "title": "DeleteUserRequest",
                "type": "object"
            },
            "DeleteUserResponse": {
                "additionalProperties": false,
                "properties": {},
                "title": "DeleteUserResponse",
                "type": "object"
            },
            "DenyListBodyRequest": {
                "properties": {
                    "base64_ascii_deny_list_csv": {
                        "description": "Base64 encoded (ASCII) deny list CSV data.",
                        "title": "Base64 Ascii Deny List Csv",
                        "type": "string"
                    }
                },
                "required": [
                    "base64_ascii_deny_list_csv"
                ],
                "title": "DenyListBodyRequest",
                "type": "object"
            },
            "DenyListEntry": {
                "additionalProperties": false,
                "properties": {
                    "date_of_birth": {
                        "description": "The date of birth of the Deny List Entry.",
                        "title": "Date Of Birth",
                        "type": "string"
                    },
                    "deny_list_entry_id": {
                        "description": "The unique identifier of the Deny List Entry.",
                        "format": "uuid",
                        "title": "Deny List Entry Id",
                        "type": "string"
                    },
                    "description": {
                        "description": "A detailed description of the Deny List Entry, including their physical appearance,                              potential relationships with others, and any known actions or behaviors that may have contributed to                              their entry on the deny list.",
                        "title": "Description",
                        "type": "string"
                    },
                    "first_name": {
                        "description": "The first name of the Deny List Entry.",
                        "title": "First Name",
                        "type": "string"
                    },
                    "last_name": {
                        "description": "The last name of the Deny List Entry.",
                        "title": "Last Name",
                        "type": "string"
                    },
                    "presigned_url": {
                        "description": "A link to a server-side photo of the Deny List Entry.",
                        "title": "Presigned Url",
                        "type": "string"
                    }
                },
                "required": [
                    "deny_list_entry_id",
                    "first_name",
                    "last_name"
                ],
                "title": "DenyListEntry",
                "type": "object"
            },
            "DenyListQueryRequest": {
                "properties": {
                    "site_id": {
                        "description": "The unique identifier of the Guest site. Valid sites can be retrieved with the Guest Site API.",
                        "format": "uuid",
                        "title": "Site Id",
                        "type": "string"
                    }
                },
                "title": "DenyListQueryRequest",
                "type": "object"
            },
            "DeviceInfo": {
                "additionalProperties": false,
                "description": "Detailed information about a single site",
                "properties": {
                    "device_id": {
                        "description": "The unique identifier of the device",
                        "title": "Device Id",
                        "type": "string"
                    },
                    "device_type": {
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/AlarmsDeviceType"
                            }
                        ],
                        "description": "What kind of device it is, one of:"
                    },
                    "site_id": {
                        "description": "The unique identifier of the alarm site that the device belongs to",
                        "title": "Site Id",
                        "type": "string"
                    }
                },
                "required": [
                    "device_id",
                    "site_id",
                    "device_type"
                ],
                "title": "DeviceInfo",
                "type": "object"
            },
            "DoorExceptionCalendarV1": {
                "description": "Schema for the Door Exception Calendar.",
                "properties": {
                    "door_exception_calendar_id": {
                        "default": "",
                        "description": "Unique ID of the Door Exception Calendar.",
                        "title": "Door Exception Calendar Id",
                        "type": "string"
                    },
                    "doors": {
                        "description": "Door IDs of Doors that the calendar’s Door Exceptions are being applied to.",
                        "items": {
                            "type": "string"
                        },
                        "title": "Doors",
                        "type": "array"
                    },
                    "exceptions": {
                        "description": "Door Exceptions for this Door Exception Calendar.",
                        "items": {
                            "$ref": "#/components/schemas/DoorExceptionV1"
                        },
                        "title": "Exceptions",
                        "type": "array"
                    },
                    "last_updated_at": {
                        "description": "The last time the Door Exception Calendar was updated. Formatted as a Unix timestamp in seconds.",
                        "title": "Last Updated At",
                        "type": "integer"
                    },
                    "name": {
                        "description": "Name of the Door Exception Calendar.",
                        "title": "Name",
                        "type": "string"
                    }
                },
                "required": [
                    "name"
                ],
                "title": "DoorExceptionCalendarV1",
                "type": "object"
            },
            "DoorExceptionV1": {
                "description": "Schema for the Door Exception.",
                "properties": {
                    "all_day_default": {
                        "default": false,
                        "description": "Bool value specifying if Exception is an All Day Default. If <code>TRUE</code>, then:\n- <code>door_status</code> must be set to <code>access_controlled</code>\n- <code>start_time</code> and <code>end_time</code> will automatically be set to <code>00:00:00</code> and <code>23:59:59</code>, respectively. Different values should not be provided.\n- <code>first_person_in</code> and <code>double_badge</code> must be <code>FALSE</code>",
                        "title": "All Day Default",
                        "type": "boolean"
                    },
                    "calendar_id": {
                        "default": "",
                        "description": "Unique ID of the Door Exception Calendar that this Exception belongs to.",
                        "title": "Calendar Id",
                        "type": "string"
                    },
                    "date": {
                        "description": "Date of the Door Exception formatted as <code>YYYY-MM-DD</code> (according to ISO 8601).",
                        "title": "Date",
                        "type": "string"
                    },
                    "door_exception_id": {
                        "default": "",
                        "description": "The unique ID of the Door Exception.",
                        "title": "Door Exception Id",
                        "type": "string"
                    },
                    "door_status": {
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/DoorStatusEnum"
                            }
                        ],
                        "default": "",
                        "description": "The door status that this Exception should apply to all doors assigned to its Door Exception Calendar.\n\nPossible values are:\n- <code>locked</code>\n- <code>card_and_code</code>\n- <code>access_controlled</code>\n- <code>unlocked</code>"
                    },
                    "double_badge": {
                        "default": false,
                        "description": "Bool value specifying if the Double Badge setting should be enabled for relevant doors. If <code>TRUE</code>, <code>door_status</code> must be set to <code>access_controlled</code>.\n\nBy default, all users with access to relevant doors will be allowed to double badge.",
                        "title": "Double Badge",
                        "type": "boolean"
                    },
                    "double_badge_group_ids": {
                        "description": "List of IDs for Access Groups that users must be a member of to be allowed to double badge on relevant doors.\n\n<code>double_badge</code> must also be set to <code>TRUE</code> if value is provided.",
                        "items": {
                            "type": "string"
                        },
                        "title": "Double Badge Group Ids",
                        "type": "array"
                    },
                    "end_time": {
                        "description": "End time of the Door Exception formatted as <code>hh:mm</code> (according to ISO 8601).",
                        "format": "time",
                        "title": "End Time",
                        "type": "string"
                    },
                    "first_person_in": {
                        "default": false,
                        "description": "Bool value specifying if the First Person In setting should be enabled for relevant doors. If <code>TRUE</code>, <code>door_status</code> must be set to <code>card_and_code</code>, <code>access_controlled</code>, or <code>unlocked</code>.",
                        "title": "First Person In",
                        "type": "boolean"
                    },
                    "first_person_in_group_ids": {
                        "description": "List of IDs for Access Groups including supervisors used for First Person In mode.\n\n<code>first_person_in</code> must also be set to <code>TRUE</code> if this value is provided.",
                        "items": {
                            "type": "string"
                        },
                        "title": "First Person In Group Ids",
                        "type": "array"
                    },
                    "recurrence_rule": {
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/RecurrenceRule"
                            }
                        ],
                        "description": "A recurrence rule object specifying when the exception should repeat.",
                        "title": "Recurrence Rule"
                    },
                    "start_time": {
                        "description": "Start time of the Door Exception formatted as <code>hh:mm</code> (according to ISO 8601).",
                        "format": "time",
                        "title": "Start Time",
                        "type": "string"
                    }
                },
                "required": [
                    "date",
                    "start_time",
                    "end_time"
                ],
                "title": "DoorExceptionV1",
                "type": "object"
            },
            "DoorInfo": {
                "additionalProperties": false,
                "properties": {
                    "accessControllerId": {
                        "description": "Unique identifier of the access controller",
                        "title": "Accesscontrollerid",
                        "type": "string"
                    },
                    "accessControllerName": {
                        "description": "Name of the access controller",
                        "title": "Accesscontrollername",
                        "type": "string"
                    },
                    "name": {
                        "description": "Name of the door",
                        "title": "Name",
                        "type": "string"
                    }
                },
                "title": "DoorInfo",
                "type": "object"
            },
            "DoorStatus": {
                "description": "Door status for Access Schedule Events. Always set to access_granted.",
                "enum": [
                    "access_granted"
                ],
                "title": "DoorStatus",
                "type": "string"
            },
            "DoorStatusEnum": {
                "description": "An enumeration.",
                "enum": [
                    "locked",
                    "card_and_code",
                    "access_controlled",
                    "unlocked"
                ],
                "title": "DoorStatusEnum",
                "type": "string"
            },
            "Event": {
                "additionalProperties": false,
                "properties": {
                    "device_id": {
                        "description": "The unique identifier of the device.",
                        "title": "Device Id",
                        "type": "string"
                    },
                    "device_type": {
                        "description": "The type of the device.",
                        "title": "Device Type",
                        "type": "string"
                    },
                    "end_timestamp": {
                        "description": "The time the event ended.\nFormatted as a Unix timestamp in seconds.",
                        "title": "End Timestamp",
                        "type": "string"
                    },
                    "event_id": {
                        "description": "The unique identifier of the event.",
                        "title": "Event Id",
                        "type": "string"
                    },
                    "event_info": {
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/EventInfo"
                            }
                        ],
                        "description": "The event information.",
                        "title": "Event Info"
                    },
                    "event_type": {
                        "description": "The type of the event.",
                        "title": "Event Type",
                        "type": "string"
                    },
                    "organization_id": {
                        "description": "The unique identifier of the organization.",
                        "title": "Organization Id",
                        "type": "string"
                    },
                    "site_id": {
                        "description": "The unique identifier of the site.",
                        "title": "Site Id",
                        "type": "string"
                    },
                    "timestamp": {
                        "description": "The time the event occurred.\nFormatted as a Unix timestamp in seconds.",
                        "title": "Timestamp",
                        "type": "string"
                    }
                },
                "title": "Event",
                "type": "object"
            },
            "EventInfo": {
                "additionalProperties": false,
                "properties": {
                    "accepted": {
                        "description": "Whether the unlock attempt was accepted",
                        "title": "Accepted",
                        "type": "boolean"
                    },
                    "auxInputId": {
                        "description": "Identifier of the auxiliary input",
                        "title": "Auxinputid",
                        "type": "string"
                    },
                    "auxInputName": {
                        "description": "Name of the auxiliary input",
                        "title": "Auxinputname",
                        "type": "string"
                    },
                    "buildingId": {
                        "description": "Identifier of the building",
                        "title": "Buildingid",
                        "type": "string"
                    },
                    "buildingName": {
                        "description": "Name of the building",
                        "title": "Buildingname",
                        "type": "string"
                    },
                    "direction": {
                        "description": "In or out door",
                        "title": "Direction",
                        "type": "string"
                    },
                    "doorId": {
                        "description": "Unique identifier of the door",
                        "title": "Doorid",
                        "type": "string"
                    },
                    "doorInfo": {
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/DoorInfo"
                            }
                        ],
                        "description": "Detailed information about the door",
                        "title": "Doorinfo"
                    },
                    "entityId": {
                        "description": "Identifier of the entity",
                        "title": "Entityid",
                        "type": "string"
                    },
                    "entityName": {
                        "description": "Name of the entity",
                        "title": "Entityname",
                        "type": "string"
                    },
                    "entityType": {
                        "description": "Type of the entity",
                        "title": "Entitytype",
                        "type": "string"
                    },
                    "eventType": {
                        "description": "Type of the event",
                        "title": "Eventtype",
                        "type": "string"
                    },
                    "floorId": {
                        "description": "Identifier of the floor",
                        "title": "Floorid",
                        "type": "string"
                    },
                    "floorName": {
                        "description": "Name of the floor",
                        "title": "Floorname",
                        "type": "string"
                    },
                    "floors": {
                        "description": "List of floors",
                        "items": {
                            "$ref": "#/components/schemas/FloorInfo"
                        },
                        "title": "Floors",
                        "type": "array"
                    },
                    "inputValue": {
                        "description": "Value of the input",
                        "title": "Inputvalue",
                        "type": "string"
                    },
                    "lockdownInfo": {
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/LockdownInfo"
                            }
                        ],
                        "description": "Information about lockdown status",
                        "title": "Lockdowninfo"
                    },
                    "message": {
                        "description": "Event message",
                        "title": "Message",
                        "type": "string"
                    },
                    "organizationId": {
                        "description": "Organization identifier",
                        "title": "Organizationid",
                        "type": "string"
                    },
                    "rawCard": {
                        "description": "Code or card number used in unlock attempt",
                        "title": "Rawcard",
                        "type": "string"
                    },
                    "siteId": {
                        "description": "Site identifier",
                        "title": "Siteid",
                        "type": "string"
                    },
                    "siteName": {
                        "description": "Name of the site",
                        "title": "Sitename",
                        "type": "string"
                    },
                    "type": {
                        "description": "System's name for the event type",
                        "title": "Type",
                        "type": "string"
                    },
                    "userId": {
                        "description": "User identifier",
                        "title": "Userid",
                        "type": "string"
                    },
                    "userInfo": {
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/UserInfo"
                            }
                        ],
                        "description": "Detailed information about the user",
                        "title": "Userinfo"
                    },
                    "userName": {
                        "description": "Name of the user",
                        "title": "Username",
                        "type": "string"
                    },
                    "uuid": {
                        "description": "Unique identifier of the event",
                        "title": "Uuid",
                        "type": "string"
                    }
                },
                "title": "EventInfo",
                "type": "object"
            },
            "EventsErrorResponse": {
                "additionalProperties": false,
                "description": "Error response schema",
                "properties": {
                    "details": {
                        "description": "Additional error details",
                        "title": "Details",
                        "type": "object"
                    },
                    "error": {
                        "description": "Error code",
                        "title": "Error",
                        "type": "string"
                    },
                    "message": {
                        "description": "Human-readable error message",
                        "title": "Message",
                        "type": "string"
                    }
                },
                "required": [
                    "error",
                    "message"
                ],
                "title": "EventsErrorResponse",
                "type": "object"
            },
            "EventsQueryV1": {
                "properties": {
                    "device_id": {
                        "description": "One or multiple comma separated values of device identifiers.",
                        "title": "Device Id",
                        "type": "string"
                    },
                    "end_time": {
                        "description": "The end of the time range for requested events.\nFormatted as a Unix timestamp in seconds.\nDefault value is the current time.",
                        "title": "End Time",
                        "type": "integer"
                    },
                    "event_type": {
                        "description": "One or multiple comma separated values from <code>door_opened</code>, <code>door_rejected</code>, <code>door_granted</code>, <code>door_forced_open</code>, <code>door_held_open</code>, <code>door_tailgating</code>, <code>door_crowd_detection</code>, <code>door_tamper</code>, <code>door_poi_detection</code>, <code>door_initialized</code>, <code>door_armed</code>, <code>door_armed_button_pressed</code>, <code>door_aux_unlock</code>, <code>door_locked</code>, <code>door_unlocked</code>, <code>door_unarmed_event</code>, <code>door_code_entered_event</code>, <code>door_button_press_entered_event</code>, <code>door_lock_state_changed</code>, <code>door_lockdown</code>, <code>door_auxinput_change_state</code>, <code>door_auxinput_held</code>, <code>door_low_battery</code>, <code>door_critical_battery</code>, <code>door_mobile_nfc_scan_accepted</code>, <code>door_mobile_nfc_scan_rejected</code>, <code>door_user_database_corrupt</code>, <code>door_keycard_entered_accepted</code>, <code>door_keycard_entered_rejected</code>, <code>door_code_entered_accepted</code>, <code>door_code_entered_rejected</code>, <code>door_remote_unlock_accepted</code>, <code>door_remote_unlock_rejected</code>, <code>door_press_to_exit_accepted</code>, <code>door_ble_unlock_attempt_accepted</code>, <code>door_ble_unlock_attempt_rejected</code>, <code>door_acu_offline</code>, <code>door_fire_alarm_triggered</code>, <code>door_fire_alarm_released</code>, <code>door_acu_fire_alarm_triggered</code>, <code>door_acu_fire_alarm_released</code>, <code>door_schedule_toggle</code>, <code>door_acu_dpi_cut</code>, <code>door_acu_dpi_short</code>, <code>door_acu_rex_cut</code>, <code>door_acu_rex_short</code>, <code>door_acu_rex2_cut</code>, <code>door_acu_rex2_short</code>, <code>door_acu_auxinput_cut</code>, <code>door_acu_auxinput_short</code>, <code>door_lockdown_debounced</code>, <code>door_lp_presented_accepted</code>, <code>door_lp_presented_rejected</code>, <code>door_apb_double_entry</code>, <code>door_apb_double_exit</code>, <code>all_access_granted</code>, <code>all_access_rejected</code>, <code>door_auxoutput_activated</code>.<code>door_auxoutput_deactivated</code>.<code>door_schedule_override_applied</code>, <code>door_schedule_override_removed</code>.",
                        "title": "Event Type",
                        "type": "string"
                    },
                    "page_size": {
                        "default": 100,
                        "description": "The number of items returned in a single response.\nDefault is 100. Max is 200.",
                        "exclusiveMinimum": true,
                        "maximum": 200,
                        "minimum": 0,
                        "title": "Page Size",
                        "type": "integer"
                    },
                    "page_token": {
                        "description": "The pagination token used to fetch the next page of results.",
                        "title": "Page Token",
                        "type": "string"
                    },
                    "site_id": {
                        "description": "One or multiple comma separated values of site identifiers.",
                        "title": "Site Id",
                        "type": "string"
                    },
                    "start_time": {
                        "description": "The start of the time range for requested events.\nFormatted as a Unix timestamp in seconds.\nDefault value is an hour ago from the current time.",
                        "title": "Start Time",
                        "type": "integer"
                    },
                    "user_id": {
                        "description": "One or multiple comma separated values of user identifiers.",
                        "title": "User Id",
                        "type": "string"
                    }
                },
                "title": "EventsQueryV1",
                "type": "object"
            },
            "EventsRequestV2": {
                "description": "Request schema for v2 events API",
                "properties": {
                    "cursor": {
                        "description": "Pagination cursor for retrieving the next page of results.",
                        "title": "Cursor",
                        "type": "string"
                    },
                    "device_ids": {
                        "description": "Comma-separated list of specific device IDs to filter by.",
                        "title": "Device Ids",
                        "type": "string"
                    },
                    "end_time": {
                        "description": "End time for events in ISO 8601 format (e.g., '2025-01-17T22:06:20Z'). Defaults to current time if not specified.",
                        "title": "End Time",
                        "type": "string"
                    },
                    "event_types": {
                        "description": "Comma-separated list of event types to filter by. Valid values vary by device type. If not specified, all event types are returned.",
                        "title": "Event Types",
                        "type": "string"
                    },
                    "limit": {
                        "default": 100,
                        "description": "Maximum number of events to return. Default is 100, maximum is 1000.",
                        "exclusiveMinimum": true,
                        "maximum": 1000,
                        "minimum": 0,
                        "title": "Limit",
                        "type": "integer"
                    },
                    "product_types": {
                        "description": "Comma-separated list of product types to filter by. Valid values: 'camera', 'access_control'. If not specified, events from all supported product types are returned.",
                        "title": "Product Types",
                        "type": "string"
                    },
                    "site_ids": {
                        "description": "Comma-separated list of site IDs to filter by (applies to access control events).",
                        "title": "Site Ids",
                        "type": "string"
                    },
                    "start_time": {
                        "description": "Start time for events in ISO 8601 format (e.g., '2025-01-17T21:06:20Z'). Defaults to 1 hour ago if not specified.",
                        "title": "Start Time",
                        "type": "string"
                    }
                },
                "title": "EventsRequestV2",
                "type": "object"
            },
            "EventsResponseV1": {
                "additionalProperties": false,
                "properties": {
                    "events": {
                        "description": "Events",
                        "items": {
                            "$ref": "#/components/schemas/Event"
                        },
                        "title": "Events",
                        "type": "array"
                    },
                    "next_page_token": {
                        "description": "The pagination token used to fetch the next page of results.",
                        "title": "Next Page Token",
                        "type": "string"
                    }
                },
                "title": "EventsResponseV1",
                "type": "object"
            },
            "EventsResponseV2": {
                "additionalProperties": false,
                "description": "Response schema for v2 events API",
                "properties": {
                    "cursor": {
                        "description": "Pagination cursor for retrieving the next page of results",
                        "title": "Cursor",
                        "type": "string"
                    },
                    "events": {
                        "description": "List of events",
                        "items": {
                            "discriminator": {
                                "mapping": {
                                    "access_control": "#/definitions/AccessEvent",
                                    "camera": "#/definitions/CameraEvent",
                                    "sensor": "#/definitions/SensorEvent"
                                },
                                "propertyName": "device_type"
                            },
                            "oneOf": [
                                {
                                    "$ref": "#/components/schemas/CameraEvent"
                                },
                                {
                                    "$ref": "#/components/schemas/SensorEvent"
                                },
                                {
                                    "$ref": "#/components/schemas/AccessEvent"
                                }
                            ]
                        },
                        "title": "Events",
                        "type": "array"
                    }
                },
                "required": [
                    "events"
                ],
                "title": "EventsResponseV2",
                "type": "object"
            },
            "FloorInfo": {
                "description": "Floor information for access events",
                "properties": {
                    "door_id": {
                        "description": "Unique identifier of the door",
                        "title": "Door Id",
                        "type": "string"
                    },
                    "floor_id": {
                        "description": "Unique identifier of the floor",
                        "title": "Floor Id",
                        "type": "string"
                    },
                    "uuid": {
                        "description": "Event ID for the unlock of the floor",
                        "title": "Uuid",
                        "type": "string"
                    }
                },
                "title": "FloorInfo",
                "type": "object"
            },
            "FootageTokenResponseV1": {
                "additionalProperties": false,
                "example": {
                    "accessibleCameras": [
                        "fb7ca55b-d122-4194-8828-4fc0470f0250"
                    ],
                    "accessibleSites": [
                        "a981fcc7-31f4-4c13-b70f-cd1cc1a13ea5",
                        "9e56ce44-28f2-497e-97f8-9b88df59663a"
                    ],
                    "expiration": 3600,
                    "expiresAt": 1667145565,
                    "jwt": "jwt_header.payload.signature",
                    "permission": [
                        "live",
                        "history"
                    ]
                },
                "properties": {
                    "accessibleCameras": {
                        "description": "Allowed cameras for footage streaming for the JWT based on the provided API key.",
                        "items": {
                            "type": "string"
                        },
                        "title": "Accessiblecameras",
                        "type": "array"
                    },
                    "accessibleSites": {
                        "description": "Allowed sites for footage streaming for the JWT based on the provided API key.",
                        "items": {
                            "type": "string"
                        },
                        "title": "Accessiblesites",
                        "type": "array"
                    },
                    "expiration": {
                        "description": "The expiration time for the JWT in seconds from now.",
                        "title": "Expiration",
                        "type": "integer"
                    },
                    "expiresAt": {
                        "description": "The expiration time for the JWT in as an epoch timestamp (in seconds).",
                        "title": "Expiresat",
                        "type": "integer"
                    },
                    "jwt": {
                        "description": "The JWT used to to stream footage.\nThe token will expire after the expiration timestamp specified in the request.\nThe token has permission to view streams that are live, history, or both based on the configuration of the API key provided.\nThe token has permission to stream from certain cameras based on the configuration of the API key.",
                        "title": "Jwt",
                        "type": "string"
                    },
                    "permission": {
                        "description": "Footage streaming permissions for the JWT based on the provided API key.",
                        "items": {
                            "type": "string"
                        },
                        "title": "Permission",
                        "type": "array"
                    }
                },
                "required": [
                    "jwt",
                    "expiration",
                    "expiresAt",
                    "permission",
                    "accessibleCameras",
                    "accessibleSites"
                ],
                "title": "FootageTokenResponseV1",
                "type": "object"
            },
            "FrequencyEnum": {
                "description": "An enumeration.",
                "enum": [
                    "DAILY",
                    "WEEKLY",
                    "MONTHLY",
                    "YEARLY"
                ],
                "title": "FrequencyEnum",
                "type": "string"
            },
            "FullResRequest": {
                "properties": {
                    "is_exact_ts": {
                        "default": false,
                        "description": "true if timestamp is exact, false by default",
                        "title": "Is Exact Ts",
                        "type": "boolean"
                    },
                    "ts": {
                        "description": "Approximate timestamp for which a thumbnail is requested",
                        "title": "Ts",
                        "type": "integer"
                    }
                },
                "title": "FullResRequest",
                "type": "object"
            },
            "GeneralAccessGroupRequestQueryV1": {
                "properties": {
                    "group_id": {
                        "description": "The unique identifier of the Access Group managed by Verkada.",
                        "format": "uuid",
                        "title": "Group Id",
                        "type": "string"
                    }
                },
                "required": [
                    "group_id"
                ],
                "title": "GeneralAccessGroupRequestQueryV1",
                "type": "object"
            },
            "GeneralCardQueryV1": {
                "properties": {
                    "card_id": {
                        "description": "The unique identifier of the Access Card managed by Verkada.",
                        "title": "Card Id",
                        "type": "string"
                    },
                    "external_id": {
                        "description": "A unique identifier managed externally provided by the customer.",
                        "title": "External Id",
                        "type": "string"
                    },
                    "user_id": {
                        "description": "The unique identifier of the user managed by Verkada.",
                        "format": "uuid",
                        "title": "User Id",
                        "type": "string"
                    }
                },
                "required": [
                    "card_id"
                ],
                "title": "GeneralCardQueryV1",
                "type": "object"
            },
            "GeneralLicensePlateQueryV1": {
                "properties": {
                    "external_id": {
                        "description": "A unique identifier managed externally provided by the customer.",
                        "title": "External Id",
                        "type": "string"
                    },
                    "license_plate_number": {
                        "description": "The unique license plate number identifying a license plate credential for a user.",
                        "title": "License Plate Number",
                        "type": "string"
                    },
                    "user_id": {
                        "description": "The unique identifier of the user managed by Verkada.",
                        "format": "uuid",
                        "title": "User Id",
                        "type": "string"
                    }
                },
                "required": [
                    "license_plate_number"
                ],
                "title": "GeneralLicensePlateQueryV1",
                "type": "object"
            },
            "GetAllLicensePlateOfInterestQueryRequest": {
                "properties": {
                    "page_size": {
                        "default": 1000,
                        "description": "The number of items returned in a single response. Default is 1000.",
                        "exclusiveMinimum": true,
                        "maximum": 10000,
                        "minimum": 0,
                        "title": "Page Size",
                        "type": "integer"
                    },
                    "page_token": {
                        "description": "The pagination token used to fetch the next page of results.",
                        "title": "Page Token",
                        "type": "string"
                    }
                },
                "title": "GetAllLicensePlateOfInterestQueryRequest",
                "type": "object"
            },
            "GetAllLicensePlateOfInterestResponse": {
                "additionalProperties": false,
                "example": {
                    "license_plate_of_interest": [
                        {
                            "creationTime": 1597821953,
                            "description": "John's car",
                            "licensePlate": "ABC123"
                        },
                        {
                            "creationTime": 1597822953,
                            "description": "Kevin's car",
                            "licensePlate": "ABC456"
                        }
                    ]
                },
                "properties": {
                    "license_plate_of_interest": {
                        "description": "A list of License Plates of Interest.",
                        "items": {
                            "$ref": "#/components/schemas/LicensePlateOfInterest"
                        },
                        "title": "License Plate Of Interest",
                        "type": "array"
                    },
                    "next_page_token": {
                        "description": "The pagination token used to fetch the next page of results.",
                        "title": "Next Page Token",
                        "type": "string"
                    }
                },
                "title": "GetAllLicensePlateOfInterestResponse",
                "type": "object"
            },
            "GetDenyListResponse": {
                "additionalProperties": false,
                "example": {
                    "deny_list_entries": [
                        {
                            "date_of_birth": "19990721",
                            "deny_list_entry_id": "d4474397-efc2-44a7-a28c-892f9cffa72e",
                            "description": "batmaaaaaaaaaaaaaaan",
                            "first_name": "Bat",
                            "last_name": "Man",
                            "presigned_url": "https://your-bucket-name.s3.amazonaws.com/batman-photo.jpg"
                        },
                        {
                            "date_of_birth": null,
                            "deny_list_entry_id": "312fa240-1361-47fd-970f-e92d505a8ca7",
                            "description": "supermaaaaaaaaaaaaaaan",
                            "first_name": "Jebediah",
                            "last_name": "Kerman",
                            "presigned_url": null
                        }
                    ],
                    "org_id": "fdf6e1f2-a986-418e-9a30-d0eb504e7f06",
                    "site_id": "fc749669-1370-4a9d-84e3-daf777e0546c",
                    "upload_time": 1618576800
                },
                "properties": {
                    "deny_list_entries": {
                        "description": "A list of Deny List Entry objects.",
                        "items": {
                            "$ref": "#/components/schemas/DenyListEntry"
                        },
                        "title": "Deny List Entries",
                        "type": "array"
                    },
                    "org_id": {
                        "description": "The unique identifier of the organization to which the Guest site belongs.",
                        "format": "uuid",
                        "title": "Org Id",
                        "type": "string"
                    },
                    "site_id": {
                        "description": "The unique identifier of the Guest site.",
                        "format": "uuid",
                        "title": "Site Id",
                        "type": "string"
                    },
                    "upload_time": {
                        "description": "The time the deny list was uploaded.",
                        "title": "Upload Time",
                        "type": "integer"
                    }
                },
                "required": [
                    "org_id"
                ],
                "title": "GetDenyListResponse",
                "type": "object"
            },
            "GetDoorExceptionCalendarsQueryV1": {
                "description": "Query schema for GET /access/v1/door/exception_calendar.",
                "properties": {
                    "last_updated_after": {
                        "description": "A timestamp used to filter out Door Exception Calendar where <code>last_updated_at</code> is after the specified time.\nFormatted as a Unix timestamp in seconds.",
                        "title": "Last Updated After",
                        "type": "integer"
                    }
                },
                "title": "GetDoorExceptionCalendarsQueryV1",
                "type": "object"
            },
            "GetDoorExceptionCalendarsResponseV1": {
                "additionalProperties": false,
                "description": "Response schema for GET /access/v1/door/exception_calendar.",
                "properties": {
                    "door_exception_calendars": {
                        "description": "List of Door Exception Calendars.",
                        "items": {
                            "$ref": "#/components/schemas/DoorExceptionCalendarV1"
                        },
                        "title": "Door Exception Calendars",
                        "type": "array"
                    }
                },
                "required": [
                    "door_exception_calendars"
                ],
                "title": "GetDoorExceptionCalendarsResponseV1",
                "type": "object"
            },
            "GetDoorInformationQueryV1": {
                "description": "Optional filters for door & site IDs.",
                "properties": {
                    "door_ids": {
                        "description": "The unique identifiers of doors to retrieve.",
                        "title": "Door Ids",
                        "type": "string"
                    },
                    "site_ids": {
                        "description": "The unique identifiers of sites from which to retrieve doors.",
                        "title": "Site Ids",
                        "type": "string"
                    }
                },
                "title": "GetDoorInformationQueryV1",
                "type": "object"
            },
            "GetDoorInformationResponseV1": {
                "additionalProperties": false,
                "description": "DoorInfo for each requested door.",
                "properties": {
                    "doors": {
                        "description": "A DoorInformationObject per requested door.",
                        "items": {
                            "$ref": "#/components/schemas/DoorInfo"
                        },
                        "title": "Doors",
                        "type": "array"
                    }
                },
                "required": [
                    "doors"
                ],
                "title": "GetDoorInformationResponseV1",
                "type": "object"
            },
            "GetProfilePhotoQuery": {
                "properties": {
                    "external_id": {
                        "description": "A unique identifier managed externally provided by the customer.",
                        "title": "External Id",
                        "type": "string"
                    },
                    "original": {
                        "default": false,
                        "description": "Whether to get the original or cropped image.",
                        "title": "Original",
                        "type": "boolean"
                    },
                    "user_id": {
                        "description": "The unique identifier of the user managed by Verkada.",
                        "format": "uuid",
                        "title": "User Id",
                        "type": "string"
                    }
                },
                "title": "GetProfilePhotoQuery",
                "type": "object"
            },
            "GetUserRequest": {
                "properties": {
                    "external_id": {
                        "description": "A unique identifier managed externally provided by the consumer.",
                        "title": "External Id",
                        "type": "string"
                    },
                    "user_id": {
                        "description": "The unique identifier of the user managed by Verkada.",
                        "title": "User Id",
                        "type": "string"
                    }
                },
                "title": "GetUserRequest",
                "type": "object"
            },
            "GetUserResponse": {
                "additionalProperties": false,
                "description": "Response schema for the get user endpoint.",
                "properties": {
                    "active": {
                        "description": "Whether the user is active in the system.",
                        "title": "Active",
                        "type": "boolean"
                    },
                    "company_name": {
                        "description": "The name of the company the user is part of.",
                        "title": "Company Name",
                        "type": "string"
                    },
                    "department": {
                        "description": "The name of the department the user is part of.",
                        "title": "Department",
                        "type": "string"
                    },
                    "department_id": {
                        "description": "The department ID of the department the user is in.",
                        "title": "Department Id",
                        "type": "string"
                    },
                    "email": {
                        "description": "The email of the user.",
                        "title": "Email",
                        "type": "string"
                    },
                    "employee_id": {
                        "description": "The user's employee ID, does not have to be unique.",
                        "title": "Employee Id",
                        "type": "string"
                    },
                    "employee_title": {
                        "description": "The title of employee.",
                        "title": "Employee Title",
                        "type": "string"
                    },
                    "employee_type": {
                        "description": "The type of employee.",
                        "title": "Employee Type",
                        "type": "string"
                    },
                    "external_id": {
                        "description": "A unique identifier managed externally provided by the consumer.",
                        "title": "External Id",
                        "type": "string"
                    },
                    "first_name": {
                        "description": "The first name of the user.",
                        "title": "First Name",
                        "type": "string"
                    },
                    "last_name": {
                        "description": "The last name of the user.",
                        "title": "Last Name",
                        "type": "string"
                    },
                    "middle_name": {
                        "description": "The middle name of the user.",
                        "title": "Middle Name",
                        "type": "string"
                    },
                    "phone": {
                        "description": "The main phone number of a user, E.164 format preferred.",
                        "title": "Phone",
                        "type": "string"
                    },
                    "user_id": {
                        "default": "",
                        "description": "The unique identifier of the user managed by Verkada.",
                        "title": "User Id",
                        "type": "string"
                    }
                },
                "title": "GetUserResponse",
                "type": "object"
            },
            "GranularApiKeyRoles": {
                "description": "Granular API key permission levels",
                "enum": [
                    "PUBLIC_API_CAMERA_READ",
                    "PUBLIC_API_CAMERA_READ_WRITE",
                    "PUBLIC_API_SENSORS_READ",
                    "PUBLIC_API_SENSORS_READ_WRITE",
                    "PUBLIC_API_ACCESS_READ",
                    "PUBLIC_API_ACCESS_READ_WRITE",
                    "PUBLIC_API_ACCESS_DOOR_MANAGEMENT_READ",
                    "PUBLIC_API_ACCESS_DOOR_MANAGEMENT_READ_WRITE",
                    "PUBLIC_API_ACCESS_LOCKDOWN_MANAGEMENT_READ",
                    "PUBLIC_API_ACCESS_LOCKDOWN_MANAGEMENT_READ_WRITE",
                    "PUBLIC_API_ALARMS_READ",
                    "PUBLIC_API_ALARMS_READ_WRITE",
                    "PUBLIC_API_CORE_READ",
                    "PUBLIC_API_CORE_READ_WRITE",
                    "PUBLIC_API_HELIX_READ",
                    "PUBLIC_API_HELIX_READ_WRITE",
                    "PUBLIC_API_WORKPLACE_READ",
                    "PUBLIC_API_WORKPLACE_READ_WRITE",
                    "PUBLIC_API_INTERCOM_READ",
                    "PUBLIC_API_INTERCOM_READ_WRITE",
                    "PUBLIC_API_EVENTS_READ",
                    "PUBLIC_API_EVENTS_READ_WRITE",
                    "PUBLIC_API_CAMERA_AUDIO",
                    "STREAM_VIEWER",
                    "LIVE_ONLY_VIEWER"
                ],
                "title": "GranularApiKeyRoles",
                "type": "string"
            },
            "GuestResponseItem": {
                "properties": {
                    "created": {
                        "description": "UTC timestamp at which the guest item was created.",
                        "title": "Created",
                        "type": "integer"
                    },
                    "email": {
                        "description": "Email of the guest.",
                        "title": "Email",
                        "type": "string"
                    },
                    "full_name": {
                        "description": "Full name of the guest, if provided.",
                        "title": "Full Name",
                        "type": "string"
                    },
                    "guest_id": {
                        "description": "The unique identifier of the guest tied to this visit. Note that this will be different across visits, even if the guest is the same.",
                        "format": "uuid",
                        "title": "Guest Id",
                        "type": "string"
                    },
                    "has_photo": {
                        "description": "Whether the guest has a photo available.",
                        "title": "Has Photo",
                        "type": "boolean"
                    },
                    "image_url": {
                        "description": "A *non-permanent* URL to the image of the guest. Only present if the guest provided an image at sign-in.",
                        "title": "Image Url",
                        "type": "string"
                    },
                    "is_sign_urls": {
                        "description": "Whether the provided image URL is a presigned URL. True by default. Undefined for student visits.",
                        "title": "Is Sign Urls",
                        "type": "boolean"
                    },
                    "person_id": {
                        "description": "The unique identifier of the Person of Interest created from this guest, if applicable.",
                        "title": "Person Id",
                        "type": "string"
                    },
                    "phone_number": {
                        "description": "Phone number of the guest.",
                        "title": "Phone Number",
                        "type": "string"
                    }
                },
                "required": [
                    "guest_id",
                    "created",
                    "full_name",
                    "email",
                    "phone_number",
                    "has_photo",
                    "person_id"
                ],
                "title": "GuestResponseItem",
                "type": "object"
            },
            "GuestSiteResponse": {
                "additionalProperties": false,
                "example": {
                    "guest_sites": [
                        {
                            "org_id": "fdf6e1f2-a986-418e-9a30-d0eb504e7f06",
                            "site_id": "fc749669-1370-4a9d-84e3-daf777e0546c",
                            "site_name": "Site 1"
                        },
                        {
                            "org_id": "fdf6e1f2-a986-418e-9a30-d0eb504e7f06",
                            "site_id": "828ed0ac-6070-49ac-90cb-e5caba0de838",
                            "site_name": "Site 2"
                        }
                    ]
                },
                "properties": {
                    "guest_sites": {
                        "items": {
                            "$ref": "#/components/schemas/GuestSiteResponseItem"
                        },
                        "title": "Guest Sites",
                        "type": "array"
                    }
                },
                "required": [
                    "guest_sites"
                ],
                "title": "GuestSiteResponse",
                "type": "object"
            },
            "GuestSiteResponseItem": {
                "properties": {
                    "org_id": {
                        "description": "The unique identifier of the organization to which the Guest site belongs.",
                        "format": "uuid",
                        "title": "Org Id",
                        "type": "string"
                    },
                    "site_id": {
                        "description": "The unique identifier of the Guest site.",
                        "format": "uuid",
                        "title": "Site Id",
                        "type": "string"
                    },
                    "site_name": {
                        "description": "The name of the Guest site.",
                        "title": "Site Name",
                        "type": "string"
                    }
                },
                "required": [
                    "org_id",
                    "site_id",
                    "site_name"
                ],
                "title": "GuestSiteResponseItem",
                "type": "object"
            },
            "HelixData": {
                "additionalProperties": false,
                "properties": {
                    "cameras_used": {
                        "description": "A list of cameras used.",
                        "items": {
                            "type": "string"
                        },
                        "title": "Cameras Used",
                        "type": "array"
                    },
                    "helix_stats": {
                        "additionalProperties": {
                            "type": "number"
                        },
                        "description": "A map of unix timestamps to aggregated helix data for that time bucket",
                        "title": "Helix Stats",
                        "type": "object"
                    }
                },
                "title": "HelixData",
                "type": "object"
            },
            "HistoryUrlRequestV1": {
                "properties": {
                    "camera_id": {
                        "description": "The unique identifier of the camera.",
                        "title": "Camera Id",
                        "type": "string"
                    },
                    "timestamp": {
                        "description": "The timestamp of the footage on a specified camera.\nFormatted as a Unix timestamp in seconds.\nIf no timestamp is specified, a live link will be returned",
                        "title": "Timestamp",
                        "type": "integer"
                    }
                },
                "required": [
                    "camera_id"
                ],
                "title": "HistoryUrlRequestV1",
                "type": "object"
            },
            "HistoryUrlResponse": {
                "additionalProperties": false,
                "example": {
                    "url": "https://command.verkada.com/cameras/2ba315d9-b084-4cc0-b609-b2a1a755ac35/history/86400/1589007600/?duration=86400&initialVideoTime=1589007600000"
                },
                "properties": {
                    "url": {
                        "description": "The link to the video footage.",
                        "title": "Url",
                        "type": "string"
                    }
                },
                "title": "HistoryUrlResponse",
                "type": "object"
            },
            "HostResponseItem": {
                "properties": {
                    "delivery_location": {
                        "description": "(Mailroom) The host's default package delivery location.",
                        "title": "Delivery Location",
                        "type": "string"
                    },
                    "first_name": {
                        "description": "The preferred first name of the host. If none is specified by the host, the same as original_first_name.",
                        "title": "First Name",
                        "type": "string"
                    },
                    "full_name": {
                        "description": "The full name of the host.",
                        "title": "Full Name",
                        "type": "string"
                    },
                    "has_delegate": {
                        "description": "Whether the host has a delegate assigned.",
                        "title": "Has Delegate",
                        "type": "boolean"
                    },
                    "has_email": {
                        "description": "Whether the host has an email address present.",
                        "title": "Has Email",
                        "type": "boolean"
                    },
                    "has_phone_number": {
                        "description": "Whether the host has a phone number present.",
                        "title": "Has Phone Number",
                        "type": "boolean"
                    },
                    "host_id": {
                        "description": "The unique identifier of the host.",
                        "format": "uuid",
                        "title": "Host Id",
                        "type": "string"
                    },
                    "last_name": {
                        "description": "The last name of the host.",
                        "title": "Last Name",
                        "type": "string"
                    },
                    "original_first_name": {
                        "description": "The original first name of the host.",
                        "title": "Original First Name",
                        "type": "string"
                    },
                    "requires_host_approval": {
                        "description": "Whether the host requires host approval on all visits.",
                        "title": "Requires Host Approval",
                        "type": "boolean"
                    },
                    "student_id": {
                        "description": "For student-related visits, the student ID of the visit's student.",
                        "title": "Student Id",
                        "type": "string"
                    },
                    "student_number": {
                        "description": "For student-related visits, the student number of the visit's student.",
                        "title": "Student Number",
                        "type": "string"
                    }
                },
                "required": [
                    "host_id",
                    "first_name",
                    "last_name",
                    "full_name",
                    "original_first_name",
                    "requires_host_approval",
                    "has_delegate",
                    "delivery_location",
                    "has_phone_number",
                    "has_email"
                ],
                "title": "HostResponseItem",
                "type": "object"
            },
            "IntervalEnum": {
                "description": "An enumeration.",
                "enum": [
                    "PT15M",
                    "PT1H",
                    "PT1D"
                ],
                "title": "IntervalEnum",
                "type": "string"
            },
            "LPRImageItem": {
                "additionalProperties": false,
                "properties": {
                    "image_url": {
                        "description": "The image of the detected license plate.",
                        "title": "Image Url",
                        "type": "string"
                    },
                    "license_plate": {
                        "description": "Detected license plate number.",
                        "title": "License Plate",
                        "type": "string"
                    },
                    "timestamp": {
                        "description": "The timestamp when the license plate was detected.\nFormatted as a Unix timestamp in seconds.",
                        "title": "Timestamp",
                        "type": "integer"
                    },
                    "vehicle_image_url": {
                        "description": "The image of the detected vehicle, if it exists.",
                        "title": "Vehicle Image Url",
                        "type": "string"
                    }
                },
                "title": "LPRImageItem",
                "type": "object"
            },
            "LPRImagesRequest": {
                "properties": {
                    "camera_id": {
                        "description": "The unique identifier of the camera.",
                        "title": "Camera Id",
                        "type": "string"
                    },
                    "end_time": {
                        "description": "The end of the time range.\nFormatted as a Unix timestamp in seconds.\nDefaults to the current time.",
                        "title": "End Time",
                        "type": "integer"
                    },
                    "license_plate": {
                        "description": "License plate number to filter by.",
                        "title": "License Plate",
                        "type": "string"
                    },
                    "page_size": {
                        "default": 100,
                        "description": "The number of items returned in a single response.\nDefault is 100. Max is 200.",
                        "exclusiveMinimum": true,
                        "maximum": 200,
                        "minimum": 0,
                        "title": "Page Size",
                        "type": "integer"
                    },
                    "page_token": {
                        "description": "The pagination token used to fetch the next page of results.",
                        "title": "Page Token",
                        "type": "integer"
                    },
                    "start_time": {
                        "description": "The start of the time range.\nFormatted as a Unix timestamp in seconds.\nDefaults to a day from the current time.",
                        "title": "Start Time",
                        "type": "integer"
                    }
                },
                "required": [
                    "camera_id"
                ],
                "title": "LPRImagesRequest",
                "type": "object"
            },
            "LPRImagesResponse": {
                "additionalProperties": false,
                "properties": {
                    "camera_id": {
                        "description": "The unique identifier of the camera.",
                        "title": "Camera Id",
                        "type": "string"
                    },
                    "detections": {
                        "description": "The detected license plates",
                        "items": {
                            "$ref": "#/components/schemas/LPRImageItem"
                        },
                        "title": "Detections",
                        "type": "array"
                    },
                    "next_page_token": {
                        "description": "The pagination token used to fetch the next page of results.",
                        "title": "Next Page Token",
                        "type": "integer"
                    }
                },
                "title": "LPRImagesResponse",
                "type": "object"
            },
            "LPRTimestampRequestV1": {
                "properties": {
                    "camera_id": {
                        "description": "The unique identifier of the camera.",
                        "title": "Camera Id",
                        "type": "string"
                    },
                    "end_time": {
                        "description": "The end of the time range.\nFormatted as a Unix timestamp in seconds.\nDefaults to the current time.",
                        "title": "End Time",
                        "type": "integer"
                    },
                    "license_plate": {
                        "description": "The requested license plate number.",
                        "title": "License Plate",
                        "type": "string"
                    },
                    "page_size": {
                        "default": 100,
                        "description": "The number of items returned in a single response.\nDefault is 100. Max is 200.",
                        "exclusiveMinimum": true,
                        "maximum": 200,
                        "minimum": 0,
                        "title": "Page Size",
                        "type": "integer"
                    },
                    "page_token": {
                        "description": "The pagination token used to fetch the next page of results.",
                        "title": "Page Token",
                        "type": "integer"
                    },
                    "start_time": {
                        "description": "The start of the time range.\nFormatted as a Unix timestamp in seconds.\nDefaults to a day from the current time.",
                        "title": "Start Time",
                        "type": "integer"
                    }
                },
                "required": [
                    "camera_id",
                    "license_plate"
                ],
                "title": "LPRTimestampRequestV1",
                "type": "object"
            },
            "LPRTimestampResponseV1": {
                "additionalProperties": false,
                "properties": {
                    "camera_id": {
                        "description": "The unique identifier of the camera.",
                        "title": "Camera Id",
                        "type": "string"
                    },
                    "detections": {
                        "description": "The timestamps when the license plate was detected.\nFormatted as a Unix timestamp in seconds.",
                        "items": {
                            "type": "integer"
                        },
                        "title": "Detections",
                        "type": "array"
                    },
                    "license_plate": {
                        "description": "The requested license plate number.",
                        "title": "License Plate",
                        "type": "string"
                    },
                    "next_page_token": {
                        "description": "The pagination token used to fetch the next page of results.",
                        "title": "Next Page Token",
                        "type": "integer"
                    }
                },
                "title": "LPRTimestampResponseV1",
                "type": "object"
            },
            "LatestThumbnailRequest": {
                "properties": {
                    "type": {
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/ResolutionEnum"
                            }
                        ],
                        "default": "low-res",
                        "description": "Return fullres if this parameter is set to 'hi-res', return a normal resolution thumbnail if it is set to 'low-res'"
                    }
                },
                "title": "LatestThumbnailRequest",
                "type": "object"
            },
            "LatestThumbnailRequestV1": {
                "properties": {
                    "camera_id": {
                        "description": "The unique identifier of camera.",
                        "title": "Camera Id",
                        "type": "string"
                    },
                    "resolution": {
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/ResolutionEnum"
                            }
                        ],
                        "default": "low-res",
                        "description": "Returns a low-resolution thumbnail if this parameter is set to 'low-res'.\nReturns a high-resolution thumbnail if this parameter is set to 'hi-res'.\nDefaults to a low-resolution thumbnail."
                    }
                },
                "required": [
                    "camera_id"
                ],
                "title": "LatestThumbnailRequestV1",
                "type": "object"
            },
            "LicensePlateObjectResponseV1": {
                "additionalProperties": false,
                "properties": {
                    "active": {
                        "default": false,
                        "description": "Bool value specifying if the license plate credential is currently active. Default value is False.",
                        "title": "Active",
                        "type": "boolean"
                    },
                    "license_plate_number": {
                        "description": "The unique license plate number identifying a license plate credential for a user.",
                        "title": "License Plate Number",
                        "type": "string"
                    },
                    "name": {
                        "description": "The name to be given to the license plate credential.",
                        "title": "Name",
                        "type": "string"
                    }
                },
                "required": [
                    "name"
                ],
                "title": "LicensePlateObjectResponseV1",
                "type": "object"
            },
            "LicensePlateOfInterest": {
                "additionalProperties": false,
                "properties": {
                    "creation_time": {
                        "description": "The creation time of the License Plate of Interest.",
                        "title": "Creation Time",
                        "type": "integer"
                    },
                    "description": {
                        "description": "The description of the License Plate of Interest.",
                        "title": "Description",
                        "type": "string"
                    },
                    "license_plate": {
                        "description": "The license plate number of the License Plate of Interest.",
                        "title": "License Plate",
                        "type": "string"
                    }
                },
                "title": "LicensePlateOfInterest",
                "type": "object"
            },
            "LicensePlateOfInterestBodyRequest": {
                "properties": {
                    "description": {
                        "description": "The description for the License Plate of Interest.",
                        "title": "Description",
                        "type": "string"
                    },
                    "license_plate": {
                        "description": "The license plate number of the License Plate of Interest.",
                        "title": "License Plate",
                        "type": "string"
                    }
                },
                "required": [
                    "license_plate",
                    "description"
                ],
                "title": "LicensePlateOfInterestBodyRequest",
                "type": "object"
            },
            "LicensePlateOfInterestBulkOperationResponse": {
                "additionalProperties": false,
                "properties": {
                    "addedMs": {
                        "description": "The time at which the csv file was uploaded.",
                        "title": "Addedms",
                        "type": "integer"
                    }
                },
                "required": [
                    "addedMs"
                ],
                "title": "LicensePlateOfInterestBulkOperationResponse",
                "type": "object"
            },
            "LicensePlateOfInterestList": {
                "additionalProperties": false,
                "example": {
                    "license_plate_of_interest": [
                        {
                            "creationTime": 1597821953,
                            "description": "John's car",
                            "licensePlate": "ABC123"
                        },
                        {
                            "creationTime": 1597822953,
                            "description": "Kevin's car",
                            "licensePlate": "ABC456"
                        }
                    ]
                },
                "properties": {
                    "license_plate_of_interest": {
                        "description": "A list of License Plates of Interest.",
                        "items": {
                            "$ref": "#/components/schemas/LicensePlateOfInterest"
                        },
                        "title": "License Plate Of Interest",
                        "type": "array"
                    }
                },
                "title": "LicensePlateOfInterestList",
                "type": "object"
            },
            "LicensePlateOfInterestModifyQueryRequest": {
                "properties": {
                    "license_plate": {
                        "description": "The license plate number of the License Plate of Interest.",
                        "title": "License Plate",
                        "type": "string"
                    }
                },
                "required": [
                    "license_plate"
                ],
                "title": "LicensePlateOfInterestModifyQueryRequest",
                "type": "object"
            },
            "Lockdown": {
                "additionalProperties": false,
                "properties": {
                    "enabled": {
                        "description": "Whether lockdown is enabled",
                        "title": "Enabled",
                        "type": "boolean"
                    },
                    "lockdownId": {
                        "description": "Identifier of the lockdown",
                        "title": "Lockdownid",
                        "type": "string"
                    },
                    "message": {
                        "description": "Message associated with the lockdown",
                        "title": "Message",
                        "type": "string"
                    },
                    "name": {
                        "description": "Name of the lockdown",
                        "title": "Name",
                        "type": "string"
                    }
                },
                "title": "Lockdown",
                "type": "object"
            },
            "LockdownInfo": {
                "additionalProperties": false,
                "properties": {
                    "action": {
                        "description": "Action taken during lockdown",
                        "title": "Action",
                        "type": "string"
                    },
                    "lockdown": {
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/Lockdown"
                            }
                        ],
                        "description": "Lockdown info",
                        "title": "Lockdown"
                    }
                },
                "title": "LockdownInfo",
                "type": "object"
            },
            "MFACodeObjectResponseV1": {
                "additionalProperties": false,
                "properties": {
                    "code": {
                        "description": "The unique mfa code identifying a mfa code credential for a user.",
                        "title": "Code",
                        "type": "string"
                    }
                },
                "required": [
                    "code"
                ],
                "title": "MFACodeObjectResponseV1",
                "type": "object"
            },
            "MaxObjectCountsRequestV1": {
                "properties": {
                    "camera_id": {
                        "description": "The unique identifier of the camera.",
                        "title": "Camera Id",
                        "type": "string"
                    },
                    "end_time": {
                        "description": "The end of the time range for requested counts.\nFormatted as a Unix timestamp in seconds.\nIt can only be used if <code>start_time</code> is also provided",
                        "title": "End Time",
                        "type": "integer"
                    },
                    "search_zones": {
                        "description": "Zones to search\nFormatted as coordinates ranging from <code>[0,0]</code> to <code>[9,9]</code>\ne.g., <code>[[3,3],[3,4],[4,3],[4,4]]</code>",
                        "items": {
                            "items": {
                                "type": "integer"
                            },
                            "type": "array"
                        },
                        "title": "Search Zones",
                        "type": "array"
                    },
                    "start_time": {
                        "description": "The start of the time range for requested counts.\nFormatted as a Unix timestamp in seconds.\nDefault value is the current time.\nIf only providing a start time, the same value will be used for <code>end_time</code>",
                        "title": "Start Time",
                        "type": "integer"
                    }
                },
                "required": [
                    "camera_id"
                ],
                "title": "MaxObjectCountsRequestV1",
                "type": "object"
            },
            "MaxObjectCountsResponseV1": {
                "additionalProperties": false,
                "properties": {
                    "people_count": {
                        "default": 0,
                        "description": "The number of people detected.",
                        "title": "People Count",
                        "type": "integer"
                    },
                    "vehicle_count": {
                        "default": 0,
                        "description": "The number of vehicle detected.",
                        "title": "Vehicle Count",
                        "type": "integer"
                    }
                },
                "title": "MaxObjectCountsResponseV1",
                "type": "object"
            },
            "ModifyAccessScheduleEventRequestV1": {
                "description": "Request schema for modifying an Access Schedule Event.",
                "properties": {
                    "door_status": {
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/DoorStatus"
                            }
                        ],
                        "default": "access_granted",
                        "description": "Status of the door during the event. Always set to 'access_granted' and does not need to be specified."
                    },
                    "end_time": {
                        "description": "End time of the event in HH:MM format (00:00 to 23:59) with required leading zeros",
                        "title": "End Time",
                        "type": "string"
                    },
                    "start_time": {
                        "description": "Start time of the event in HH:MM format (00:00 to 23:59) with required leading zeros",
                        "title": "Start Time",
                        "type": "string"
                    },
                    "weekday": {
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/WeekDay"
                            }
                        ],
                        "description": "Day of the week for the event"
                    }
                },
                "required": [
                    "weekday",
                    "start_time",
                    "end_time"
                ],
                "title": "ModifyAccessScheduleEventRequestV1",
                "type": "object"
            },
            "NotFound": {
                "description": "User not found, either user ID or external ID is invalid.",
                "properties": {
                    "data": {
                        "description": "Relevant data",
                        "title": "Data",
                        "type": "string"
                    },
                    "id": {
                        "description": "ID of specific error",
                        "title": "Id",
                        "type": "string"
                    },
                    "message": {
                        "description": "Error message, contains specific human readable context for the error",
                        "title": "Message",
                        "type": "string"
                    }
                },
                "required": [
                    "id",
                    "message",
                    "data"
                ],
                "title": "NotFound",
                "type": "object"
            },
            "Notification": {
                "additionalProperties": false,
                "properties": {
                    "camera_id": {
                        "description": "The camera ID where notification was triggered from.",
                        "title": "Camera Id",
                        "type": "string"
                    },
                    "created": {
                        "description": "The time when the notification detected.\nFormatted in Unix epoch format.",
                        "title": "Created",
                        "type": "integer"
                    },
                    "crowd_threshold": {
                        "description": "The crowd size threshold of people/vehicles.\nOnly set for <code>crowd<code> notifications.",
                        "title": "Crowd Threshold",
                        "type": "integer"
                    },
                    "image_url": {
                        "description": "The link to the thumbnail captured for this notification.",
                        "title": "Image Url",
                        "type": "string"
                    },
                    "notification_type": {
                        "description": "The type of the notification.\nValues are from <code>person_of_interest</code>, <code>tamper</code>, <code>crowd</code>, <code>motion</code>, <code>camera_offline</code>, <code>camera_online</code>.",
                        "title": "Notification Type",
                        "type": "string"
                    },
                    "objects": {
                        "description": "The object detected on the notification.\nContains one or both of <code>person</code> or <code>vehicle</code>.\nThis is only set for <code>crowd</code> and <code>motion</code> notifications.",
                        "items": {
                            "type": "string"
                        },
                        "title": "Objects",
                        "type": "array"
                    },
                    "person_label": {
                        "description": "The label/name of Person of Interest.\nOnly set for <code>person_of_interest</code> notifications.",
                        "title": "Person Label",
                        "type": "string"
                    },
                    "video_url": {
                        "description": "The link to the video footage captured for this notification.",
                        "title": "Video Url",
                        "type": "string"
                    }
                },
                "title": "Notification",
                "type": "object"
            },
            "NotificationsQuery": {
                "properties": {
                    "end_time": {
                        "description": "End of time range for which notifications are requested",
                        "title": "End Time",
                        "type": "integer"
                    },
                    "include_image_url": {
                        "description": "Flag to include/exclude image url for notification",
                        "title": "Include Image Url",
                        "type": "boolean"
                    },
                    "notification_type": {
                        "description": "One or multiple comma separated values from <code>person_of_interest</code>, <code>tamper</code>, <code>crowd</code>, <code>motion</code>, <code>camera_offline</code>, <code>camera_online</code>",
                        "title": "Notification Type",
                        "type": "string"
                    },
                    "page_cursor": {
                        "description": "Page cursor to resume on ongoing paged read operation",
                        "title": "Page Cursor",
                        "type": "string"
                    },
                    "per_page": {
                        "description": "Size of the results to be returned",
                        "title": "Per Page",
                        "type": "integer"
                    },
                    "start_time": {
                        "description": "Start of time range for which notifications are requested",
                        "title": "Start Time",
                        "type": "integer"
                    }
                },
                "title": "NotificationsQuery",
                "type": "object"
            },
            "NotificationsQueryV1": {
                "properties": {
                    "end_time": {
                        "description": "The end of the time range for requested notifications.\nFormatted as a Unix timestamp in seconds.\nDefault value is the current time.",
                        "title": "End Time",
                        "type": "integer"
                    },
                    "include_image_url": {
                        "default": false,
                        "description": "The flag to include/exclude image url for notification.\nDefaults to false.",
                        "title": "Include Image Url",
                        "type": "boolean"
                    },
                    "notification_type": {
                        "description": "One or multiple comma separated values from <code>person_of_interest</code>, <code>license_plate_of_interest</code>, <code>tamper</code>, <code>crowd</code>, <code>motion</code>, <code>camera_offline</code>, <code>camera_online</code>, <code>line_crossing</code>, <code>loitering</code>.",
                        "title": "Notification Type",
                        "type": "string"
                    },
                    "page_size": {
                        "default": 100,
                        "description": "The number of items returned in a single response.\nDefault is 100. Max is 200.",
                        "exclusiveMinimum": true,
                        "maximum": 200,
                        "minimum": 0,
                        "title": "Page Size",
                        "type": "integer"
                    },
                    "page_token": {
                        "description": "The pagination token used to fetch the next page of results.",
                        "title": "Page Token",
                        "type": "string"
                    },
                    "start_time": {
                        "description": "The start of the time range for requested notifications.\nFormatted as a Unix timestamp in seconds.\nDefault value is an hour ago from the current time.",
                        "title": "Start Time",
                        "type": "integer"
                    }
                },
                "title": "NotificationsQueryV1",
                "type": "object"
            },
            "NotificationsResponse": {
                "additionalProperties": false,
                "properties": {
                    "notifications": {
                        "description": "Notifications",
                        "items": {
                            "$ref": "#/components/schemas/Notification"
                        },
                        "title": "Notifications",
                        "type": "array"
                    },
                    "page_cursor": {
                        "description": "The pagination cursor used to fetch the next page of results.",
                        "title": "Page Cursor",
                        "type": "string"
                    }
                },
                "required": [
                    "notifications"
                ],
                "title": "NotificationsResponse",
                "type": "object"
            },
            "NotificationsResponseV1": {
                "additionalProperties": false,
                "properties": {
                    "next_page_token": {
                        "description": "The pagination token used to fetch the next page of results.",
                        "title": "Next Page Token",
                        "type": "string"
                    },
                    "notifications": {
                        "description": "Notifications",
                        "items": {
                            "$ref": "#/components/schemas/Notification"
                        },
                        "title": "Notifications",
                        "type": "array"
                    }
                },
                "title": "NotificationsResponseV1",
                "type": "object"
            },
            "OEQResponseItem": {
                "properties": {
                    "chosen_answers": {
                        "description": "Chosen multiple-choice answers.",
                        "items": {
                            "type": "string"
                        },
                        "title": "Chosen Answers",
                        "type": "array"
                    },
                    "question": {
                        "description": "The question answered by the visitor.",
                        "title": "Question",
                        "type": "string"
                    },
                    "response": {
                        "description": "The visitor's answer to the question. Also contains custom responses to multiple-choice questions.",
                        "title": "Response",
                        "type": "string"
                    }
                },
                "required": [
                    "question",
                    "response"
                ],
                "title": "OEQResponseItem",
                "type": "object"
            },
            "ObjectCountItem": {
                "additionalProperties": false,
                "properties": {
                    "detected_time": {
                        "description": "The time when the target was created.\nFormatted as a Unix timestamp in seconds.",
                        "title": "Detected Time",
                        "type": "integer"
                    },
                    "people_count": {
                        "description": "The number of people detected.",
                        "title": "People Count",
                        "type": "integer"
                    },
                    "vehicle_count": {
                        "description": "The number of vehicle detected.",
                        "title": "Vehicle Count",
                        "type": "integer"
                    }
                },
                "title": "ObjectCountItem",
                "type": "object"
            },
            "ObjectCountRequest": {
                "properties": {
                    "end_time": {
                        "description": "End time of time range for which counts are requested. Measured in seconds since the Unix epoch. Default value is current Unix epoch time",
                        "title": "End Time",
                        "type": "integer"
                    },
                    "page_cursor": {
                        "description": "The cursor used for pagination in order to fetch the next page of results",
                        "title": "Page Cursor",
                        "type": "string"
                    },
                    "per_page": {
                        "default": 100,
                        "description": "The number of items returned in a single response.Default is 100.Max is 200.",
                        "title": "Per Page",
                        "type": "integer"
                    },
                    "start_time": {
                        "description": "Start time of time range for which counts are requested. Measured in seconds since the Unix epoch. Default value is Unix epoch time of an hour ago from <code>end_time</code>",
                        "title": "Start Time",
                        "type": "integer"
                    }
                },
                "title": "ObjectCountRequest",
                "type": "object"
            },
            "ObjectCountRequestV1": {
                "properties": {
                    "camera_id": {
                        "description": "The unique identifier of the camera.",
                        "title": "Camera Id",
                        "type": "string"
                    },
                    "end_time": {
                        "description": "The end of the time range for requested counts.\nFormatted as a Unix timestamp in seconds.\nDefault value is the current time.",
                        "title": "End Time",
                        "type": "integer"
                    },
                    "page_size": {
                        "default": 100,
                        "description": "The number of items returned in a single response.\nDefault is 100. Max is 200.",
                        "exclusiveMinimum": true,
                        "maximum": 200,
                        "minimum": 0,
                        "title": "Page Size",
                        "type": "integer"
                    },
                    "page_token": {
                        "description": "The pagination token used to fetch the next page of results.",
                        "title": "Page Token",
                        "type": "string"
                    },
                    "start_time": {
                        "description": "The start of the time range for requested counts.\nFormatted as a Unix timestamp in seconds.\nDefault value is an hour ago from the current time.",
                        "title": "Start Time",
                        "type": "integer"
                    }
                },
                "required": [
                    "camera_id"
                ],
                "title": "ObjectCountRequestV1",
                "type": "object"
            },
            "ObjectCountResponse": {
                "additionalProperties": false,
                "properties": {
                    "object_counts": {
                        "description": "Object counts",
                        "items": {
                            "$ref": "#/components/schemas/ObjectCountItem"
                        },
                        "title": "Object Counts",
                        "type": "array"
                    },
                    "page_cursor": {
                        "description": "The pagination cursor used to fetch the next page of results.",
                        "title": "Page Cursor",
                        "type": "string"
                    }
                },
                "title": "ObjectCountResponse",
                "type": "object"
            },
            "ObjectCountResponseV1": {
                "additionalProperties": false,
                "properties": {
                    "next_page_token": {
                        "description": "The pagination token used to fetch the next page of results.",
                        "title": "Next Page Token",
                        "type": "string"
                    },
                    "object_counts": {
                        "description": "Object counts",
                        "items": {
                            "$ref": "#/components/schemas/ObjectCountItem"
                        },
                        "title": "Object Counts",
                        "type": "array"
                    }
                },
                "title": "ObjectCountResponseV1",
                "type": "object"
            },
            "OccupancyData": {
                "additionalProperties": false,
                "properties": {
                    "camera_presets_used": {
                        "description": "A list of camera and preset pairs that were used.",
                        "items": {
                            "type": "object"
                        },
                        "title": "Camera Presets Used",
                        "type": "array"
                    },
                    "in_counts": {
                        "additionalProperties": {
                            "type": "number"
                        },
                        "description": "A map of unix timestamps to in counts for that time bucket",
                        "title": "In Counts",
                        "type": "object"
                    },
                    "net_occupancy": {
                        "additionalProperties": {
                            "type": "number"
                        },
                        "description": "A map of unix timestamps to net occupancy for that time bucket",
                        "title": "Net Occupancy",
                        "type": "object"
                    },
                    "out_counts": {
                        "additionalProperties": {
                            "type": "number"
                        },
                        "description": "A map of unix timestamps to out counts for that time bucket",
                        "title": "Out Counts",
                        "type": "object"
                    }
                },
                "title": "OccupancyData",
                "type": "object"
            },
            "OccupancyTrendsCamera": {
                "additionalProperties": false,
                "properties": {
                    "camera_id": {
                        "description": "The unique identifier of the camera.",
                        "title": "Camera Id",
                        "type": "string"
                    },
                    "preset_ids": {
                        "description": "The line preset IDs for the camera.",
                        "items": {
                            "type": "string"
                        },
                        "title": "Preset Ids",
                        "type": "array"
                    },
                    "presets": {
                        "description": "The line preset metadata for the camera.",
                        "items": {
                            "$ref": "#/components/schemas/OccupancyTrendsPreset"
                        },
                        "title": "Presets",
                        "type": "array"
                    }
                },
                "title": "OccupancyTrendsCamera",
                "type": "object"
            },
            "OccupancyTrendsCamerasResponseV1": {
                "additionalProperties": false,
                "properties": {
                    "cameras": {
                        "items": {
                            "$ref": "#/components/schemas/OccupancyTrendsCamera"
                        },
                        "title": "Cameras",
                        "type": "array"
                    }
                },
                "required": [
                    "cameras"
                ],
                "title": "OccupancyTrendsCamerasResponseV1",
                "type": "object"
            },
            "OccupancyTrendsMQTTConfigSetRequestV1": {
                "properties": {
                    "broker_cert": {
                        "description": "A CA signed cert for broker to be used for TLS connection.",
                        "title": "Broker Cert",
                        "type": "string"
                    },
                    "broker_host_port": {
                        "description": "The host and port for MQTT server. The host could be an IP address or hostname. Port 443 is recommended, and only 443, 123, 53 are supported.",
                        "title": "Broker Host Port",
                        "type": "string"
                    },
                    "camera_id": {
                        "description": "The unique identifier of the camera.",
                        "title": "Camera Id",
                        "type": "string"
                    },
                    "client_password": {
                        "description": "The optional password for the server.",
                        "title": "Client Password",
                        "type": "string"
                    },
                    "client_username": {
                        "description": "The optional username for the server.",
                        "title": "Client Username",
                        "type": "string"
                    }
                },
                "required": [
                    "camera_id",
                    "broker_host_port",
                    "broker_cert"
                ],
                "title": "OccupancyTrendsMQTTConfigSetRequestV1",
                "type": "object"
            },
            "OccupancyTrendsMQTTConfigSetResponseV1": {
                "additionalProperties": false,
                "properties": {
                    "broker_cert": {
                        "description": "The cert set in config.",
                        "title": "Broker Cert",
                        "type": "string"
                    },
                    "broker_host_port": {
                        "description": "The host and port set in config.",
                        "title": "Broker Host Port",
                        "type": "string"
                    },
                    "camera_id": {
                        "description": "The unique identifier of the camera.",
                        "title": "Camera Id",
                        "type": "string"
                    },
                    "client_password": {
                        "description": "The password set in config.",
                        "title": "Client Password",
                        "type": "string"
                    },
                    "client_username": {
                        "description": "The username set in config.",
                        "title": "Client Username",
                        "type": "string"
                    }
                },
                "title": "OccupancyTrendsMQTTConfigSetResponseV1",
                "type": "object"
            },
            "OccupancyTrendsPreset": {
                "additionalProperties": false,
                "properties": {
                    "object_class": {
                        "description": "The object class of the preset.",
                        "title": "Object Class",
                        "type": "string"
                    },
                    "preset_id": {
                        "description": "The unique identifier of the preset.",
                        "title": "Preset Id",
                        "type": "string"
                    }
                },
                "title": "OccupancyTrendsPreset",
                "type": "object"
            },
            "OccupancyTrendsRequestV1": {
                "properties": {
                    "camera_id": {
                        "description": "The unique identifier of the camera.",
                        "title": "Camera Id",
                        "type": "string"
                    },
                    "end_time": {
                        "description": "The end of the time range for occupancy trends.\nFormatted as a Unix timestamp in seconds.\nDefaults to the current time.",
                        "title": "End Time",
                        "type": "integer"
                    },
                    "interval": {
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/IntervalEnum"
                            }
                        ],
                        "default": "1_hour",
                        "description": "The time interval for each array in <code>trend_in</code> and <code>trend_out</code>.\nOptions available are: <code>15_minutes</code>, <code>1_hour</code>, <code>1_day</code>.\nDefaults to <code>1_hour</code>."
                    },
                    "preset_id": {
                        "description": "The unique identifier of the camera preset.",
                        "title": "Preset Id",
                        "type": "string"
                    },
                    "start_time": {
                        "description": "The start of the time range for occupancy trends.\nFormatted as a Unix timestamp in seconds.\nDefaults to an hour from the current time.",
                        "title": "Start Time",
                        "type": "integer"
                    },
                    "type": {
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/OccupancyTrendsTypeEnum"
                            }
                        ],
                        "default": "person",
                        "description": "The type of the counted object.\nCurrently available type is <code>person</code> <code>vehicle</code>.\nDefault is <code>person</code>."
                    }
                },
                "required": [
                    "camera_id"
                ],
                "title": "OccupancyTrendsRequestV1",
                "type": "object"
            },
            "OccupancyTrendsResponseV1": {
                "additionalProperties": false,
                "properties": {
                    "camera_address": {
                        "description": "The address of the site for the camera.",
                        "title": "Camera Address",
                        "type": "string"
                    },
                    "camera_id": {
                        "description": "The unique identifier of the camera.",
                        "title": "Camera Id",
                        "type": "string"
                    },
                    "camera_name": {
                        "description": "The name of the camera.",
                        "title": "Camera Name",
                        "type": "string"
                    },
                    "camera_site": {
                        "description": "The name of the site for the camera.",
                        "title": "Camera Site",
                        "type": "string"
                    },
                    "end_time": {
                        "description": "The end of the time range for occupancy trends.",
                        "title": "End Time",
                        "type": "integer"
                    },
                    "org_id": {
                        "description": "The unique identifier of the organization.",
                        "title": "Org Id",
                        "type": "string"
                    },
                    "org_name": {
                        "description": "The name of the organization.",
                        "title": "Org Name",
                        "type": "string"
                    },
                    "preset_id": {
                        "description": "The unique identifier of the camera preset.",
                        "title": "Preset Id",
                        "type": "string"
                    },
                    "start_time": {
                        "description": "The start of the time range of occupancy trends.",
                        "title": "Start Time",
                        "type": "integer"
                    },
                    "trend_in": {
                        "description": "An array with range timestamps, and count for “in” direction.",
                        "items": {
                            "items": {
                                "type": "integer"
                            },
                            "type": "array"
                        },
                        "title": "Trend In",
                        "type": "array"
                    },
                    "trend_out": {
                        "description": "An array with range timestamps, and count for “out” direction.",
                        "items": {
                            "items": {
                                "type": "integer"
                            },
                            "type": "array"
                        },
                        "title": "Trend Out",
                        "type": "array"
                    },
                    "type": {
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/OccupancyTrendsTypeEnum"
                            }
                        ],
                        "description": "The type of the counted object."
                    }
                },
                "title": "OccupancyTrendsResponseV1",
                "type": "object"
            },
            "OccupancyTrendsTypeEnum": {
                "description": "An enumeration.",
                "enum": [
                    "person",
                    "vehicle"
                ],
                "title": "OccupancyTrendsTypeEnum",
                "type": "string"
            },
            "PatchLicensePlateOfInterestBodyRequest": {
                "properties": {
                    "description": {
                        "description": "The description for this License Plate of Interest.",
                        "title": "Description",
                        "type": "string"
                    }
                },
                "required": [
                    "description"
                ],
                "title": "PatchLicensePlateOfInterestBodyRequest",
                "type": "object"
            },
            "PatchVideoTaggingEventRequestV1": {
                "properties": {
                    "attributes": {
                        "description": "list of event attributes.",
                        "title": "Attributes",
                        "type": "object"
                    },
                    "flagged": {
                        "description": "Whether or not an event is flagged.",
                        "title": "Flagged",
                        "type": "boolean"
                    }
                },
                "title": "PatchVideoTaggingEventRequestV1",
                "type": "object"
            },
            "PatchVideoTaggingEventTypeRequestV1": {
                "properties": {
                    "event_schema": {
                        "description": "The schema of the event type.",
                        "title": "Event Schema",
                        "type": "object"
                    },
                    "name": {
                        "description": "The name of the event type.",
                        "title": "Name",
                        "type": "string"
                    }
                },
                "title": "PatchVideoTaggingEventTypeRequestV1",
                "type": "object"
            },
            "PathPersonOfInterestRequest": {
                "properties": {
                    "label": {
                        "description": "The name/label of the Person of Interest.",
                        "title": "Label",
                        "type": "string"
                    }
                },
                "required": [
                    "label"
                ],
                "title": "PathPersonOfInterestRequest",
                "type": "object"
            },
            "PersonOfInterest": {
                "additionalProperties": false,
                "example": {
                    "created": 1597821953,
                    "label": "Steve Ponting",
                    "last_seen": 1597946234,
                    "person_id": "0a5b38d4-0308-4274-99b3-2b2f40d40deb"
                },
                "properties": {
                    "created": {
                        "description": "The timestamp when the Person of Interest was created.\nFormatted as a Unix timestamp in seconds.",
                        "title": "Created",
                        "type": "integer"
                    },
                    "label": {
                        "description": "The name/label of the Person of Interest.",
                        "title": "Label",
                        "type": "string"
                    },
                    "last_seen": {
                        "description": "The timestamp when the Person of Interest was last seen.\nFormatted as a Unix timestamp in seconds.",
                        "title": "Last Seen",
                        "type": "integer"
                    },
                    "person_id": {
                        "description": "The unique identifier of the Person of Interest.",
                        "format": "uuid",
                        "title": "Person Id",
                        "type": "string"
                    }
                },
                "title": "PersonOfInterest",
                "type": "object"
            },
            "PersonOfInterestGetQuery": {
                "properties": {
                    "page_size": {
                        "default": 100,
                        "description": "The number of items returned in a single response.\nDefault is 100. Max is 200.",
                        "exclusiveMinimum": true,
                        "maximum": 200,
                        "minimum": 0,
                        "title": "Page Size",
                        "type": "integer"
                    },
                    "page_token": {
                        "description": "The pagination token used to fetch the next page of results.",
                        "title": "Page Token",
                        "type": "string"
                    }
                },
                "title": "PersonOfInterestGetQuery",
                "type": "object"
            },
            "PersonOfInterestList": {
                "additionalProperties": false,
                "properties": {
                    "next_token": {
                        "description": "The pagination token used to fetch the next page of results.",
                        "title": "Next Token",
                        "type": "string"
                    },
                    "persons_of_interest": {
                        "description": "A list of Persons of Interest.",
                        "items": {
                            "$ref": "#/components/schemas/PersonOfInterest"
                        },
                        "title": "Persons Of Interest",
                        "type": "array"
                    }
                },
                "title": "PersonOfInterestList",
                "type": "object"
            },
            "PersonOfInterestModifyQueryRequest": {
                "properties": {
                    "person_id": {
                        "description": "The unique identifier of the Person of Interest.",
                        "title": "Person Id",
                        "type": "string"
                    }
                },
                "required": [
                    "person_id"
                ],
                "title": "PersonOfInterestModifyQueryRequest",
                "type": "object"
            },
            "PersonOfInterestPostBodyRequest": {
                "properties": {
                    "base64_image": {
                        "description": "The base64 encoded string of the face image of the Person of Interest.",
                        "title": "Base64 Image",
                        "type": "string"
                    },
                    "label": {
                        "description": "The name/label of the Person of Interest.",
                        "title": "Label",
                        "type": "string"
                    }
                },
                "required": [
                    "base64_image",
                    "label"
                ],
                "title": "PersonOfInterestPostBodyRequest",
                "type": "object"
            },
            "PostAPIUnlockResponseV1": {
                "additionalProperties": false,
                "description": "Returned on a successful unlock.",
                "properties": {
                    "door_id": {
                        "description": "The unique identifier of the door that was unlocked.",
                        "title": "Door Id",
                        "type": "string"
                    },
                    "unlock_duration": {
                        "description": "The duration of the unlock.",
                        "title": "Unlock Duration",
                        "type": "integer"
                    }
                },
                "title": "PostAPIUnlockResponseV1",
                "type": "object"
            },
            "PostAccessGroupRequestBodyV1": {
                "properties": {
                    "name": {
                        "description": "The unique name of the Access Group to be created.",
                        "title": "Name",
                        "type": "string"
                    }
                },
                "required": [
                    "name"
                ],
                "title": "PostAccessGroupRequestBodyV1",
                "type": "object"
            },
            "PostAdminAPIUnlockBodyV1": {
                "description": "Admin unlock body. No user information required in the body.",
                "properties": {
                    "door_id": {
                        "description": "The UUID of the door to unlock.",
                        "format": "uuid",
                        "title": "Door Id",
                        "type": "string"
                    }
                },
                "title": "PostAdminAPIUnlockBodyV1",
                "type": "object"
            },
            "PostCardBodyV1": {
                "properties": {
                    "active": {
                        "default": false,
                        "description": "Bool value specifying if the credential is currently active. Can be True or False. Default value is False.",
                        "title": "Active",
                        "type": "boolean"
                    },
                    "card_number": {
                        "description": "The card number used to grant or deny access to a door.",
                        "title": "Card Number",
                        "type": "string"
                    },
                    "card_number_base36": {
                        "description": "The card number in base36 used to grant or deny access to a door.",
                        "title": "Card Number Base36",
                        "type": "string"
                    },
                    "card_number_hex": {
                        "description": "The card number in hexadecimal used to grant or deny access to a door.",
                        "title": "Card Number Hex",
                        "type": "string"
                    },
                    "facility_code": {
                        "description": "The facility code used to grant or deny access to a door.",
                        "title": "Facility Code",
                        "type": "string"
                    },
                    "type": {
                        "description": "One of the following supported card types, <code>Standard 26-bit Wiegand</code>,<code>HID 37-bit</code>, <code>HID 37-bit No Facility Code</code>, <code>HID 34-bit</code>,<code>Casi Rusco 40-Bit</code>, <code>HID Corporate 1000-35</code>, <code>HID Corporate 1000-48</code>,<code>HID iClass</code>, <code>DESFire CSN</code>, <code>Verkada DESFire</code>, <code>Third Party DESFire 40X</code>,<code>Apple Wallet Pass</code>, <code>MiFare 4-Byte (32 bit) CSN</code>, <code>MDC Custom 64-bit</code>,<code>HID 36-bit Keyscan</code>, <code>HID 33-bit DSX</code>, <code>HID 33-bit RS2</code>,<code>HID 36-bit Simplex</code>, <code>Cansec 37-bit</code>, <code>Credit Card BIN Number</code>,<code>Kantech XSF</code>, <code>Schlage 34-bit</code>, <code>Schlage 37-bit</code>, <code>RBH 50-bit</code>,<code>Guardall G-Prox II 36-bit</code>, <code>AMAG 32-bit</code>, <code>Securitas 37-bit</code>,<code>Kastle 32-bit</code>, <code>PointGuard MDI 37-bit</code>, <code>Blackboard 64-bit</code>,<code>IDm 64-bit</code>, <code>Continental 36-bit</code>, <code>AWID 34-bit</code>, <code>License Plate</code>,<code>HID Infinity 37-bit</code>, <code>HID Ceridian 26-bit</code>, <code>iClass 35-bit</code>,<code>Andover Controls 37-bit</code>.",
                        "title": "Type",
                        "type": "string"
                    }
                },
                "required": [
                    "type"
                ],
                "title": "PostCardBodyV1",
                "type": "object"
            },
            "PostCredentialQueryV1": {
                "properties": {
                    "external_id": {
                        "description": "A unique identifier managed externally provided by the customer.",
                        "title": "External Id",
                        "type": "string"
                    },
                    "user_id": {
                        "description": "The unique identifier of the user managed by Verkada.",
                        "format": "uuid",
                        "title": "User Id",
                        "type": "string"
                    }
                },
                "title": "PostCredentialQueryV1",
                "type": "object"
            },
            "PostDenyListResponse": {
                "additionalProperties": false,
                "example": {
                    "base64_ascii_error_csv": "Zmlyc3RfbmFtZSxsYXN0X25hbWUsZGF0ZV9vZl9iaXJ0aCxub3RlcyxwaG90b191cmwsZXJyb3IKVGFyYSwsLCwsRW1wdHkgRnVsbG5hbWUKSm9obixTbWl0aCwsLGh0dHA6Ly9taXNzaW5nU2luSHR0cFMuanBnLEludmFsaWQgUGhvdG8gVVJMClRheWxvcixTd2lmdCwxOTc5MDgwNyxEZXNjcmlwdGlvbiBub3QgaW4gcXVvdGVzLGh0dHBzOi8vY2Fubm90RG93bmxvYWRJbWFnZUZyb21UaGlzVXJsLmpwZWcsSW52YWxpZCBQaG90byBVUkwKRGVyZWssR3VudGhpZXIsLCxodHRwczovL3BpY3R1cmVPZkFTaGVlcC5wbmcsTm8gUXVhbGl0eSBGYWNlIERldGVjdGVkIGluIFBob3RvCkdyYWNpZSxBYnJhbXMsMTk5OTAyMDMsIlRoaXMgaXMgYW4gZXhhbXBsZSBvZiBhIHN1Y2Nlc3NmdWxseSBkb3dubG9hZGVkIHJvdyEiLCJodHRwczovL2RyaXZlLmdvb2dsZS5jb20vdWM/ZXhwb3J0PWRvd25sb2FkJmlkPTExMTExYWFhYmJiX2NjY2NjZGRkZAo=",
                    "org_id": "fdf6e1f2-a986-418e-9a30-d0eb504e7f06",
                    "site_id": "fc749669-1370-4a9d-84e3-daf777e0546c"
                },
                "properties": {
                    "base64_ascii_error_csv": {
                        "description": "Base64 encoded (ASCII) deny list CSV data.",
                        "title": "Base64 Ascii Error Csv",
                        "type": "string"
                    },
                    "org_id": {
                        "description": "The unique identifier of the organization to which the Guest site belongs.",
                        "format": "uuid",
                        "title": "Org Id",
                        "type": "string"
                    },
                    "site_id": {
                        "description": "The unique identifier of the Guest site.",
                        "format": "uuid",
                        "title": "Site Id",
                        "type": "string"
                    }
                },
                "required": [
                    "org_id"
                ],
                "title": "PostDenyListResponse",
                "type": "object"
            },
            "PostDoorExceptionBodyV1": {
                "description": "Request schema for POST /access/v1/door/exception_calendar/<calendar_id>/exception.",
                "properties": {
                    "all_day_default": {
                        "default": false,
                        "description": "Bool value specifying if Exception is an All Day Default. If <code>TRUE</code>, then:\n- <code>door_status</code> must be set to <code>access_controlled</code>\n- <code>start_time</code> and <code>end_time</code> will automatically be set to <code>00:00:00</code> and <code>23:59:59</code>, respectively. Different values should not be provided.\n- <code>first_person_in</code> and <code>double_badge</code> must be <code>FALSE</code>",
                        "title": "All Day Default",
                        "type": "boolean"
                    },
                    "date": {
                        "description": "Date of the Door Exception formatted as <code>YYYY-MM-DD</code> (according to ISO 8601).",
                        "title": "Date",
                        "type": "string"
                    },
                    "door_status": {
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/DoorStatusEnum"
                            }
                        ],
                        "default": "",
                        "description": "The door status that this Exception should apply to all doors assigned to its Door Exception Calendar.\n\nPossible values are:\n- <code>locked</code>\n- <code>card_and_code</code>\n- <code>access_controlled</code>\n- <code>unlocked</code>"
                    },
                    "double_badge": {
                        "default": false,
                        "description": "Bool value specifying if the Double Badge setting should be enabled for relevant doors. If <code>TRUE</code>, <code>door_status</code> must be set to <code>access_controlled</code>.\n\nBy default, all users with access to relevant doors will be allowed to double badge.",
                        "title": "Double Badge",
                        "type": "boolean"
                    },
                    "double_badge_group_ids": {
                        "description": "List of IDs for Access Groups that users must be a member of to be allowed to double badge on relevant doors.\n\n<code>double_badge</code> must also be set to <code>TRUE</code> if value is provided.",
                        "items": {
                            "type": "string"
                        },
                        "title": "Double Badge Group Ids",
                        "type": "array"
                    },
                    "end_time": {
                        "description": "End time of the Door Exception formatted as <code>hh:mm</code> (according to ISO 8601).",
                        "format": "time",
                        "title": "End Time",
                        "type": "string"
                    },
                    "first_person_in": {
                        "default": false,
                        "description": "Bool value specifying if the First Person In setting should be enabled for relevant doors. If <code>TRUE</code>, <code>door_status</code> must be set to <code>card_and_code</code>, <code>access_controlled</code>, or <code>unlocked</code>.",
                        "title": "First Person In",
                        "type": "boolean"
                    },
                    "first_person_in_group_ids": {
                        "description": "List of IDs for Access Groups including supervisors used for First Person In mode.\n\n<code>first_person_in</code> must also be set to <code>TRUE</code> if this value is provided.",
                        "items": {
                            "type": "string"
                        },
                        "title": "First Person In Group Ids",
                        "type": "array"
                    },
                    "recurrence_rule": {
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/RecurrenceRule"
                            }
                        ],
                        "description": "A recurrence rule object specifying when the exception should repeat.",
                        "title": "Recurrence Rule"
                    },
                    "start_time": {
                        "description": "Start time of the Door Exception formatted as <code>hh:mm</code> (according to ISO 8601).",
                        "format": "time",
                        "title": "Start Time",
                        "type": "string"
                    }
                },
                "required": [
                    "date",
                    "start_time",
                    "end_time"
                ],
                "title": "PostDoorExceptionBodyV1",
                "type": "object"
            },
            "PostDoorExceptionCalendarBodyV1": {
                "description": "Request schema for POST /access/v1/door/exception_calendar.",
                "properties": {
                    "doors": {
                        "description": "Door IDs of Doors that the calendar’s Door Exceptions are being applied to.",
                        "items": {
                            "type": "string"
                        },
                        "title": "Doors",
                        "type": "array"
                    },
                    "exceptions": {
                        "description": "Door Exceptions for this Door Exception Calendar.",
                        "items": {
                            "$ref": "#/components/schemas/UnidentifiedValidatedDoorExceptionV1"
                        },
                        "title": "Exceptions",
                        "type": "array"
                    },
                    "name": {
                        "description": "Name of the Door Exception Calendar.",
                        "title": "Name",
                        "type": "string"
                    }
                },
                "required": [
                    "name"
                ],
                "title": "PostDoorExceptionCalendarBodyV1",
                "type": "object"
            },
            "PostLicensePlateBodyV1": {
                "properties": {
                    "active": {
                        "default": false,
                        "description": "Bool value specifying if the license plate credential is currently active. Default value is False.",
                        "title": "Active",
                        "type": "boolean"
                    },
                    "license_plate_number": {
                        "description": "The unique license plate number identifying a license plate credential for a user.",
                        "title": "License Plate Number",
                        "type": "string"
                    },
                    "name": {
                        "description": "The name to be given to the license plate credential.",
                        "title": "Name",
                        "type": "string"
                    }
                },
                "required": [
                    "license_plate_number"
                ],
                "title": "PostLicensePlateBodyV1",
                "type": "object"
            },
            "PostMFACodeBodyV1": {
                "properties": {
                    "code": {
                        "description": "The unique mfa code identifying a mfa code credential for a user.",
                        "title": "Code",
                        "type": "string"
                    }
                },
                "required": [
                    "code"
                ],
                "title": "PostMFACodeBodyV1",
                "type": "object"
            },
            "PostScenarioActionResponseV1": {
                "additionalProperties": false,
                "description": "Schema for scenario action response",
                "properties": {},
                "title": "PostScenarioActionResponseV1",
                "type": "object"
            },
            "PostUserAPIUnlockBodyV1": {
                "description": "User unlock parameters. Requires a user for whom to evaluate permission to unlock.",
                "properties": {
                    "door_id": {
                        "description": "The UUID of the door to unlock.",
                        "format": "uuid",
                        "title": "Door Id",
                        "type": "string"
                    },
                    "external_id": {
                        "description": "An externally defined unique identifier provided by the customer.",
                        "title": "External Id",
                        "type": "string"
                    },
                    "user_id": {
                        "description": "The unique identifier of the user managed by Verkada.",
                        "format": "uuid",
                        "title": "User Id",
                        "type": "string"
                    }
                },
                "title": "PostUserAPIUnlockBodyV1",
                "type": "object"
            },
            "PutAccessGroupRequestBodyV1": {
                "properties": {
                    "external_id": {
                        "description": "A unique identifier managed externally provided by the customer.",
                        "title": "External Id",
                        "type": "string"
                    },
                    "user_id": {
                        "description": "The unique identifier of the user managed by Verkada.",
                        "format": "uuid",
                        "title": "User Id",
                        "type": "string"
                    }
                },
                "title": "PutAccessGroupRequestBodyV1",
                "type": "object"
            },
            "PutDoorExceptionBodyV1": {
                "description": "Request schema for PUT /access/v1/door/exception_calendar/<calendar_id>/exception/<exception_id>.",
                "properties": {
                    "all_day_default": {
                        "default": false,
                        "description": "Bool value specifying if Exception is an All Day Default. If <code>TRUE</code>, then:\n- <code>door_status</code> must be set to <code>access_controlled</code>\n- <code>start_time</code> and <code>end_time</code> will automatically be set to <code>00:00:00</code> and <code>23:59:59</code>, respectively. Different values should not be provided.\n- <code>first_person_in</code> and <code>double_badge</code> must be <code>FALSE</code>",
                        "title": "All Day Default",
                        "type": "boolean"
                    },
                    "date": {
                        "description": "Date of the Door Exception formatted as <code>YYYY-MM-DD</code> (according to ISO 8601).",
                        "title": "Date",
                        "type": "string"
                    },
                    "door_status": {
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/DoorStatusEnum"
                            }
                        ],
                        "default": "",
                        "description": "The door status that this Exception should apply to all doors assigned to its Door Exception Calendar.\n\nPossible values are:\n- <code>locked</code>\n- <code>card_and_code</code>\n- <code>access_controlled</code>\n- <code>unlocked</code>"
                    },
                    "double_badge": {
                        "default": false,
                        "description": "Bool value specifying if the Double Badge setting should be enabled for relevant doors. If <code>TRUE</code>, <code>door_status</code> must be set to <code>access_controlled</code>.\n\nBy default, all users with access to relevant doors will be allowed to double badge.",
                        "title": "Double Badge",
                        "type": "boolean"
                    },
                    "double_badge_group_ids": {
                        "description": "List of IDs for Access Groups that users must be a member of to be allowed to double badge on relevant doors.\n\n<code>double_badge</code> must also be set to <code>TRUE</code> if value is provided.",
                        "items": {
                            "type": "string"
                        },
                        "title": "Double Badge Group Ids",
                        "type": "array"
                    },
                    "end_time": {
                        "description": "End time of the Door Exception formatted as <code>hh:mm</code> (according to ISO 8601).",
                        "format": "time",
                        "title": "End Time",
                        "type": "string"
                    },
                    "first_person_in": {
                        "default": false,
                        "description": "Bool value specifying if the First Person In setting should be enabled for relevant doors. If <code>TRUE</code>, <code>door_status</code> must be set to <code>card_and_code</code>, <code>access_controlled</code>, or <code>unlocked</code>.",
                        "title": "First Person In",
                        "type": "boolean"
                    },
                    "first_person_in_group_ids": {
                        "description": "List of IDs for Access Groups including supervisors used for First Person In mode.\n\n<code>first_person_in</code> must also be set to <code>TRUE</code> if this value is provided.",
                        "items": {
                            "type": "string"
                        },
                        "title": "First Person In Group Ids",
                        "type": "array"
                    },
                    "recurrence_rule": {
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/RecurrenceRule"
                            }
                        ],
                        "description": "A recurrence rule object specifying when the exception should repeat.",
                        "title": "Recurrence Rule"
                    },
                    "start_time": {
                        "description": "Start time of the Door Exception formatted as <code>hh:mm</code> (according to ISO 8601).",
                        "format": "time",
                        "title": "Start Time",
                        "type": "string"
                    }
                },
                "required": [
                    "date",
                    "start_time",
                    "end_time"
                ],
                "title": "PutDoorExceptionBodyV1",
                "type": "object"
            },
            "PutDoorExceptionCalendarBodyV1": {
                "description": "Request schema for PUT /access/v1/door/exception_calendar/<calendar_id>.",
                "properties": {
                    "doors": {
                        "description": "Door IDs of Doors that the calendar’s Door Exceptions are being applied to.",
                        "items": {
                            "type": "string"
                        },
                        "title": "Doors",
                        "type": "array"
                    },
                    "exceptions": {
                        "description": "Door Exceptions for this Door Exception Calendar.",
                        "items": {
                            "anyOf": [
                                {
                                    "$ref": "#/components/schemas/ValidatedDoorExceptionV1"
                                },
                                {
                                    "$ref": "#/components/schemas/UnidentifiedValidatedDoorExceptionV1"
                                }
                            ]
                        },
                        "title": "Exceptions",
                        "type": "array"
                    },
                    "name": {
                        "description": "Name of the Door Exception Calendar.",
                        "title": "Name",
                        "type": "string"
                    }
                },
                "required": [
                    "name"
                ],
                "title": "PutDoorExceptionCalendarBodyV1",
                "type": "object"
            },
            "PutEndDateAccessUserRequestBodyV1": {
                "properties": {
                    "end_date": {
                        "description": "The start time value of the time range controlling when a users credentials are active. Formatted as a Unix timestamp in seconds.",
                        "title": "End Date",
                        "type": "string"
                    }
                },
                "required": [
                    "end_date"
                ],
                "title": "PutEndDateAccessUserRequestBodyV1",
                "type": "object"
            },
            "PutEntryCodeAccessUserRequestBodyV1": {
                "properties": {
                    "entry_code": {
                        "description": "The access entry code used for keypad readers alone or in 2FA mode. Formatted as a string of digits between 4 and 16 in length. Must be unique within the organization.",
                        "title": "Entry Code",
                        "type": "string"
                    }
                },
                "required": [
                    "entry_code"
                ],
                "title": "PutEntryCodeAccessUserRequestBodyV1",
                "type": "object"
            },
            "PutStartDateAccessUserRequestBodyV1": {
                "properties": {
                    "start_date": {
                        "description": "The start time value of the time range controlling when a users credentials are active. Formatted as a Unix timestamp in seconds.",
                        "title": "Start Date",
                        "type": "string"
                    }
                },
                "required": [
                    "start_date"
                ],
                "title": "PutStartDateAccessUserRequestBodyV1",
                "type": "object"
            },
            "QuestionnaireResponseItem": {
                "properties": {
                    "passed": {
                        "description": "Whether or not the visitor passed the questionnaire.",
                        "title": "Passed",
                        "type": "boolean"
                    },
                    "questionnaire": {
                        "description": "The name of the questionnaire completed by the visitor.",
                        "title": "Questionnaire",
                        "type": "string"
                    }
                },
                "required": [
                    "questionnaire",
                    "passed"
                ],
                "title": "QuestionnaireResponseItem",
                "type": "object"
            },
            "QueueData": {
                "additionalProperties": false,
                "properties": {
                    "avg_queue_length": {
                        "additionalProperties": {
                            "type": "number"
                        },
                        "description": "A map of unix timestamps to average queue length for that time bucket",
                        "title": "Avg Queue Length",
                        "type": "object"
                    },
                    "avg_wait_time": {
                        "additionalProperties": {
                            "type": "number"
                        },
                        "description": "A map of unix timestamps to average wait time for that time bucket",
                        "title": "Avg Wait Time",
                        "type": "object"
                    },
                    "camera_presets_used": {
                        "description": "A list of camera and preset pairs that were used.",
                        "items": {
                            "type": "object"
                        },
                        "title": "Camera Presets Used",
                        "type": "array"
                    },
                    "max_queue_length": {
                        "additionalProperties": {
                            "type": "number"
                        },
                        "description": "A map of unix timestamps to max queue length for that time bucket",
                        "title": "Max Queue Length",
                        "type": "object"
                    },
                    "max_wait_time": {
                        "additionalProperties": {
                            "type": "number"
                        },
                        "description": "A map of unix timestamps to max wait time for that time bucket",
                        "title": "Max Wait Time",
                        "type": "object"
                    }
                },
                "title": "QueueData",
                "type": "object"
            },
            "RecurrenceRule": {
                "description": "A recurrence rule object specifying when the exception should repeat.",
                "properties": {
                    "by_day": {
                        "description": "For recurrences where <code>frequency</code> is <code>WEEKLY</code>, <code>MONTHLY</code>, or <code>YEARLY</code>. List of weekdays that the recurrence should include every week (see <code>BYDAY</code> in RFC 5545).\n\nSupported values are: <code>'SU'</code>, <code>'MO'</code>, <code>'TU'</code>, <code>'WE'</code>, <code>'TH'</code>, <code>'FR'</code>, <code>'SA'</code>.\n\n<b>Note:</b> Required if <code>frequency</code> is <code>WEEKLY</code>, and can include one or more values. If <code>frequency</code> is <code>MONTHLY</code> or <code>YEARLY</code>, only allowed if <code>by_set_pos</code> is not null and can only include a single value. Not supported otherwise.",
                        "items": {
                            "$ref": "#/components/schemas/WeekdayEnum"
                        },
                        "type": "array"
                    },
                    "by_month": {
                        "description": "For recurrences where <code>frequency</code> is <code>YEARLY</code>. The number of the month that the recurrence should include every year (see <code>BYMONTH</code> in RFC 5545).\n\nSupported values are integers from 1-12.\n\n<b>Note:</b> Required if <code>frequency</code> is <code>YEARLY</code>, not supported otherwise.",
                        "title": "By Month",
                        "type": "integer"
                    },
                    "by_month_day": {
                        "description": "For recurrences where <code>frequency</code> is <code>MONTHLY</code> or <code>YEARLY</code>. The day of the month that the recurrence should include every month or year (see <code>BYMONTHDAY</code> in RFC 5545).\n\nSupported values are integers from 1-31. If the value is set to 29-31 and a month does not include a day with that value, the recurrence will be ignored for that month.\n\n<b>Note:</b> Either <code>by_month_day</code> or <code>by_set_pos</code> is required if <code>frequency</code> is <code>MONTHLY</code> or <code>YEARLY</code> (only one is allowed), not supported otherwise.",
                        "title": "By Month Day",
                        "type": "integer"
                    },
                    "by_set_pos": {
                        "description": "For recurrences where <code>frequency</code> is <code>MONTHLY</code> or <code>YEARLY</code>. The position of the weekday specified in <code>by_day</code> in the month that the recurrence should include every month or year (see <code>BYMONTHDAY</code> in RFC 5545).\n\nFor example, <code>by_set_pos</code> would be set to 3 and <code>by_day</code> set to <code>'TU'</code>, to specify the 3rd Tuesday of a month.\n\nSupported values are integers from 1-5. If value is set to 5 and the month does not include a 5th instance of the weekday in <code>by_day</code>, the recurrence will be ignored for that month.\n\n<b>Note:</b> Either <code>by_month_day</code> or <code>by_set_pos</code> is required if <code>frequency</code> is <code>MONTHLY</code> or <code>YEARLY</code> (only one is allowed). Not supported otherwise.",
                        "title": "By Set Pos",
                        "type": "integer"
                    },
                    "count": {
                        "description": "The total number of times that the recurrence should repeat before ending (see <code>COUNT</code> in RFC 5545).\n\n<b>Note:</b> Only one of <code>count</code> or <code>until</code> is allowed, but not both.",
                        "title": "Count",
                        "type": "integer"
                    },
                    "excluded_dates": {
                        "description": "A list of dates to exclude for recurrence, formatted as <code>YYYY-MM-DD</code> (according to ISO 8601). Also see <code>EXDATE</code> in RFC 5545.",
                        "items": {
                            "type": "string"
                        },
                        "title": "Excluded Dates",
                        "type": "array"
                    },
                    "frequency": {
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/FrequencyEnum"
                            }
                        ],
                        "description": "Frequency type of the recurrence (see <code>FREQ</code> in RFC 5545).\n\nSupported values are: <code>'DAILY'</code>, <code>'WEEKLY'</code>, <code>'MONTHLY'</code>, <code>'YEARLY'</code>."
                    },
                    "interval": {
                        "description": "Interval at which the recurrence should repeat according to the frequency type (see <code>INTERVAL</code> in RFC 5545).",
                        "title": "Interval",
                        "type": "integer"
                    },
                    "until": {
                        "description": "The final date on which the recurrence should occur before ending, formatted as <code>YYYY-MM-DD</code> (according to ISO 8601). Also see <code>UNTIL</code> in RFC 5545.\n\n<b>Note:</b> Only one of <code>count</code> or <code>until</code> is allowed, but not both.",
                        "title": "Until",
                        "type": "string"
                    }
                },
                "required": [
                    "frequency",
                    "interval"
                ],
                "title": "RecurrenceRule",
                "type": "object"
            },
            "ResolutionEnum": {
                "description": "An enumeration.",
                "enum": [
                    "low-res",
                    "hi-res"
                ],
                "title": "ResolutionEnum",
                "type": "string"
            },
            "Scenario": {
                "description": "Scenario information (called lockdown in internal services)",
                "properties": {
                    "enabled": {
                        "description": "Whether scenario is enabled",
                        "title": "Enabled",
                        "type": "boolean"
                    },
                    "message": {
                        "description": "Message associated with the scenario",
                        "title": "Message",
                        "type": "string"
                    },
                    "name": {
                        "description": "Name of the scenario",
                        "title": "Name",
                        "type": "string"
                    },
                    "scenario_id": {
                        "description": "Identifier of the scenario",
                        "title": "Scenario Id",
                        "type": "string"
                    }
                },
                "title": "Scenario",
                "type": "object"
            },
            "ScenarioInfo": {
                "description": "Scenario event information (called lockdown in internal services)",
                "properties": {
                    "action": {
                        "description": "Action taken during scenario",
                        "title": "Action",
                        "type": "string"
                    },
                    "scenario": {
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/Scenario"
                            }
                        ],
                        "description": "Scenario info",
                        "title": "Scenario"
                    }
                },
                "title": "ScenarioInfo",
                "type": "object"
            },
            "ScenarioListQueryV1": {
                "description": "Schema for the list scenarios query.",
                "properties": {
                    "scenario_ids": {
                        "description": "IDs of scenarios to list.",
                        "items": {
                            "type": "string"
                        },
                        "title": "Scenario Ids",
                        "type": "array"
                    },
                    "site_ids": {
                        "description": "IDs of scoped sites that the scenarios are applied to.",
                        "items": {
                            "type": "string"
                        },
                        "title": "Site Ids",
                        "type": "array"
                    },
                    "types": {
                        "description": "Types of scenarios to list.",
                        "items": {
                            "type": "string"
                        },
                        "title": "Types",
                        "type": "array"
                    }
                },
                "title": "ScenarioListQueryV1",
                "type": "object"
            },
            "ScenarioListResponseV1": {
                "description": "Schema for the list scenarios response.",
                "properties": {
                    "scenarios": {
                        "description": "List of scenarios.",
                        "items": {
                            "$ref": "#/components/schemas/ScenarioV1"
                        },
                        "title": "Scenarios",
                        "type": "array"
                    }
                },
                "title": "ScenarioListResponseV1",
                "type": "object"
            },
            "ScenarioState": {
                "description": "Enum for the Scenario State.",
                "enum": [
                    "ACTIVE",
                    "INACTIVE"
                ],
                "title": "ScenarioState",
                "type": "string"
            },
            "ScenarioType": {
                "description": "Enum for the Scenario Type.",
                "enum": [
                    "lockdown"
                ],
                "title": "ScenarioType",
                "type": "string"
            },
            "ScenarioV1": {
                "description": "Schema for the Scenario.",
                "properties": {
                    "doors_to_lock": {
                        "description": "IDs of doors the scenario locks.",
                        "items": {
                            "type": "string"
                        },
                        "title": "Doors To Lock",
                        "type": "array"
                    },
                    "message": {
                        "default": "",
                        "description": "Scenario message.",
                        "title": "Message",
                        "type": "string"
                    },
                    "name": {
                        "description": "Name of the scenario.",
                        "title": "Name",
                        "type": "string"
                    },
                    "scenario_id": {
                        "description": "Unique ID of the scenario.",
                        "title": "Scenario Id",
                        "type": "string"
                    },
                    "site_count": {
                        "description": "Number of sites that the scenario is applied to.",
                        "title": "Site Count",
                        "type": "integer"
                    },
                    "sites": {
                        "description": "IDs of scoped sites to which the scenario is applied.",
                        "items": {
                            "type": "string"
                        },
                        "title": "Sites",
                        "type": "array"
                    },
                    "state": {
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/ScenarioState"
                            }
                        ],
                        "description": "State of the scenario."
                    },
                    "type": {
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/ScenarioType"
                            }
                        ],
                        "description": "Type of the scenario."
                    },
                    "user_groups_with_disable_access": {
                        "description": "IDs of user groups allowed to release the scenario.",
                        "items": {
                            "type": "string"
                        },
                        "title": "User Groups With Disable Access",
                        "type": "array"
                    },
                    "user_groups_with_door_access": {
                        "description": "IDs of user groups with access to the doors to which the scenario is applied.",
                        "items": {
                            "type": "string"
                        },
                        "title": "User Groups With Door Access",
                        "type": "array"
                    },
                    "user_groups_with_enable_access": {
                        "description": "IDs of user groups allowed to trigger the scenario.",
                        "items": {
                            "type": "string"
                        },
                        "title": "User Groups With Enable Access",
                        "type": "array"
                    }
                },
                "required": [
                    "scenario_id",
                    "type",
                    "name",
                    "state",
                    "site_count"
                ],
                "title": "ScenarioV1",
                "type": "object"
            },
            "SensorAlert": {
                "additionalProperties": false,
                "description": "Sensor Data Schema",
                "properties": {
                    "alert_event_id": {
                        "description": "The unique identifier for the triggered alert.",
                        "format": "uuid",
                        "title": "Alert Event Id",
                        "type": "string"
                    },
                    "device_id": {
                        "description": "The unique identifier of the device.",
                        "format": "uuid",
                        "title": "Device Id",
                        "type": "string"
                    },
                    "device_name": {
                        "description": "The name of the device.",
                        "title": "Device Name",
                        "type": "string"
                    },
                    "device_serial": {
                        "description": "The serial number of the device.",
                        "title": "Device Serial",
                        "type": "string"
                    },
                    "end_time": {
                        "description": "The end time of the alert.\nFormatted in Unix epoch format.",
                        "title": "End Time",
                        "type": "integer"
                    },
                    "is_above_max_event": {
                        "description": "If the alert can be configured with a low and a high threshold, this value will be <code>true</code> if the value that triggered the alert was above the high threshold.\n\nThis only applies to temperature and humidity alerts.",
                        "title": "Is Above Max Event",
                        "type": "boolean"
                    },
                    "most_extreme_value": {
                        "description": "The most extreme value for the sensor that was detected during the alert window.",
                        "title": "Most Extreme Value",
                        "type": "number"
                    },
                    "reading": {
                        "description": "The sensor type of the alert.",
                        "title": "Reading",
                        "type": "string"
                    },
                    "start_time": {
                        "description": "The start time of the alert.\nFormatted in Unix epoch format.",
                        "title": "Start Time",
                        "type": "integer"
                    },
                    "threshold": {
                        "description": "The user-defined threshold of the alert.",
                        "title": "Threshold",
                        "type": "number"
                    }
                },
                "title": "SensorAlert",
                "type": "object"
            },
            "SensorAlertsRequest": {
                "properties": {
                    "device_ids": {
                        "description": "Comma separated list of sensor ids",
                        "title": "Device Ids",
                        "type": "string"
                    },
                    "end_time": {
                        "description": "End of time range for which notifications are requested. Measured in seconds in Unix epoch time. Default value is current Unix epoch time.",
                        "title": "End Time",
                        "type": "integer"
                    },
                    "fields": {
                        "description": "Retrieves alerts only for the given fields. Fields must be one or multiple comma separated values from <code>humidity</code>, <code>motion</code>, <code>noise_level</code>, <code>pm_2_5</code>, <code>pm_4_0</code>, <code>pm_1_0_0</code>, <code>tamper</code>, <code>temperature</code>, <code>tvoc</code>(SV11), <code>usa_air_quality_index</code>, <code>vape_index</code>,<code>carbon_dioxide</code>, <code>carbon_monoxide</code>, <code>barometric_pressure</code>, <code>formaldehyde</code>, <code>ambient_light</code>, <code>tvoc_index</code>(SV23/SV25), <code>heat_index</code>. If left blank, alerts of all sensor types will be returned in the response.",
                        "title": "Fields",
                        "type": "string"
                    },
                    "page_cursor": {
                        "description": "The cursor used for pagination in order to fetch the next page of results.",
                        "title": "Page Cursor",
                        "type": "integer"
                    },
                    "per_page": {
                        "default": 100,
                        "description": "The number of items returned in a single response. Default is 100. Max is 200.",
                        "title": "Per Page",
                        "type": "integer"
                    },
                    "start_time": {
                        "description": "Start of time range for which alerts are requested.Measured in seconds since the Unix epoch. Default value is Unix epoch time ofan hour ago from <code>end_time</code>",
                        "title": "Start Time",
                        "type": "integer"
                    }
                },
                "required": [
                    "device_ids"
                ],
                "title": "SensorAlertsRequest",
                "type": "object"
            },
            "SensorAlertsRequestV1": {
                "properties": {
                    "device_ids": {
                        "description": "A comma separated list of sensor IDs.",
                        "title": "Device Ids",
                        "type": "string"
                    },
                    "end_time": {
                        "description": "The end of the time range for requested alerts.\nFormatted in Unix timestamp in seconds.\nDefault value is the current time.",
                        "title": "End Time",
                        "type": "integer"
                    },
                    "fields": {
                        "description": "Retrieves alerts only for the given fields.\n\nFields must be one or multiple comma separated values from <code>humidity</code>, <code>motion</code>, <code>noise_level</code>, <code>pm_2_5</code>, <code>pm_4_0</code>, <code>pm_1_0_0</code>, <code>tamper</code>, <code>temperature</code>, <code>tvoc</code>(SV11), <code>usa_air_quality_index</code>, <code>vape_index</code>, <code>carbon_dioxide</code>, <code>carbon_monoxide</code>, <code>barometric_pressure</code>, <code>formaldehyde</code>, <code>ambient_light</code>, <code>tvoc_index</code>(SV23/SV25),<code>heat_index</code>.\n\nIf left blank, alerts of all sensor types will be returned in the response.",
                        "title": "Fields",
                        "type": "string"
                    },
                    "page_size": {
                        "default": 100,
                        "description": "The number of items returned in a single response.\nDefault is 100. Max is 200.",
                        "exclusiveMinimum": true,
                        "maximum": 200,
                        "minimum": 0,
                        "title": "Page Size",
                        "type": "integer"
                    },
                    "page_token": {
                        "description": "The pagination token used to fetch the next page of results.",
                        "title": "Page Token",
                        "type": "string"
                    },
                    "start_time": {
                        "description": "The start of the time range for requested alerts.\nFormatted as a Unix timestamp in seconds.\nDefault value is an hour from the current time.",
                        "title": "Start Time",
                        "type": "integer"
                    }
                },
                "required": [
                    "device_ids"
                ],
                "title": "SensorAlertsRequestV1",
                "type": "object"
            },
            "SensorAlertsResponse": {
                "additionalProperties": false,
                "description": "Sensor Alerts Response schema",
                "example": {
                    "alert_events": [
                        {
                            "alert_event_id": "c0aa3929-3184-4b15-8082-7e29c6f38df4",
                            "device_id": "8a184eff-47e0-487f-ab4d-d9277adea817",
                            "device_name": "Third Floor Main Conference Room",
                            "device_serial": "JQ9E-R9CG-RF6X",
                            "end_time": 1641337171,
                            "is_above_max_event": true,
                            "most_extreme_value": 1085.0,
                            "reading": "tvoc",
                            "start_time": 1641337165,
                            "threshold": 1000.0
                        },
                        {
                            "alert_event_id": "13a486ff-45d1-47d0-a95b-072b6ba9e46f",
                            "device_id": "4ddbf0de-4d71-4e9f-92dd-319e70936a24",
                            "device_name": "Mail Room",
                            "device_serial": "JQ9D-S9BL-RD9W",
                            "end_time": 1641334872,
                            "is_above_max_event": true,
                            "most_extreme_value": 1.0,
                            "reading": "motion",
                            "start_time": 1641334867,
                            "threshold": 1.0
                        }
                    ],
                    "page_cursor": 2
                },
                "properties": {
                    "alert_events": {
                        "items": {
                            "$ref": "#/components/schemas/SensorAlert"
                        },
                        "title": "Alert Events",
                        "type": "array"
                    },
                    "page_cursor": {
                        "title": "Page Cursor",
                        "type": "integer"
                    }
                },
                "title": "SensorAlertsResponse",
                "type": "object"
            },
            "SensorAlertsResponseV1": {
                "additionalProperties": false,
                "description": "Sensor Alerts Response schema",
                "example": {
                    "alert_events": [
                        {
                            "alert_event_id": "25e15d7d-b19f-44a6-89b7-d37e460ce928",
                            "device_id": "b9ca7d11-66e2-47f0-a09e-05d6765c756a",
                            "device_name": "Third Floor Main Conference Room",
                            "device_serial": "UAIS-FSIL-3UTO",
                            "end_time": 1641337171,
                            "is_above_max_event": true,
                            "most_extreme_value": 1085.0,
                            "reading": "tvoc",
                            "start_time": 1641337165,
                            "threshold": 1000.0
                        },
                        {
                            "alert_event_id": "a665798b-6203-4d0f-b544-479a3b2bab21",
                            "device_id": "9b19a448-9139-479f-85b8-2e336f67b5e7",
                            "device_name": "Mail Room",
                            "device_serial": "ZWO2-VPZ6-UULB",
                            "end_time": 1641334872,
                            "is_above_max_event": true,
                            "most_extreme_value": 1.0,
                            "reading": "motion",
                            "start_time": 1641334867,
                            "threshold": 1.0
                        }
                    ],
                    "page_cursor": 2
                },
                "properties": {
                    "alert_events": {
                        "description": "A list of sensor alert events.",
                        "items": {
                            "$ref": "#/components/schemas/SensorAlert"
                        },
                        "title": "Alert Events",
                        "type": "array"
                    },
                    "next_page_token": {
                        "description": "The pagination token used to fetch the next page of results.",
                        "title": "Next Page Token",
                        "type": "string"
                    }
                },
                "title": "SensorAlertsResponseV1",
                "type": "object"
            },
            "SensorDataRequest": {
                "properties": {
                    "end_time": {
                        "description": "End of the time range for which sensor data is requested. Measures in seconds since the Unix epoch.",
                        "title": "End Time",
                        "type": "integer"
                    },
                    "fields": {
                        "description": "one or multiple comma separated values from <code>humidity</code>, <code>motion</code>, <code>noise_level</code>, <code>pm_2_5</code>, <code>tamper</code>, <code>temperature</code>, <code>tvoc</code>(SV11), <code>usa_air_quality_index</code>, <code>vape_index</code>, <code>carbon_dioxide</code>, <code>carbon_monoxide</code>, <code>barometric_pressure</code>, <code>formaldehyde</code>, <code>ambient_light</code>, <code>tvoc_index</code>(SV23/SV25), <code>heat_index</code>. If blank, all sensor readings will be returned in the response.",
                        "title": "Fields",
                        "type": "string"
                    },
                    "page_cursor": {
                        "description": "Page cursor to be used for getting next page of results",
                        "title": "Page Cursor",
                        "type": "integer"
                    },
                    "per_page": {
                        "default": 100,
                        "description": "Size of the results to be returned",
                        "title": "Per Page",
                        "type": "integer"
                    },
                    "resolution": {
                        "description": "The frequency of the requested data. Data is stored with 1s granularity for 30 days, and with 5m resolution for data between 30 days and 365 days old. Supported formats are <code>s</code>, <code>m</code>, and <code>h</code> for seconds, days, and hours, respectively. If left blank, a default resolution will be calculated.",
                        "title": "Resolution",
                        "type": "string"
                    },
                    "start_time": {
                        "description": "Start of the time range for which sensor data is requested. Measures in seconds since the Unix epoch.",
                        "title": "Start Time",
                        "type": "integer"
                    }
                },
                "required": [
                    "start_time",
                    "end_time"
                ],
                "title": "SensorDataRequest",
                "type": "object"
            },
            "SensorDataRequestV1": {
                "properties": {
                    "device_id": {
                        "description": "The unique identifier of the device.",
                        "title": "Device Id",
                        "type": "string"
                    },
                    "end_time": {
                        "description": "The end of the time range for requested sensor data.\nFormatted as a Unix timestamp in seconds.\nDefaults to the current time.",
                        "title": "End Time",
                        "type": "integer"
                    },
                    "fields": {
                        "description": "One or multiple comma separated values from <code>humidity</code>, <code>motion</code>, <code>noise_level</code>, <code>pm_2_5</code>, <code>pm_4_0</code>, <code>pm_1_0_0</code>, <code>tamper</code>, <code>temperature</code>, <code>tvoc</code>(SV11), <code>usa_air_quality_index</code>, <code>vape_index</code>, <code>carbon_dioxide</code>, <code>carbon_monoxide</code>, <code>barometric_pressure</code>, <code>formaldehyde</code>, <code>ambient_light</code>, <code>tvoc_index</code>(SV23/SV25), <code>heat_index</code>.\n\nIf blank, all sensor readings will be returned in the response.",
                        "title": "Fields",
                        "type": "string"
                    },
                    "interval": {
                        "description": "The time interval for the requested sensor data.\n\nData is stored with 1 second intervals for 30 days, and with 5 minute intervals for data between 30 days and 365 days old.\n\nA valid value for this field is a number followed by a supported format. Supported formats are <code>s</code>, <code>m</code>, and <code>h</code> for seconds, minutes, and hours, respectively.\n\nFor example, `5m` would specify a 5 minutes interval for the data.\n\nIf left blank, a default resolution will be calculated based on time range.",
                        "title": "Interval",
                        "type": "string"
                    },
                    "page_size": {
                        "default": 100,
                        "description": "The number of items returned in a single response.\nDefault is 100. Max is 200.",
                        "exclusiveMinimum": true,
                        "maximum": 200,
                        "minimum": 0,
                        "title": "Page Size",
                        "type": "integer"
                    },
                    "page_token": {
                        "description": "The pagination token used to fetch the next page of results.",
                        "title": "Page Token",
                        "type": "string"
                    },
                    "start_time": {
                        "description": "The start of the time range for requested sensor data.\nFormatted as a Unix timestamp in seconds.\nDefaults to an hour from the current time.",
                        "title": "Start Time",
                        "type": "integer"
                    }
                },
                "required": [
                    "device_id"
                ],
                "title": "SensorDataRequestV1",
                "type": "object"
            },
            "SensorDataResponse": {
                "additionalProperties": false,
                "example": {
                    "data": [
                        {
                            "heat_index": 20.837427,
                            "humidity": 51.507164,
                            "motion": 0,
                            "noise_level": 51.139782,
                            "pm_1_0_0": 0.072837172,
                            "pm_2_5": 0.033870004,
                            "pm_4_0": 0.039784023,
                            "tamper": 0,
                            "temperature": 20.837427,
                            "time": 1639592320,
                            "tvoc": 769.0,
                            "usa_air_quality_index": 0.0,
                            "vape_index": 0.0,
                            "vape_index_experimental": 0.0
                        },
                        {
                            "heat_index": 20.837427,
                            "humidity": 51.507164,
                            "motion": 0,
                            "noise_level": 51.257225,
                            "pm_1_0_0": 0.072837172,
                            "pm_2_5": 0.033870004,
                            "pm_4_0": 0.039784023,
                            "tamper": 0,
                            "temperature": 20.837427,
                            "time": 1639592321,
                            "tvoc": 753.0,
                            "usa_air_quality_index": 0.0,
                            "vape_index": 0.0,
                            "vape_index_experimental": 0.0
                        }
                    ],
                    "device_id": "1dfba4f5-1718-46be-afd7-c91bc5674201",
                    "device_name": "Lobby Sensor",
                    "device_serial": "JQ9R-R9CG-RF6X",
                    "device_site_name": "First Floor Devices",
                    "page_cursor": 1639592321,
                    "resolution": "1s"
                },
                "properties": {
                    "data": {
                        "items": {
                            "type": "object"
                        },
                        "title": "Data",
                        "type": "array"
                    },
                    "device_id": {
                        "default": "",
                        "description": "The unique identifier of the device.",
                        "format": "uuid",
                        "title": "Device Id",
                        "type": "string"
                    },
                    "device_name": {
                        "description": "The name of the device.",
                        "title": "Device Name",
                        "type": "string"
                    },
                    "device_serial": {
                        "default": "",
                        "description": "The serial number of the device.",
                        "title": "Device Serial",
                        "type": "string"
                    },
                    "page_cursor": {
                        "description": "The pagination cursor used to fetch the next page of results.",
                        "title": "Page Cursor",
                        "type": "integer"
                    },
                    "resolution": {
                        "default": "",
                        "description": "The frequency of the returned sensor data.",
                        "title": "Resolution",
                        "type": "string"
                    }
                },
                "title": "SensorDataResponse",
                "type": "object"
            },
            "SensorDataResponseV1": {
                "additionalProperties": false,
                "example": {
                    "data": [
                        {
                            "heat_index": 20.837427,
                            "humidity": 51.507164,
                            "motion": 0,
                            "noise_level": 51.139782,
                            "pm_1_0_0": 0.072837172,
                            "pm_2_5": 0.033870004,
                            "pm_4_0": 0.039784023,
                            "tamper": 0,
                            "temperature": 20.837427,
                            "time": 1639592320,
                            "tvoc": 769.0,
                            "usa_air_quality_index": 0.0,
                            "vape_index": 0.0,
                            "vape_index_experimental": 0.0
                        },
                        {
                            "heat_index": 20.837427,
                            "humidity": 51.507164,
                            "motion": 0,
                            "noise_level": 51.257225,
                            "pm_1_0_0": 0.072837172,
                            "pm_2_5": 0.033870004,
                            "pm_4_0": 0.039784023,
                            "tamper": 0,
                            "temperature": 20.837427,
                            "time": 1639592321,
                            "tvoc": 753.0,
                            "usa_air_quality_index": 0.0,
                            "vape_index": 0.0,
                            "vape_index_experimental": 0.0
                        }
                    ],
                    "device_id": "1dfba4f5-1718-46be-afd7-c91bc5674201",
                    "device_name": "Lobby Sensor",
                    "device_serial": "JQ9R-R9CG-RF6X",
                    "device_site_name": "First Floor Devices",
                    "page_cursor": 1639592321,
                    "resolution": "1s"
                },
                "properties": {
                    "data": {
                        "items": {
                            "type": "object"
                        },
                        "title": "Data",
                        "type": "array"
                    },
                    "device_id": {
                        "default": "",
                        "description": "The unique identifier of the device.",
                        "format": "uuid",
                        "title": "Device Id",
                        "type": "string"
                    },
                    "device_name": {
                        "description": "The name of the device.",
                        "title": "Device Name",
                        "type": "string"
                    },
                    "device_serial": {
                        "default": "",
                        "description": "The serial number of the device.",
                        "title": "Device Serial",
                        "type": "string"
                    },
                    "interval": {
                        "default": "",
                        "description": "The time interval of the requested sensor data.",
                        "title": "Interval",
                        "type": "string"
                    },
                    "next_page_token": {
                        "description": "The pagination token used to fetch the next page of results.",
                        "title": "Next Page Token",
                        "type": "string"
                    }
                },
                "title": "SensorDataResponseV1",
                "type": "object"
            },
            "SensorEvent": {
                "additionalProperties": false,
                "description": "Sensor event",
                "properties": {
                    "device_id": {
                        "description": "ID of the device that generated the event",
                        "title": "Device Id",
                        "type": "string"
                    },
                    "device_type": {
                        "default": "sensor",
                        "description": "Always 'sensor' for sensor events",
                        "enum": [
                            "sensor"
                        ],
                        "title": "Device Type",
                        "type": "string"
                    },
                    "event_id": {
                        "description": "Unique identifier for the event",
                        "title": "Event Id",
                        "type": "string"
                    },
                    "event_info": {
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/SensorEventInfo"
                            }
                        ],
                        "description": "Sensor-specific event information",
                        "title": "Event Info"
                    },
                    "event_type": {
                        "description": "Type of event",
                        "title": "Event Type",
                        "type": "string"
                    },
                    "timestamp": {
                        "description": "Event timestamp in RFC 3339 format (e.g., '2025-01-17T21:06:20+00:00')",
                        "title": "Timestamp",
                        "type": "string"
                    }
                },
                "required": [
                    "event_id",
                    "device_id",
                    "event_type",
                    "timestamp"
                ],
                "title": "SensorEvent",
                "type": "object"
            },
            "SensorEventInfo": {
                "description": "Sensor-specific event fields",
                "properties": {
                    "details": {
                        "description": "Additional details about the sensor event",
                        "title": "Details",
                        "type": "string"
                    },
                    "end_event": {
                        "description": "Whether this event marks the end of an event condition",
                        "title": "End Event",
                        "type": "boolean"
                    },
                    "end_time": {
                        "description": "Event end time as Unix timestamp",
                        "title": "End Time",
                        "type": "integer"
                    },
                    "event_id": {
                        "description": "Unique identifier for the sensor event",
                        "title": "Event Id",
                        "type": "string"
                    },
                    "is_above_max_event": {
                        "description": "True if the event was triggered by exceeding the maximum threshold",
                        "title": "Is Above Max Event",
                        "type": "boolean"
                    },
                    "is_above_threshold": {
                        "description": "Whether the measured value was above (true) or below (false) the threshold",
                        "title": "Is Above Threshold",
                        "type": "boolean"
                    },
                    "is_zone_event": {
                        "description": "Whether this is a zone-level event",
                        "title": "Is Zone Event",
                        "type": "boolean"
                    },
                    "measured_value": {
                        "description": "The actual measured value that triggered the event (most extreme value)",
                        "title": "Measured Value",
                        "type": "number"
                    },
                    "most_extreme_value": {
                        "description": "The most extreme value detected during the event window",
                        "title": "Most Extreme Value",
                        "type": "number"
                    },
                    "reading": {
                        "description": "The sensor reading type that triggered the event",
                        "title": "Reading",
                        "type": "string"
                    },
                    "sensor_type": {
                        "description": "Type of sensor reading that triggered the event (e.g., 'temperature', 'humidity', 'motion')",
                        "title": "Sensor Type",
                        "type": "string"
                    },
                    "start_time": {
                        "description": "Event start time as Unix timestamp",
                        "title": "Start Time",
                        "type": "integer"
                    },
                    "threshold": {
                        "description": "The configured threshold for the event",
                        "title": "Threshold",
                        "type": "number"
                    },
                    "threshold_value": {
                        "description": "The threshold value that was exceeded",
                        "title": "Threshold Value",
                        "type": "number"
                    },
                    "zone_device_id": {
                        "description": "Device ID within the zone",
                        "title": "Zone Device Id",
                        "type": "string"
                    },
                    "zone_event_id": {
                        "description": "Zone event identifier",
                        "title": "Zone Event Id",
                        "type": "string"
                    },
                    "zone_id": {
                        "description": "Zone identifier if this is a zone event",
                        "title": "Zone Id",
                        "type": "string"
                    },
                    "zone_name": {
                        "description": "Zone name if this is a zone event",
                        "title": "Zone Name",
                        "type": "string"
                    }
                },
                "title": "SensorEventInfo",
                "type": "object"
            },
            "SignatureResponseItem": {
                "properties": {
                    "doc_signature_id": {
                        "description": "The unique identifier for the signed document.",
                        "format": "uuid",
                        "title": "Doc Signature Id",
                        "type": "string"
                    },
                    "document_id": {
                        "description": "The unique identifier of the document the visitor signed.",
                        "format": "uuid",
                        "title": "Document Id",
                        "type": "string"
                    },
                    "pdf_url": {
                        "description": "A *non-permanent* URL pointing to a PDF of the signed document.",
                        "title": "Pdf Url",
                        "type": "string"
                    },
                    "visit_id": {
                        "description": "The unique identifier of the visit the document signature corresponds to.",
                        "format": "uuid",
                        "title": "Visit Id",
                        "type": "string"
                    }
                },
                "required": [
                    "doc_signature_id",
                    "visit_id",
                    "document_id",
                    "pdf_url"
                ],
                "title": "SignatureResponseItem",
                "type": "object"
            },
            "SiteInfoV1": {
                "additionalProperties": false,
                "description": "Detailed information about a single site",
                "properties": {
                    "site_id": {
                        "description": "The unique identifier of the alarm site",
                        "title": "Site Id",
                        "type": "string"
                    },
                    "site_name": {
                        "description": "The name of the alarm site",
                        "title": "Site Name",
                        "type": "string"
                    },
                    "site_security_level": {
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/SiteSecurityLevel"
                            }
                        ],
                        "description": "The security level of the alarm site described as on of:\n<code>high</code> - An alarm is raised whenever there is visible threat to person or property, along with all other types of verifications.\n<code>low</code> - An alarm is raised if there is a visible threat to a person or property but all other types of verifications are dismissed.\n<code>custom</code> - An alarm is raised only on certain types of verifications based on custom preferences of your site."
                    },
                    "site_state": {
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/SiteState"
                            }
                        ],
                        "description": "The site's current state described as one of:\n<code>disarmed</code> - The site will not alert on events\n<code>armed</code> - The site will raise an alarm when tripped\n<code>alarm</code> - An alarm is active and a response is in progress\n<code>silent_alarm</code> - An alarm is active and local responses are suppressed"
                    }
                },
                "required": [
                    "site_id",
                    "site_name"
                ],
                "title": "SiteInfoV1",
                "type": "object"
            },
            "SiteSecurityLevel": {
                "description": "The current state of the site",
                "enum": [
                    "high",
                    "low",
                    "custom"
                ],
                "title": "SiteSecurityLevel",
                "type": "string"
            },
            "SiteState": {
                "description": "The current state of the site",
                "enum": [
                    "disarmed",
                    "armed",
                    "alarm",
                    "silent_alarm"
                ],
                "title": "SiteState",
                "type": "string"
            },
            "ThumbnailImageRequestV1": {
                "properties": {
                    "camera_id": {
                        "description": "The unique identifier of the camera.",
                        "title": "Camera Id",
                        "type": "string"
                    },
                    "resolution": {
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/ResolutionEnum"
                            }
                        ],
                        "default": "low-res",
                        "description": "Returns a low-resolution thumbnail if this parameter is set to 'low-res'.\nReturns a high-resolution thumbnail if this parameter is set to 'hi-res'.\n\nDefaults to a low-resolution thumbnail."
                    },
                    "timestamp": {
                        "description": "The approximate timestamp of the requested thumbnail.\nFormatted as a Unix timestamp in seconds.\nDefaults to the current time.",
                        "title": "Timestamp",
                        "type": "integer"
                    }
                },
                "required": [
                    "camera_id"
                ],
                "title": "ThumbnailImageRequestV1",
                "type": "object"
            },
            "ThumbnailRequest": {
                "properties": {
                    "expiry": {
                        "description": "How long in seconds the presigned url will be valid",
                        "title": "Expiry",
                        "type": "integer"
                    }
                },
                "title": "ThumbnailRequest",
                "type": "object"
            },
            "ThumbnailRequestV1": {
                "properties": {
                    "camera_id": {
                        "description": "The unique identifier of camera.",
                        "title": "Camera Id",
                        "type": "string"
                    },
                    "expiry": {
                        "default": 86400,
                        "description": "The expiry duration for the generated link.\nFormatted as a Unix timestamp in seconds.\nDefaults to one day.",
                        "title": "Expiry",
                        "type": "integer"
                    },
                    "timestamp": {
                        "description": "The timestamp when thumbnail was captured.\nFormatted as a Unix timestamp in seconds.\nDefaults to the current time.",
                        "title": "Timestamp",
                        "type": "integer"
                    }
                },
                "required": [
                    "camera_id"
                ],
                "title": "ThumbnailRequestV1",
                "type": "object"
            },
            "ThumbnailResponse": {
                "additionalProperties": false,
                "example": {
                    "expiry": 86400,
                    "timestamp": 1592436240,
                    "url": "https://verkada-video-staging-us-west-2.s3.amazonaws.com/v2/5368/350618ef-37d7-45ef-bfda-4bf744206c6f-2bd115d9-b054-4cc0-b679-b2aead55ac39/574903.jpg?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=ASIARSKN7XTDKBP4UPWC%2F20200820%2Fus-west-2%2Fs3%2Faws4_request&X-Amz-Date=20200820T215306Z&X-Amz-Expires=86400&X-Amz-SignedHeaders=host&X-Amz-Security-Token=FwoGZXIvYXdzEHcaDN9O%2B6iBHQGdJQzTYiKQBKuJPF4i0%2FcYfm5Zztb5h5ZwJb4aBnmZcblrO56AmBt4kYEd%2B%2BHaWO7r7Z6s%2FI1hcziBkNZh8Rh%2BNn2dw1mhX46oXdZq31tzYYep%2Bm7pYkL%2FoP6AYAZVlPhyvzSSAGrjUqmmdGsc%2BEdnSYLSvM%2BnxN%2FJfk43ntfrUo%2FB7EpdXBstWh4ficwpV8fmPma1lUykHzZbaoVlsycFfEcro9t0uXfYL%2FcrlFw2rvcikRoz055%2FXYtQG5Oquz0dVKtvw4ZFthbYwp556VF6fVkIMBPLq%2B3m1t3qMaw3PSHKsKLDYRKiek3LdLAdCIijUWfyMjB2sTnXRaQIMm7LHMxscnrKd%2BKqcCfvjhKwad1vHsjnfen0Exw5EZU4fRjT5RvUJtZSBEStVmOoUwc0HljwqAWdsdhmqcSzOGP0ivHLZeMkxozIWENuUk7CG3k5cIIb5YdD4EXIrfTG8H9%2BsfXgHsA%2F5uIWEvrxNZndpcxeO8mboDn6h4KCMSuqX9m%2FJNBqsvGv6evBeZOYIYg1FjrDZ2V781yN0UJ%2FPLU%2FEkAdwVL%2F5jQVZMmBEr0yxIsgab0Xypsp9UmR%2BboenM3xuGBtZH%2BVTlhMeQpTPlwsbAVVWMu0JykWYVnlb%2FNaMhNaOiaAUWXqXSfeg8HJzbsn6SoCO%2F3xCsid0kYOaIlF%2B%2B%2FsZgVl3hHzBiwcx%2BSH2dTOvw5fLZQhmCjC4fv5BTIqlQF0zzkyc7sM7lw4cPlEFooxVaJqODod8tmSwulRSmiyV%2B%2BX1WcT13%2BD&X-Amz-Signature=873c22dd3ca2e57f2b36db84a9a6f074b7a890edb53c15f7b970ef0293d54af0"
                },
                "properties": {
                    "expiry": {
                        "description": "The expiry duration for the generated link.",
                        "title": "Expiry",
                        "type": "integer"
                    },
                    "timestamp": {
                        "description": "The timestamp when thumbnail was captured.\nFormatted as a Unix timestamp in seconds.",
                        "title": "Timestamp",
                        "type": "integer"
                    },
                    "url": {
                        "description": "The link to the thumbnail.",
                        "title": "Url",
                        "type": "string"
                    }
                },
                "title": "ThumbnailResponse",
                "type": "object"
            },
            "UnidentifiedValidatedDoorExceptionV1": {
                "description": "Schema for the Door Exception with validation but without ids.",
                "properties": {
                    "all_day_default": {
                        "default": false,
                        "description": "Bool value specifying if Exception is an All Day Default. If <code>TRUE</code>, then:\n- <code>door_status</code> must be set to <code>access_controlled</code>\n- <code>start_time</code> and <code>end_time</code> will automatically be set to <code>00:00:00</code> and <code>23:59:59</code>, respectively. Different values should not be provided.\n- <code>first_person_in</code> and <code>double_badge</code> must be <code>FALSE</code>",
                        "title": "All Day Default",
                        "type": "boolean"
                    },
                    "date": {
                        "description": "Date of the Door Exception formatted as <code>YYYY-MM-DD</code> (according to ISO 8601).",
                        "title": "Date",
                        "type": "string"
                    },
                    "door_status": {
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/DoorStatusEnum"
                            }
                        ],
                        "default": "",
                        "description": "The door status that this Exception should apply to all doors assigned to its Door Exception Calendar.\n\nPossible values are:\n- <code>locked</code>\n- <code>card_and_code</code>\n- <code>access_controlled</code>\n- <code>unlocked</code>"
                    },
                    "double_badge": {
                        "default": false,
                        "description": "Bool value specifying if the Double Badge setting should be enabled for relevant doors. If <code>TRUE</code>, <code>door_status</code> must be set to <code>access_controlled</code>.\n\nBy default, all users with access to relevant doors will be allowed to double badge.",
                        "title": "Double Badge",
                        "type": "boolean"
                    },
                    "double_badge_group_ids": {
                        "description": "List of IDs for Access Groups that users must be a member of to be allowed to double badge on relevant doors.\n\n<code>double_badge</code> must also be set to <code>TRUE</code> if value is provided.",
                        "items": {
                            "type": "string"
                        },
                        "title": "Double Badge Group Ids",
                        "type": "array"
                    },
                    "end_time": {
                        "description": "End time of the Door Exception formatted as <code>hh:mm</code> (according to ISO 8601).",
                        "format": "time",
                        "title": "End Time",
                        "type": "string"
                    },
                    "first_person_in": {
                        "default": false,
                        "description": "Bool value specifying if the First Person In setting should be enabled for relevant doors. If <code>TRUE</code>, <code>door_status</code> must be set to <code>card_and_code</code>, <code>access_controlled</code>, or <code>unlocked</code>.",
                        "title": "First Person In",
                        "type": "boolean"
                    },
                    "first_person_in_group_ids": {
                        "description": "List of IDs for Access Groups including supervisors used for First Person In mode.\n\n<code>first_person_in</code> must also be set to <code>TRUE</code> if this value is provided.",
                        "items": {
                            "type": "string"
                        },
                        "title": "First Person In Group Ids",
                        "type": "array"
                    },
                    "recurrence_rule": {
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/RecurrenceRule"
                            }
                        ],
                        "description": "A recurrence rule object specifying when the exception should repeat.",
                        "title": "Recurrence Rule"
                    },
                    "start_time": {
                        "description": "Start time of the Door Exception formatted as <code>hh:mm</code> (according to ISO 8601).",
                        "format": "time",
                        "title": "Start Time",
                        "type": "string"
                    }
                },
                "required": [
                    "date",
                    "start_time",
                    "end_time"
                ],
                "title": "UnidentifiedValidatedDoorExceptionV1",
                "type": "object"
            },
            "UpdateAccessLevelRequestV1": {
                "description": "Request schema for updating Access Levels.",
                "properties": {
                    "access_groups": {
                        "description": "IDs of Access Groups granted door access via this Access Level",
                        "items": {
                            "type": "string"
                        },
                        "title": "Access Groups",
                        "type": "array"
                    },
                    "access_schedule_events": {
                        "description": "List of Access Schedule Events associated with this Access Level",
                        "items": {
                            "$ref": "#/components/schemas/AccessScheduleEventV1"
                        },
                        "title": "Access Schedule Events",
                        "type": "array"
                    },
                    "doors": {
                        "description": "IDs of Doors accessible under this Access Level",
                        "items": {
                            "type": "string"
                        },
                        "title": "Doors",
                        "type": "array"
                    },
                    "name": {
                        "description": "Name of the Access Level",
                        "title": "Name",
                        "type": "string"
                    },
                    "sites": {
                        "description": "IDs of Sites containing the Doors this Access Level applies to",
                        "items": {
                            "type": "string"
                        },
                        "title": "Sites",
                        "type": "array"
                    }
                },
                "required": [
                    "name",
                    "access_groups",
                    "sites",
                    "doors",
                    "access_schedule_events"
                ],
                "title": "UpdateAccessLevelRequestV1",
                "type": "object"
            },
            "UpdateUserRequestBody": {
                "properties": {
                    "company_name": {
                        "description": "The name of the company the user is part of.",
                        "title": "Company Name",
                        "type": "string"
                    },
                    "department": {
                        "description": "The name of the department the user is part of.",
                        "title": "Department",
                        "type": "string"
                    },
                    "department_id": {
                        "description": "The department ID of the department the user is in.",
                        "title": "Department Id",
                        "type": "string"
                    },
                    "email": {
                        "description": "The email of the user.",
                        "title": "Email",
                        "type": "string"
                    },
                    "employee_id": {
                        "description": "The user's employee ID, does not have to be unique.",
                        "title": "Employee Id",
                        "type": "string"
                    },
                    "employee_title": {
                        "description": "The title of employee.",
                        "title": "Employee Title",
                        "type": "string"
                    },
                    "employee_type": {
                        "description": "The type of employee.",
                        "title": "Employee Type",
                        "type": "string"
                    },
                    "external_id": {
                        "description": "A unique identifier managed externally provided by the consumer.",
                        "title": "External Id",
                        "type": "string"
                    },
                    "first_name": {
                        "description": "The first name of the user.",
                        "title": "First Name",
                        "type": "string"
                    },
                    "last_name": {
                        "description": "The last name of the user.",
                        "title": "Last Name",
                        "type": "string"
                    },
                    "middle_name": {
                        "description": "The middle name of the user.",
                        "title": "Middle Name",
                        "type": "string"
                    },
                    "phone": {
                        "description": "The main phone number of a user, E.164 format preferred.",
                        "title": "Phone",
                        "type": "string"
                    }
                },
                "title": "UpdateUserRequestBody",
                "type": "object"
            },
            "UpdateUserRequestQuery": {
                "properties": {
                    "external_id": {
                        "description": "A unique identifier managed externally provided by the consumer.",
                        "title": "External Id",
                        "type": "string"
                    },
                    "user_id": {
                        "description": "The unique identifier of the user managed by Verkada.",
                        "title": "User Id",
                        "type": "string"
                    }
                },
                "title": "UpdateUserRequestQuery",
                "type": "object"
            },
            "UpdateUserResponse": {
                "additionalProperties": false,
                "properties": {
                    "active": {
                        "description": "Whether the user is active in the system.",
                        "title": "Active",
                        "type": "boolean"
                    },
                    "company_name": {
                        "description": "The name of the company the user is part of.",
                        "title": "Company Name",
                        "type": "string"
                    },
                    "department": {
                        "description": "The name of the department the user is part of.",
                        "title": "Department",
                        "type": "string"
                    },
                    "department_id": {
                        "description": "The department ID of the department the user is in.",
                        "title": "Department Id",
                        "type": "string"
                    },
                    "email": {
                        "description": "The email of the user.",
                        "title": "Email",
                        "type": "string"
                    },
                    "employee_id": {
                        "description": "The user's employee ID, does not have to be unique.",
                        "title": "Employee Id",
                        "type": "string"
                    },
                    "employee_title": {
                        "description": "The title of employee.",
                        "title": "Employee Title",
                        "type": "string"
                    },
                    "employee_type": {
                        "description": "The type of employee.",
                        "title": "Employee Type",
                        "type": "string"
                    },
                    "external_id": {
                        "description": "A unique identifier managed externally provided by the consumer.",
                        "title": "External Id",
                        "type": "string"
                    },
                    "first_name": {
                        "description": "The first name of the user.",
                        "title": "First Name",
                        "type": "string"
                    },
                    "last_name": {
                        "description": "The last name of the user.",
                        "title": "Last Name",
                        "type": "string"
                    },
                    "middle_name": {
                        "description": "The middle name of the user.",
                        "title": "Middle Name",
                        "type": "string"
                    },
                    "phone": {
                        "description": "The main phone number of a user, E.164 format preferred.",
                        "title": "Phone",
                        "type": "string"
                    },
                    "user_id": {
                        "default": "",
                        "description": "The unique identifier of the user managed by Verkada.",
                        "title": "User Id",
                        "type": "string"
                    }
                },
                "title": "UpdateUserResponse",
                "type": "object"
            },
            "UploadLicensePlateCSVBody": {
                "additionalProperties": false,
                "properties": {
                    "file": {
                        "default": "",
                        "description": "The csv file containing license plates to be added to the License Plate of Interest list.            The column headers for the csv file should be \"License Plate\", \"Name\" for creating LPOIs.            The column headers for the csv file should be \"License Plate\" for deleting LPOIs.",
                        "title": "File",
                        "type": "string"
                    }
                },
                "title": "UploadLicensePlateCSVBody",
                "type": "object"
            },
            "UploadProfilePhotoBody": {
                "properties": {
                    "file": {
                        "default": "",
                        "description": "Profile photo file path (formatted @/<image-path>)",
                        "title": "File",
                        "type": "string"
                    }
                },
                "title": "UploadProfilePhotoBody",
                "type": "object"
            },
            "UploadProfilePhotoQuery": {
                "properties": {
                    "external_id": {
                        "description": "A unique identifier managed externally provided by the customer.",
                        "title": "External Id",
                        "type": "string"
                    },
                    "overwrite": {
                        "default": false,
                        "description": "Whether to overwrite the existing profile photo.",
                        "title": "Overwrite",
                        "type": "boolean"
                    },
                    "user_id": {
                        "description": "The unique identifier of the user managed by Verkada.",
                        "format": "uuid",
                        "title": "User Id",
                        "type": "string"
                    }
                },
                "title": "UploadProfilePhotoQuery",
                "type": "object"
            },
            "UserInfo": {
                "description": "User information for access events",
                "properties": {
                    "email": {
                        "description": "Email address of the user",
                        "title": "Email",
                        "type": "string"
                    },
                    "first_name": {
                        "description": "First name of the user",
                        "title": "First Name",
                        "type": "string"
                    },
                    "last_name": {
                        "description": "Last name of the user",
                        "title": "Last Name",
                        "type": "string"
                    },
                    "name": {
                        "description": "Full name of the user",
                        "title": "Name",
                        "type": "string"
                    },
                    "phone": {
                        "description": "Phone number of the user",
                        "title": "Phone",
                        "type": "string"
                    },
                    "user_id": {
                        "description": "Unique identifier of the user",
                        "title": "User Id",
                        "type": "string"
                    }
                },
                "title": "UserInfo",
                "type": "object"
            },
            "VAuthApiKeyRequest": {
                "properties": {
                    "accessible_access_sites": {
                        "description": "Comma separated list of access sites which the API key has access to",
                        "items": {
                            "type": "string"
                        },
                        "title": "Accessible Access Sites",
                        "type": "array"
                    },
                    "accessible_cameras": {
                        "description": "Comma separated list of cameras which the API key has access to",
                        "items": {
                            "type": "string"
                        },
                        "title": "Accessible Cameras",
                        "type": "array"
                    },
                    "accessible_sites": {
                        "description": "Comma separated list of sites which the API key has access to",
                        "items": {
                            "type": "string"
                        },
                        "title": "Accessible Sites",
                        "type": "array"
                    },
                    "api_key_name": {
                        "title": "Api Key Name",
                        "type": "string"
                    },
                    "expires_at": {
                        "title": "Expires At",
                        "type": "integer"
                    },
                    "roles": {
                        "items": {
                            "$ref": "#/components/schemas/GranularApiKeyRoles"
                        },
                        "type": "array"
                    }
                },
                "required": [
                    "api_key_name",
                    "roles",
                    "expires_at"
                ],
                "title": "VAuthApiKeyRequest",
                "type": "object"
            },
            "ValidatedDoorExceptionV1": {
                "description": "Schema for the Door Exception with validation.",
                "properties": {
                    "all_day_default": {
                        "default": false,
                        "description": "Bool value specifying if Exception is an All Day Default. If <code>TRUE</code>, then:\n- <code>door_status</code> must be set to <code>access_controlled</code>\n- <code>start_time</code> and <code>end_time</code> will automatically be set to <code>00:00:00</code> and <code>23:59:59</code>, respectively. Different values should not be provided.\n- <code>first_person_in</code> and <code>double_badge</code> must be <code>FALSE</code>",
                        "title": "All Day Default",
                        "type": "boolean"
                    },
                    "calendar_id": {
                        "default": "",
                        "description": "Unique ID of the Door Exception Calendar that this Exception belongs to.",
                        "title": "Calendar Id",
                        "type": "string"
                    },
                    "date": {
                        "description": "Date of the Door Exception formatted as <code>YYYY-MM-DD</code> (according to ISO 8601).",
                        "title": "Date",
                        "type": "string"
                    },
                    "door_exception_id": {
                        "default": "",
                        "description": "The unique ID of the Door Exception.",
                        "title": "Door Exception Id",
                        "type": "string"
                    },
                    "door_status": {
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/DoorStatusEnum"
                            }
                        ],
                        "default": "",
                        "description": "The door status that this Exception should apply to all doors assigned to its Door Exception Calendar.\n\nPossible values are:\n- <code>locked</code>\n- <code>card_and_code</code>\n- <code>access_controlled</code>\n- <code>unlocked</code>"
                    },
                    "double_badge": {
                        "default": false,
                        "description": "Bool value specifying if the Double Badge setting should be enabled for relevant doors. If <code>TRUE</code>, <code>door_status</code> must be set to <code>access_controlled</code>.\n\nBy default, all users with access to relevant doors will be allowed to double badge.",
                        "title": "Double Badge",
                        "type": "boolean"
                    },
                    "double_badge_group_ids": {
                        "description": "List of IDs for Access Groups that users must be a member of to be allowed to double badge on relevant doors.\n\n<code>double_badge</code> must also be set to <code>TRUE</code> if value is provided.",
                        "items": {
                            "type": "string"
                        },
                        "title": "Double Badge Group Ids",
                        "type": "array"
                    },
                    "end_time": {
                        "description": "End time of the Door Exception formatted as <code>hh:mm</code> (according to ISO 8601).",
                        "format": "time",
                        "title": "End Time",
                        "type": "string"
                    },
                    "first_person_in": {
                        "default": false,
                        "description": "Bool value specifying if the First Person In setting should be enabled for relevant doors. If <code>TRUE</code>, <code>door_status</code> must be set to <code>card_and_code</code>, <code>access_controlled</code>, or <code>unlocked</code>.",
                        "title": "First Person In",
                        "type": "boolean"
                    },
                    "first_person_in_group_ids": {
                        "description": "List of IDs for Access Groups including supervisors used for First Person In mode.\n\n<code>first_person_in</code> must also be set to <code>TRUE</code> if this value is provided.",
                        "items": {
                            "type": "string"
                        },
                        "title": "First Person In Group Ids",
                        "type": "array"
                    },
                    "recurrence_rule": {
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/RecurrenceRule"
                            }
                        ],
                        "description": "A recurrence rule object specifying when the exception should repeat.",
                        "title": "Recurrence Rule"
                    },
                    "start_time": {
                        "description": "Start time of the Door Exception formatted as <code>hh:mm</code> (according to ISO 8601).",
                        "format": "time",
                        "title": "Start Time",
                        "type": "string"
                    }
                },
                "required": [
                    "date",
                    "start_time",
                    "end_time"
                ],
                "title": "ValidatedDoorExceptionV1",
                "type": "object"
            },
            "VideoTaggingEventGetRequestV1": {
                "properties": {
                    "camera_id": {
                        "description": "The unique identifier of the camera.",
                        "title": "Camera Id",
                        "type": "string"
                    },
                    "event_type_uid": {
                        "description": "The unique identifier of the event type.",
                        "title": "Event Type Uid",
                        "type": "string"
                    },
                    "time_ms": {
                        "description": "The event epoch time in milliseconds.",
                        "title": "Time Ms",
                        "type": "integer"
                    }
                },
                "required": [
                    "camera_id",
                    "time_ms",
                    "event_type_uid"
                ],
                "title": "VideoTaggingEventGetRequestV1",
                "type": "object"
            },
            "VideoTaggingEventListV1": {
                "additionalProperties": false,
                "properties": {
                    "events": {
                        "description": "A list of events.",
                        "items": {
                            "$ref": "#/components/schemas/VideoTaggingEventV1"
                        },
                        "title": "Events",
                        "type": "array"
                    },
                    "next_token": {
                        "description": "Next token for pagination.",
                        "title": "Next Token",
                        "type": "integer"
                    }
                },
                "title": "VideoTaggingEventListV1",
                "type": "object"
            },
            "VideoTaggingEventPostBodyRequestV1": {
                "properties": {
                    "attributes": {
                        "description": "List of event attributes.",
                        "title": "Attributes",
                        "type": "object"
                    },
                    "camera_id": {
                        "description": "The unique identifier of the camera.",
                        "title": "Camera Id",
                        "type": "string"
                    },
                    "event_type_uid": {
                        "description": "The unique identifier of the event type.",
                        "title": "Event Type Uid",
                        "type": "string"
                    },
                    "flagged": {
                        "default": false,
                        "description": "Whether or not an event is flagged.",
                        "title": "Flagged",
                        "type": "boolean"
                    },
                    "time_ms": {
                        "description": "The event epoch time in milliseconds.",
                        "title": "Time Ms",
                        "type": "integer"
                    }
                },
                "required": [
                    "camera_id",
                    "time_ms",
                    "event_type_uid"
                ],
                "title": "VideoTaggingEventPostBodyRequestV1",
                "type": "object"
            },
            "VideoTaggingEventSearchRequestV1": {
                "properties": {
                    "attribute_filters": {
                        "default": [],
                        "description": "List of search filters.",
                        "items": {
                            "$ref": "#/components/schemas/AttributeFilter"
                        },
                        "title": "Attribute Filters",
                        "type": "array"
                    },
                    "camera_ids": {
                        "description": "List of unique identifiers of cameras",
                        "items": {
                            "type": "string"
                        },
                        "title": "Camera Ids",
                        "type": "array"
                    },
                    "end_time_ms": {
                        "description": "Query end epoch time in milliseconds.",
                        "title": "End Time Ms",
                        "type": "integer"
                    },
                    "event_type_uid": {
                        "description": "The unique identifier of the event type.",
                        "title": "Event Type Uid",
                        "type": "string"
                    },
                    "flagged": {
                        "description": "Whether or not an event is flagged.",
                        "title": "Flagged",
                        "type": "boolean"
                    },
                    "keywords": {
                        "default": [],
                        "description": "List of search keywords.",
                        "items": {
                            "type": "string"
                        },
                        "title": "Keywords",
                        "type": "array"
                    },
                    "start_time_ms": {
                        "description": "Query start epoch time in milliseconds.",
                        "title": "Start Time Ms",
                        "type": "integer"
                    }
                },
                "title": "VideoTaggingEventSearchRequestV1",
                "type": "object"
            },
            "VideoTaggingEventTypeListRequestV1": {
                "properties": {
                    "event_type_uid": {
                        "description": "The unique identifier of the event type.",
                        "title": "Event Type Uid",
                        "type": "string"
                    },
                    "name": {
                        "description": "The name of the event type.",
                        "title": "Name",
                        "type": "string"
                    }
                },
                "title": "VideoTaggingEventTypeListRequestV1",
                "type": "object"
            },
            "VideoTaggingEventTypeListV1": {
                "additionalProperties": false,
                "properties": {
                    "event_types": {
                        "description": "A list of event types.",
                        "items": {
                            "$ref": "#/components/schemas/VideoTaggingEventTypeV1"
                        },
                        "title": "Event Types",
                        "type": "array"
                    }
                },
                "title": "VideoTaggingEventTypeListV1",
                "type": "object"
            },
            "VideoTaggingEventTypeModifyQueryRequestV1": {
                "properties": {
                    "event_type_uid": {
                        "description": "The unique identifier of the event type.",
                        "title": "Event Type Uid",
                        "type": "string"
                    }
                },
                "required": [
                    "event_type_uid"
                ],
                "title": "VideoTaggingEventTypeModifyQueryRequestV1",
                "type": "object"
            },
            "VideoTaggingEventTypePostBodyRequestV1": {
                "properties": {
                    "event_schema": {
                        "description": "The schema of the event type.",
                        "title": "Event Schema",
                        "type": "object"
                    },
                    "name": {
                        "description": "The name of the event type.",
                        "title": "Name",
                        "type": "string"
                    }
                },
                "required": [
                    "name",
                    "event_schema"
                ],
                "title": "VideoTaggingEventTypePostBodyRequestV1",
                "type": "object"
            },
            "VideoTaggingEventTypeV1": {
                "additionalProperties": false,
                "example": {
                    "event_schema": {
                        "cashier": "string"
                    },
                    "event_type_uid": "0a5b38d4-0308-4274-99b3-2b2f40d40deb",
                    "name": "purchase",
                    "org_id": "0a5b38d4-0308-4274-99b3-2b2f40d40deb"
                },
                "properties": {
                    "event_schema": {
                        "description": "The schema of the event type.",
                        "title": "Event Schema",
                        "type": "object"
                    },
                    "event_type_uid": {
                        "description": "The unique identifier of the event type.",
                        "title": "Event Type Uid",
                        "type": "string"
                    },
                    "name": {
                        "description": "The name of the event type.",
                        "title": "Name",
                        "type": "string"
                    },
                    "org_id": {
                        "description": "The unique identifier of the organization.",
                        "title": "Org Id",
                        "type": "string"
                    }
                },
                "required": [
                    "org_id",
                    "event_type_uid",
                    "name",
                    "event_schema"
                ],
                "title": "VideoTaggingEventTypeV1",
                "type": "object"
            },
            "VideoTaggingEventV1": {
                "additionalProperties": false,
                "example": {
                    "attributes": {
                        "cashier": "john"
                    },
                    "camera_id": "0a5b38d4-0308-4274-99b3-2b2f40d40deb",
                    "event_type_uid": "0a5b38d4-0308-4274-99b3-2b2f40d40deb",
                    "flagged": false,
                    "org_id": "0a5b38d4-0308-4274-99b3-2b2f40d40deb",
                    "time_ms": 123455
                },
                "properties": {
                    "attributes": {
                        "description": "list of event attributes.",
                        "title": "Attributes",
                        "type": "object"
                    },
                    "camera_id": {
                        "description": "The unique identifier of the camera.",
                        "title": "Camera Id",
                        "type": "string"
                    },
                    "event_type_uid": {
                        "description": "The unique identifier of the event type.",
                        "title": "Event Type Uid",
                        "type": "string"
                    },
                    "flagged": {
                        "default": false,
                        "description": "Whether or not an event is flagged.",
                        "title": "Flagged",
                        "type": "boolean"
                    },
                    "org_id": {
                        "description": "The unique identifier of the organization.",
                        "title": "Org Id",
                        "type": "string"
                    },
                    "time_ms": {
                        "description": "The event epoch time in milliseconds.",
                        "title": "Time Ms",
                        "type": "integer"
                    }
                },
                "required": [
                    "org_id",
                    "camera_id",
                    "time_ms",
                    "event_type_uid"
                ],
                "title": "VideoTaggingEventV1",
                "type": "object"
            },
            "ViewingStationDevice": {
                "additionalProperties": false,
                "description": "Detailed information about a Viewing Station",
                "properties": {
                    "app_version": {
                        "description": "The version of the Viewing Station application",
                        "title": "App Version",
                        "type": "string"
                    },
                    "claimed_serial_number": {
                        "description": "The serial number of the Viewing Station",
                        "title": "Claimed Serial Number",
                        "type": "string"
                    },
                    "device_id": {
                        "description": "The unique identifier of the Viewing Station",
                        "format": "uuid",
                        "title": "Device Id",
                        "type": "string"
                    },
                    "ip_address": {
                        "description": "The IP address of the Viewing Station",
                        "title": "Ip Address",
                        "type": "string"
                    },
                    "last_seen_at": {
                        "description": "The last time the Viewing Station was online in Unix epoch format",
                        "title": "Last Seen At",
                        "type": "string"
                    },
                    "last_status": {
                        "description": "The last status of the Viewing Station. Possible values include \"online\" and \"offline.\"",
                        "title": "Last Status",
                        "type": "string"
                    },
                    "location": {
                        "description": "The location of the Viewing Station",
                        "title": "Location",
                        "type": "string"
                    },
                    "location_lat": {
                        "description": "The latitude of the Viewing Station location",
                        "title": "Location Lat",
                        "type": "number"
                    },
                    "location_lon": {
                        "description": "The longitude of the Viewing Station location",
                        "title": "Location Lon",
                        "type": "number"
                    },
                    "name": {
                        "description": "The name of the Viewing Station",
                        "title": "Name",
                        "type": "string"
                    },
                    "site_id": {
                        "description": "The unique identifier of the site that the Viewing Station belongs to",
                        "format": "uuid",
                        "title": "Site Id",
                        "type": "string"
                    },
                    "timezone": {
                        "description": "The timezone of the Viewing Station",
                        "title": "Timezone",
                        "type": "string"
                    }
                },
                "required": [
                    "claimed_serial_number",
                    "device_id",
                    "last_status"
                ],
                "title": "ViewingStationDevice",
                "type": "object"
            },
            "ViewingStationDevicesRequest": {
                "description": "A request for information about all Viewing Stations in an organization",
                "properties": {},
                "title": "ViewingStationDevicesRequest",
                "type": "object"
            },
            "ViewingStationDevicesResponse": {
                "additionalProperties": false,
                "description": "Detailed information about the Viewing Stations in an organization",
                "properties": {
                    "devices": {
                        "description": "Detailed information about Viewing Station devices.",
                        "items": {
                            "$ref": "#/components/schemas/ViewingStationDevice"
                        },
                        "title": "Devices",
                        "type": "array"
                    }
                },
                "required": [
                    "devices"
                ],
                "title": "ViewingStationDevicesResponse",
                "type": "object"
            },
            "VisitRequest": {
                "properties": {
                    "end_time": {
                        "description": "The end of the time range for requested visits. Formatted as a UNIX timestamp. Must be at most one day away from start_time.",
                        "title": "End Time",
                        "type": "integer"
                    },
                    "page_size": {
                        "default": 100,
                        "description": "The number of items returned in a single response.\nDefault is 100. Max is 200.",
                        "exclusiveMinimum": true,
                        "maximum": 200,
                        "minimum": 0,
                        "title": "Page Size",
                        "type": "integer"
                    },
                    "page_token": {
                        "description": "The pagination token used to fetch the next page of results.",
                        "title": "Page Token",
                        "type": "string"
                    },
                    "site_id": {
                        "description": "The unique identifier of the Guest site. Valid sites can be retrieved with the Guest Site API.",
                        "format": "uuid",
                        "title": "Site Id",
                        "type": "string"
                    },
                    "start_time": {
                        "description": "The start of the time range for requested visits. Formatted as a UNIX timestamp. Must be at most one day away from end_time.",
                        "title": "Start Time",
                        "type": "integer"
                    }
                },
                "required": [
                    "site_id",
                    "start_time",
                    "end_time"
                ],
                "title": "VisitRequest",
                "type": "object"
            },
            "VisitResponse": {
                "additionalProperties": false,
                "properties": {
                    "visits": {
                        "items": {
                            "$ref": "#/components/schemas/VisitResponseItem"
                        },
                        "title": "Visits",
                        "type": "array"
                    }
                },
                "required": [
                    "visits"
                ],
                "title": "VisitResponse",
                "type": "object"
            },
            "VisitResponseItem": {
                "properties": {
                    "approval_status": {
                        "description": "The overall approval status of the visit - factoring in host approvals, questionnaires, and security screens. Can be one of: <code>PENDING</code> (host approval or background check not yet complete), <code>APPROVED</code> (all steps passed), or <code>DENIED</code> (visitor was denied entry due to one or more failures).",
                        "title": "Approval Status",
                        "type": "string"
                    },
                    "check_in_time": {
                        "description": "Timestamp at which the visitor checked in. Only present if the visit is successful (as opposed to denied or pending).",
                        "title": "Check In Time",
                        "type": "integer"
                    },
                    "deleted": {
                        "description": "True if the visit has been deleted within Command, false otherwise.",
                        "title": "Deleted",
                        "type": "boolean"
                    },
                    "device_name": {
                        "description": "Name of the tablet that checked in the visit.",
                        "title": "Device Name",
                        "type": "string"
                    },
                    "guest": {
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/GuestResponseItem"
                            }
                        ],
                        "description": "The guest metadata associated with this visit.",
                        "title": "Guest"
                    },
                    "host": {
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/HostResponseItem"
                            }
                        ],
                        "description": "The host metadata associated with this visit.",
                        "title": "Host"
                    },
                    "host_approval_status": {
                        "description": "Only present if the visit required host approval. Can be one of: <code>APPROVED</code> (approved by host), <code>PENDING</code> (host hasn't responded yet) or <code>DENIED</code> (denied by host).",
                        "title": "Host Approval Status",
                        "type": "string"
                    },
                    "hosts": {
                        "description": "The host metadata associated with this visit.",
                        "items": {
                            "$ref": "#/components/schemas/HostResponseItem"
                        },
                        "title": "Hosts",
                        "type": "array"
                    },
                    "is_contactless": {
                        "description": "True if the visit was made via the web, false if the visit was made via a tablet.",
                        "title": "Is Contactless",
                        "type": "boolean"
                    },
                    "next_page_token": {
                        "description": "The pagination token used to fetch the next page of results.",
                        "title": "Next Page Token",
                        "type": "string"
                    },
                    "open_ended_responses": {
                        "description": "Any open-ended question responses associated with this visit.",
                        "items": {
                            "$ref": "#/components/schemas/OEQResponseItem"
                        },
                        "title": "Open Ended Responses",
                        "type": "array"
                    },
                    "questionnaires": {
                        "description": "Any questionnaire responses associated with this visit.",
                        "items": {
                            "$ref": "#/components/schemas/QuestionnaireResponseItem"
                        },
                        "title": "Questionnaires",
                        "type": "array"
                    },
                    "security_screen_status": {
                        "description": "Only present if the visit required a security screen. Can be one of: <code>NOT_STARTED</code> (visit submitted, security screen not yet submitted to provider), <code>START</code> (visitor information submitted to provider), <code>NO_MATCH</code> (screening complete, no match found), <code>NEEDS_REVIEW</code> (screening found potential match, needs human verification), <code>CONFIRMED_MATCH</code> (user-confirmed match) <code>ERROR</code> (error with security screen provider) or <code>CANCELED</code> (security screen not completed due to cancellation or time-out).",
                        "title": "Security Screen Status",
                        "type": "string"
                    },
                    "sign_out_time": {
                        "description": "Timestamp at which the visitor signed out.",
                        "title": "Sign Out Time",
                        "type": "integer"
                    },
                    "signatures": {
                        "description": "Any document signatures associated with this visit.",
                        "items": {
                            "$ref": "#/components/schemas/SignatureResponseItem"
                        },
                        "title": "Signatures",
                        "type": "array"
                    },
                    "site_id": {
                        "description": "The unique identifier of the Guest site.",
                        "format": "uuid",
                        "title": "Site Id",
                        "type": "string"
                    },
                    "visit_id": {
                        "description": "The unique identifier of the visit.",
                        "format": "uuid",
                        "title": "Visit Id",
                        "type": "string"
                    },
                    "visit_type": {
                        "description": "Name of the visitor type the guest checked in as.",
                        "title": "Visit Type",
                        "type": "string"
                    }
                },
                "required": [
                    "visit_id",
                    "site_id",
                    "check_in_time",
                    "sign_out_time",
                    "is_contactless",
                    "deleted",
                    "visit_type",
                    "device_name",
                    "approval_status",
                    "host_approval_status",
                    "security_screen_status",
                    "open_ended_responses",
                    "questionnaires",
                    "signatures"
                ],
                "title": "VisitResponseItem",
                "type": "object"
            },
            "WebhookConfigDeleteRequest": {
                "properties": {
                    "webhook_id": {
                        "title": "Webhook Id",
                        "type": "string"
                    }
                },
                "required": [
                    "webhook_id"
                ],
                "title": "WebhookConfigDeleteRequest",
                "type": "object"
            },
            "WebhookConfigItem": {
                "additionalProperties": false,
                "description": "camelCase for frontend API response",
                "properties": {
                    "sharedSecret": {
                        "title": "Sharedsecret",
                        "type": "string"
                    },
                    "webhookId": {
                        "title": "Webhookid",
                        "type": "string"
                    },
                    "webhookName": {
                        "title": "Webhookname",
                        "type": "string"
                    },
                    "webhookScopes": {
                        "items": {
                            "$ref": "#/components/schemas/WebhookScope"
                        },
                        "type": "array"
                    },
                    "webhookUrl": {
                        "title": "Webhookurl",
                        "type": "string"
                    }
                },
                "required": [
                    "webhookId",
                    "webhookUrl",
                    "sharedSecret"
                ],
                "title": "WebhookConfigItem",
                "type": "object"
            },
            "WebhookConfigItemDelete": {
                "additionalProperties": false,
                "description": "camelCase for frontend API response",
                "properties": {
                    "webhookId": {
                        "title": "Webhookid",
                        "type": "string"
                    }
                },
                "required": [
                    "webhookId"
                ],
                "title": "WebhookConfigItemDelete",
                "type": "object"
            },
            "WebhookConfigPostRequest": {
                "properties": {
                    "shared_secret": {
                        "title": "Shared Secret",
                        "type": "string"
                    },
                    "webhook_name": {
                        "title": "Webhook Name",
                        "type": "string"
                    },
                    "webhook_scopes": {
                        "items": {
                            "$ref": "#/components/schemas/WebhookScope"
                        },
                        "type": "array"
                    },
                    "webhook_url": {
                        "format": "uri",
                        "maxLength": 65536,
                        "minLength": 1,
                        "title": "Webhook Url",
                        "type": "string"
                    }
                },
                "required": [
                    "webhook_url",
                    "shared_secret"
                ],
                "title": "WebhookConfigPostRequest",
                "type": "object"
            },
            "WebhookConfigsResponse": {
                "additionalProperties": false,
                "description": "camelCase for frontend API response",
                "properties": {
                    "webhookConfigs": {
                        "items": {
                            "$ref": "#/components/schemas/WebhookConfigItem"
                        },
                        "title": "Webhookconfigs",
                        "type": "array"
                    }
                },
                "required": [
                    "webhookConfigs"
                ],
                "title": "WebhookConfigsResponse",
                "type": "object"
            },
            "WebhookScope": {
                "description": "An enumeration.",
                "enum": [
                    "CAMERA_EVENTS",
                    "ACCESS_EVENTS",
                    "SENSOR_EVENTS",
                    "ALARM_EVENTS",
                    "LPR"
                ],
                "title": "WebhookScope",
                "type": "string"
            },
            "WeekDay": {
                "description": "Enum for days of the week.",
                "enum": [
                    "SU",
                    "MO",
                    "TU",
                    "WE",
                    "TH",
                    "FR",
                    "SA"
                ],
                "title": "WeekDay",
                "type": "string"
            },
            "WeekdayEnum": {
                "description": "An enumeration.",
                "enum": [
                    "MO",
                    "TU",
                    "WE",
                    "TH",
                    "FR",
                    "SA",
                    "SU"
                ],
                "title": "WeekdayEnum",
                "type": "string"
            },
            "Widget": {
                "additionalProperties": false,
                "properties": {
                    "conversion_data": {
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/CCRData"
                            }
                        ],
                        "description": "Contains a map for helix event counts, occupancy in counts, and conversion rates.",
                        "title": "Conversion Data"
                    },
                    "helix_data": {
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/HelixData"
                            }
                        ],
                        "description": "Contains a map for aggregated helix data.",
                        "title": "Helix Data"
                    },
                    "occupancy_data": {
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/OccupancyData"
                            }
                        ],
                        "description": "Contains a map for in counts, out counts, and net occupancy.",
                        "title": "Occupancy Data"
                    },
                    "queue_data": {
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/QueueData"
                            }
                        ],
                        "description": "Contains a map for max queue length, average queue length, max wait time, and average wait time.",
                        "title": "Queue Data"
                    },
                    "widget_id": {
                        "description": "The unique identifier of the widget.",
                        "title": "Widget Id",
                        "type": "string"
                    },
                    "widget_name": {
                        "description": "The name of the widget.",
                        "title": "Widget Name",
                        "type": "string"
                    },
                    "widget_type": {
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/WidgetType"
                            }
                        ],
                        "description": "The type of the widget."
                    }
                },
                "required": [
                    "widget_id",
                    "widget_name",
                    "widget_type"
                ],
                "title": "Widget",
                "type": "object"
            },
            "WidgetType": {
                "description": "An enumeration.",
                "enum": [
                    "occupancy",
                    "helix",
                    "conversion",
                    "queue"
                ],
                "title": "WidgetType",
                "type": "string"
            }
        },
        "securitySchemes": {
            "ApiKey": {
                "description": "Legacy API Key acquired from Command",
                "in": "header",
                "name": "x-api-key",
                "type": "apiKey"
            },
            "ApiToken": {
                "description": "API Token acquired from API Login",
                "in": "header",
                "name": "x-verkada-auth",
                "type": "apiKey"
            },
            "GetToken": {
                "description": "API Key acquired from Command",
                "in": "header",
                "name": "x-api-key",
                "type": "apiKey"
            }
        }
    },
    "info": {
        "title": "Verkada API",
        "version": "v1"
    },
    "openapi": "3.0.3",
    "paths": {
        "/access/v1/access_groups": {
            "get": {
                "description": "Retrieves a list of all access groups in a given organization. The response is a list of Access Group Objects.",
                "operationId": "getAccessGroupsViewV1",
                "parameters": [],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/AccessGroupsResponseV1"
                                }
                            }
                        },
                        "description": "OK"
                    }
                },
                "summary": "Get All Access Groups",
                "tags": [
                    "Access Groups"
                ]
            }
        },
        "/access/v1/access_groups/group": {
            "delete": {
                "description": "Delete an access group with the given group identifier within the given organization.",
                "operationId": "deleteAccessGroupViewV1",
                "parameters": [
                    {
                        "in": "query",
                        "name": "group_id",
                        "required": true,
                        "schema": {
                            "description": "The unique identifier of the Access Group managed by Verkada.",
                            "format": "uuid",
                            "title": "Group Id",
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "ok"
                    }
                },
                "summary": "Delete Access Group",
                "tags": [
                    "Access Groups"
                ]
            },
            "get": {
                "description": "Retrieves an access group specified by its Verkada-defined unique identifier(Group ID). The response is the Access Group Metadata Object for the desired Access Group.",
                "operationId": "getAccessGroupViewV1",
                "parameters": [
                    {
                        "in": "query",
                        "name": "group_id",
                        "required": true,
                        "schema": {
                            "description": "The unique identifier of the Access Group managed by Verkada.",
                            "format": "uuid",
                            "title": "Group Id",
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/AccessGroupObjectMetaResponseV1"
                                }
                            }
                        },
                        "description": "OK"
                    }
                },
                "summary": "Get Access Group",
                "tags": [
                    "Access Groups"
                ]
            },
            "post": {
                "description": "Create an access group within the given organization using the given name. The name of\nthe access group must be unique within the organization. This returns the Access Group Metadata Object for the created Access Group.",
                "operationId": "postAccessGroupViewV1",
                "parameters": [],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/PostAccessGroupRequestBodyV1"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/AccessGroupObjectMetaResponseV1"
                                }
                            }
                        },
                        "description": "OK"
                    }
                },
                "summary": "Create Access Group",
                "tags": [
                    "Access Groups"
                ]
            }
        },
        "/access/v1/access_groups/group/user": {
            "delete": {
                "description": "Remove an access user to an access group with the Verkada defined group ID and the user defined either by their User ID or their External ID.\nBoth the group ID and the User ID(or External ID) are passed as query parameter in the URL.",
                "operationId": "deleteAccessGroupUserViewV1",
                "parameters": [
                    {
                        "in": "query",
                        "name": "group_id",
                        "required": true,
                        "schema": {
                            "description": "The unique identifier of the Access Group managed by Verkada.",
                            "format": "uuid",
                            "title": "Group Id",
                            "type": "string"
                        }
                    },
                    {
                        "in": "query",
                        "name": "external_id",
                        "required": false,
                        "schema": {
                            "description": "A unique identifier managed externally provided by the customer.",
                            "title": "External Id",
                            "type": "string"
                        }
                    },
                    {
                        "in": "query",
                        "name": "user_id",
                        "required": false,
                        "schema": {
                            "description": "The unique identifier of the user managed by Verkada.",
                            "format": "uuid",
                            "title": "User Id",
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "ok"
                    }
                },
                "summary": "Remove User from Access Group",
                "tags": [
                    "Access Groups"
                ]
            },
            "put": {
                "description": "Add an access user to an access group with the Verkada defined group ID and either the user defined External ID or the Verkada defined user ID.\nThe group ID is passed in as query parameter in the URL. The external ID or Verkada user ID(but not both) is passed in the json object in the body of the request.",
                "operationId": "putAccessGroupUserViewV1",
                "parameters": [
                    {
                        "in": "query",
                        "name": "group_id",
                        "required": true,
                        "schema": {
                            "description": "The unique identifier of the Access Group managed by Verkada.",
                            "format": "uuid",
                            "title": "Group Id",
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/PutAccessGroupRequestBodyV1"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/AccessGroupAddUserResponseV1"
                                }
                            }
                        },
                        "description": "OK"
                    }
                },
                "summary": "Add User to Access Group",
                "tags": [
                    "Access Groups"
                ]
            }
        },
        "/access/v1/access_users": {
            "get": {
                "description": "This returns a list of All Access User Objects for all access members in an organization. The list is contained in a json as the value to the key \"access_members\".\nThe information includes the Verkada-defined user_id, the organization-defined employee_id, the access users's email, and the access user's full name.",
                "operationId": "getAccessMembersViewV1",
                "parameters": [],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseAccessMemberResponseListV1"
                                }
                            }
                        },
                        "description": "OK"
                    }
                },
                "summary": "Get All Access Users",
                "tags": [
                    "Access User Information"
                ]
            }
        },
        "/access/v1/access_users/user": {
            "get": {
                "description": "Given the Verkada created User Id, user defined External Id, email address, or employee ID, retrieve the Access Object Information for the specified user.",
                "operationId": "getAccessUserViewV1",
                "parameters": [
                    {
                        "in": "query",
                        "name": "user_id",
                        "required": false,
                        "schema": {
                            "description": "The unique identifier of the user managed by Verkada.",
                            "format": "uuid",
                            "title": "User Id",
                            "type": "string"
                        }
                    },
                    {
                        "in": "query",
                        "name": "external_id",
                        "required": false,
                        "schema": {
                            "description": "A unique identifier managed externally provided by the customer.",
                            "title": "External Id",
                            "type": "string"
                        }
                    },
                    {
                        "in": "query",
                        "name": "email",
                        "required": false,
                        "schema": {
                            "description": "The email address of the user.",
                            "title": "Email",
                            "type": "string"
                        }
                    },
                    {
                        "in": "query",
                        "name": "employee_id",
                        "required": false,
                        "schema": {
                            "description": "The organization-defined employee ID of the user.",
                            "title": "Employee Id",
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/AccessInformationResponseV1"
                                }
                            }
                        },
                        "description": "OK"
                    }
                },
                "summary": "Get Access Information Object",
                "tags": [
                    "Access User Information"
                ]
            }
        },
        "/access/v1/access_users/user/ble/activate": {
            "put": {
                "description": "Given the user defined external ID or Verkada defined user ID (but not both), activate bluetooth unlock capability for a user. Response is updated Access Information Object.",
                "operationId": "putActivateBLEMethodViewV1",
                "parameters": [
                    {
                        "in": "query",
                        "name": "user_id",
                        "required": false,
                        "schema": {
                            "description": "The unique identifier of the user managed by Verkada.",
                            "format": "uuid",
                            "title": "User Id",
                            "type": "string"
                        }
                    },
                    {
                        "in": "query",
                        "name": "external_id",
                        "required": false,
                        "schema": {
                            "description": "A unique identifier managed externally provided by the customer.",
                            "title": "External Id",
                            "type": "string"
                        }
                    },
                    {
                        "in": "query",
                        "name": "email",
                        "required": false,
                        "schema": {
                            "description": "The email address of the user.",
                            "title": "Email",
                            "type": "string"
                        }
                    },
                    {
                        "in": "query",
                        "name": "employee_id",
                        "required": false,
                        "schema": {
                            "description": "The organization-defined employee ID of the user.",
                            "title": "Employee Id",
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/AccessInformationResponseV1"
                                }
                            }
                        },
                        "description": "OK"
                    }
                },
                "summary": "Activate BLE for Access User",
                "tags": [
                    "Access User Information"
                ]
            }
        },
        "/access/v1/access_users/user/ble/deactivate": {
            "put": {
                "description": "Given the user defined external ID or Verkada defined user ID (but not both), deactivate bluetooth unlock capability for a user. Response is updated Access Information Object.",
                "operationId": "putDeactivateBLEMethodViewV1",
                "parameters": [
                    {
                        "in": "query",
                        "name": "user_id",
                        "required": false,
                        "schema": {
                            "description": "The unique identifier of the user managed by Verkada.",
                            "format": "uuid",
                            "title": "User Id",
                            "type": "string"
                        }
                    },
                    {
                        "in": "query",
                        "name": "external_id",
                        "required": false,
                        "schema": {
                            "description": "A unique identifier managed externally provided by the customer.",
                            "title": "External Id",
                            "type": "string"
                        }
                    },
                    {
                        "in": "query",
                        "name": "email",
                        "required": false,
                        "schema": {
                            "description": "The email address of the user.",
                            "title": "Email",
                            "type": "string"
                        }
                    },
                    {
                        "in": "query",
                        "name": "employee_id",
                        "required": false,
                        "schema": {
                            "description": "The organization-defined employee ID of the user.",
                            "title": "Employee Id",
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/AccessInformationResponseV1"
                                }
                            }
                        },
                        "description": "OK"
                    }
                },
                "summary": "Deactivate BLE for Access User",
                "tags": [
                    "Access User Information"
                ]
            }
        },
        "/access/v1/access_users/user/end_date": {
            "put": {
                "description": "Given the user defined external ID or Verkada defined user ID (but not both), set the end date for an access users credentials to become invalid.\nAfter this time, all methods of access will be revoked. End date value will be passed as a parameter in a json payload. Returns the updated\nAccess Information Object.",
                "operationId": "putAccessEndDateViewV1",
                "parameters": [
                    {
                        "in": "query",
                        "name": "user_id",
                        "required": false,
                        "schema": {
                            "description": "The unique identifier of the user managed by Verkada.",
                            "format": "uuid",
                            "title": "User Id",
                            "type": "string"
                        }
                    },
                    {
                        "in": "query",
                        "name": "external_id",
                        "required": false,
                        "schema": {
                            "description": "A unique identifier managed externally provided by the customer.",
                            "title": "External Id",
                            "type": "string"
                        }
                    },
                    {
                        "in": "query",
                        "name": "email",
                        "required": false,
                        "schema": {
                            "description": "The email address of the user.",
                            "title": "Email",
                            "type": "string"
                        }
                    },
                    {
                        "in": "query",
                        "name": "employee_id",
                        "required": false,
                        "schema": {
                            "description": "The organization-defined employee ID of the user.",
                            "title": "Employee Id",
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/PutEndDateAccessUserRequestBodyV1"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/AccessInformationResponseV1"
                                }
                            }
                        },
                        "description": "OK"
                    }
                },
                "summary": "Set End Date for User",
                "tags": [
                    "Access User Information"
                ]
            }
        },
        "/access/v1/access_users/user/entry_code": {
            "delete": {
                "description": "Given the user defined external ID or Verkada defined user ID (but not both), remove the entry code of a user.\nReturns the updated access information object.",
                "operationId": "deleteAccessUserPinViewV1",
                "parameters": [
                    {
                        "in": "query",
                        "name": "user_id",
                        "required": false,
                        "schema": {
                            "description": "The unique identifier of the user managed by Verkada.",
                            "format": "uuid",
                            "title": "User Id",
                            "type": "string"
                        }
                    },
                    {
                        "in": "query",
                        "name": "external_id",
                        "required": false,
                        "schema": {
                            "description": "A unique identifier managed externally provided by the customer.",
                            "title": "External Id",
                            "type": "string"
                        }
                    },
                    {
                        "in": "query",
                        "name": "email",
                        "required": false,
                        "schema": {
                            "description": "The email address of the user.",
                            "title": "Email",
                            "type": "string"
                        }
                    },
                    {
                        "in": "query",
                        "name": "employee_id",
                        "required": false,
                        "schema": {
                            "description": "The organization-defined employee ID of the user.",
                            "title": "Employee Id",
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "ok"
                    }
                },
                "summary": "Remove Entry Code for User",
                "tags": [
                    "Access User Information"
                ]
            },
            "put": {
                "description": "Given the user defined external ID or Verkada defined user ID (but not both), set the entry code for a user. Pin code value will be passed as a parameter in a json payload.\nReturns the updated Access Information Object.",
                "operationId": "putAccessUserPinViewV1",
                "parameters": [
                    {
                        "in": "query",
                        "name": "user_id",
                        "required": false,
                        "schema": {
                            "description": "The unique identifier of the user managed by Verkada.",
                            "format": "uuid",
                            "title": "User Id",
                            "type": "string"
                        }
                    },
                    {
                        "in": "query",
                        "name": "external_id",
                        "required": false,
                        "schema": {
                            "description": "A unique identifier managed externally provided by the customer.",
                            "title": "External Id",
                            "type": "string"
                        }
                    },
                    {
                        "in": "query",
                        "name": "email",
                        "required": false,
                        "schema": {
                            "description": "The email address of the user.",
                            "title": "Email",
                            "type": "string"
                        }
                    },
                    {
                        "in": "query",
                        "name": "employee_id",
                        "required": false,
                        "schema": {
                            "description": "The organization-defined employee ID of the user.",
                            "title": "Employee Id",
                            "type": "string"
                        }
                    },
                    {
                        "in": "query",
                        "name": "override",
                        "required": false,
                        "schema": {
                            "default": false,
                            "description": "The flag that states whether or not the client wants to apply the given entry code to the given user even if the entry code is already in use by another user. This will reset the other user's entry code.",
                            "title": "Override",
                            "type": "boolean"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/PutEntryCodeAccessUserRequestBodyV1"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/AccessInformationResponseV1"
                                }
                            }
                        },
                        "description": "OK"
                    }
                },
                "summary": "Set Entry Code for User",
                "tags": [
                    "Access User Information"
                ]
            }
        },
        "/access/v1/access_users/user/pass/invite": {
            "post": {
                "description": "Given the user defined external ID or Verkada defined user ID (but not both), send out a Pass App invite.",
                "operationId": "postSendPassAppInviteViewV1",
                "parameters": [
                    {
                        "in": "query",
                        "name": "user_id",
                        "required": false,
                        "schema": {
                            "description": "The unique identifier of the user managed by Verkada.",
                            "format": "uuid",
                            "title": "User Id",
                            "type": "string"
                        }
                    },
                    {
                        "in": "query",
                        "name": "external_id",
                        "required": false,
                        "schema": {
                            "description": "A unique identifier managed externally provided by the customer.",
                            "title": "External Id",
                            "type": "string"
                        }
                    },
                    {
                        "in": "query",
                        "name": "email",
                        "required": false,
                        "schema": {
                            "description": "The email address of the user.",
                            "title": "Email",
                            "type": "string"
                        }
                    },
                    {
                        "in": "query",
                        "name": "employee_id",
                        "required": false,
                        "schema": {
                            "description": "The organization-defined employee ID of the user.",
                            "title": "Employee Id",
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/AccessInformationResponseV1"
                                }
                            }
                        },
                        "description": "OK"
                    }
                },
                "summary": "Send Pass App Invite for User",
                "tags": [
                    "Access User Information"
                ]
            }
        },
        "/access/v1/access_users/user/profile_photo": {
            "delete": {
                "description": "This deletes a profile photo for the specified user.",
                "operationId": "deleteProfilePhotoViewV1",
                "parameters": [
                    {
                        "in": "query",
                        "name": "user_id",
                        "required": false,
                        "schema": {
                            "description": "The unique identifier of the user managed by Verkada.",
                            "format": "uuid",
                            "title": "User Id",
                            "type": "string"
                        }
                    },
                    {
                        "in": "query",
                        "name": "external_id",
                        "required": false,
                        "schema": {
                            "description": "A unique identifier managed externally provided by the customer.",
                            "title": "External Id",
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiErrorModel"
                                }
                            }
                        },
                        "description": "Not Found"
                    }
                },
                "summary": "Delete Profile Photo",
                "tags": [
                    "Access User Information"
                ]
            },
            "get": {
                "description": "This retrieves a profile photo for the specified user.",
                "operationId": "getProfilePhotoViewV1",
                "parameters": [
                    {
                        "in": "query",
                        "name": "user_id",
                        "required": false,
                        "schema": {
                            "description": "The unique identifier of the user managed by Verkada.",
                            "format": "uuid",
                            "title": "User Id",
                            "type": "string"
                        }
                    },
                    {
                        "in": "query",
                        "name": "external_id",
                        "required": false,
                        "schema": {
                            "description": "A unique identifier managed externally provided by the customer.",
                            "title": "External Id",
                            "type": "string"
                        }
                    },
                    {
                        "in": "query",
                        "name": "original",
                        "required": false,
                        "schema": {
                            "default": false,
                            "description": "Whether to get the original or cropped image.",
                            "title": "Original",
                            "type": "boolean"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiErrorModel"
                                }
                            }
                        },
                        "description": "Not Found"
                    }
                },
                "summary": "Get Profile Photo",
                "tags": [
                    "Access User Information"
                ]
            },
            "put": {
                "description": "This uploads a profile photo for the specified user.",
                "operationId": "putProfilePhotoViewV1",
                "parameters": [
                    {
                        "in": "query",
                        "name": "user_id",
                        "required": false,
                        "schema": {
                            "description": "The unique identifier of the user managed by Verkada.",
                            "format": "uuid",
                            "title": "User Id",
                            "type": "string"
                        }
                    },
                    {
                        "in": "query",
                        "name": "external_id",
                        "required": false,
                        "schema": {
                            "description": "A unique identifier managed externally provided by the customer.",
                            "title": "External Id",
                            "type": "string"
                        }
                    },
                    {
                        "in": "query",
                        "name": "overwrite",
                        "required": false,
                        "schema": {
                            "default": false,
                            "description": "Whether to overwrite the existing profile photo.",
                            "title": "Overwrite",
                            "type": "boolean"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "multipart/form-data": {
                            "schema": {
                                "$ref": "#/components/schemas/UploadProfilePhotoBody"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "OK"
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiErrorModel"
                                }
                            }
                        },
                        "description": "Bad Request"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiErrorModel"
                                }
                            }
                        },
                        "description": "Not Found"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiErrorModel"
                                }
                            }
                        },
                        "description": "Conflict"
                    },
                    "413": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiErrorModel"
                                }
                            }
                        },
                        "description": "Request Entity Too Large"
                    },
                    "422": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiErrorModel"
                                }
                            }
                        },
                        "description": "Unprocessable Entity"
                    }
                },
                "summary": "Upload Profile Photo",
                "tags": [
                    "Access User Information"
                ]
            }
        },
        "/access/v1/access_users/user/remote_unlock/activate": {
            "put": {
                "description": "Given the user defined external ID or Verkada defined user ID (but not both), activate remote unlock capability for a user.\nReturns the updated Access Information Object.",
                "operationId": "putActivateRemoteUnlockViewV1",
                "parameters": [
                    {
                        "in": "query",
                        "name": "user_id",
                        "required": false,
                        "schema": {
                            "description": "The unique identifier of the user managed by Verkada.",
                            "format": "uuid",
                            "title": "User Id",
                            "type": "string"
                        }
                    },
                    {
                        "in": "query",
                        "name": "external_id",
                        "required": false,
                        "schema": {
                            "description": "A unique identifier managed externally provided by the customer.",
                            "title": "External Id",
                            "type": "string"
                        }
                    },
                    {
                        "in": "query",
                        "name": "email",
                        "required": false,
                        "schema": {
                            "description": "The email address of the user.",
                            "title": "Email",
                            "type": "string"
                        }
                    },
                    {
                        "in": "query",
                        "name": "employee_id",
                        "required": false,
                        "schema": {
                            "description": "The organization-defined employee ID of the user.",
                            "title": "Employee Id",
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/AccessInformationResponseV1"
                                }
                            }
                        },
                        "description": "OK"
                    }
                },
                "summary": "Activate Remote Unlock for User",
                "tags": [
                    "Access User Information"
                ]
            }
        },
        "/access/v1/access_users/user/remote_unlock/deactivate": {
            "put": {
                "description": "Given the user defined external ID or Verkada defined user ID (but not both), deactivate remote unlock capability for a user.\nReturns the updated Access Information Object.",
                "operationId": "putDeactivateRemoteUnlockViewV1",
                "parameters": [
                    {
                        "in": "query",
                        "name": "user_id",
                        "required": false,
                        "schema": {
                            "description": "The unique identifier of the user managed by Verkada.",
                            "format": "uuid",
                            "title": "User Id",
                            "type": "string"
                        }
                    },
                    {
                        "in": "query",
                        "name": "external_id",
                        "required": false,
                        "schema": {
                            "description": "A unique identifier managed externally provided by the customer.",
                            "title": "External Id",
                            "type": "string"
                        }
                    },
                    {
                        "in": "query",
                        "name": "email",
                        "required": false,
                        "schema": {
                            "description": "The email address of the user.",
                            "title": "Email",
                            "type": "string"
                        }
                    },
                    {
                        "in": "query",
                        "name": "employee_id",
                        "required": false,
                        "schema": {
                            "description": "The organization-defined employee ID of the user.",
                            "title": "Employee Id",
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/AccessInformationResponseV1"
                                }
                            }
                        },
                        "description": "OK"
                    }
                },
                "summary": "Deactivate Remote Unlock for User",
                "tags": [
                    "Access User Information"
                ]
            }
        },
        "/access/v1/access_users/user/start_date": {
            "put": {
                "description": "Given the user defined external ID or Verkada defined user ID (but not both), set the start date for an access users credentials to become valid.\nBefore this time, all methods of access specified for this access user will invalid. Start date value will be passed as a parameter in a json payload. Returns the updated\nAccess Information Object.",
                "operationId": "putAccessStartDateViewV1",
                "parameters": [
                    {
                        "in": "query",
                        "name": "user_id",
                        "required": false,
                        "schema": {
                            "description": "The unique identifier of the user managed by Verkada.",
                            "format": "uuid",
                            "title": "User Id",
                            "type": "string"
                        }
                    },
                    {
                        "in": "query",
                        "name": "external_id",
                        "required": false,
                        "schema": {
                            "description": "A unique identifier managed externally provided by the customer.",
                            "title": "External Id",
                            "type": "string"
                        }
                    },
                    {
                        "in": "query",
                        "name": "email",
                        "required": false,
                        "schema": {
                            "description": "The email address of the user.",
                            "title": "Email",
                            "type": "string"
                        }
                    },
                    {
                        "in": "query",
                        "name": "employee_id",
                        "required": false,
                        "schema": {
                            "description": "The organization-defined employee ID of the user.",
                            "title": "Employee Id",
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/PutStartDateAccessUserRequestBodyV1"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/AccessInformationResponseV1"
                                }
                            }
                        },
                        "description": "OK"
                    }
                },
                "summary": "Set Start Date for User",
                "tags": [
                    "Access User Information"
                ]
            }
        },
        "/access/v1/credentials/card": {
            "delete": {
                "description": "Deletes an access card of a specified access user given their user_id or external_id, the org_id, and the\ncard_id.",
                "operationId": "deleteAccessCardViewV1",
                "parameters": [
                    {
                        "in": "query",
                        "name": "external_id",
                        "required": false,
                        "schema": {
                            "description": "A unique identifier managed externally provided by the customer.",
                            "title": "External Id",
                            "type": "string"
                        }
                    },
                    {
                        "in": "query",
                        "name": "user_id",
                        "required": false,
                        "schema": {
                            "description": "The unique identifier of the user managed by Verkada.",
                            "format": "uuid",
                            "title": "User Id",
                            "type": "string"
                        }
                    },
                    {
                        "in": "query",
                        "name": "card_id",
                        "required": true,
                        "schema": {
                            "description": "The unique identifier of the Access Card managed by Verkada.",
                            "title": "Card Id",
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "ok"
                    }
                },
                "summary": "Delete Access Card",
                "tags": [
                    "Access Credentials"
                ]
            },
            "post": {
                "description": "Create and add an access card for a specified user_id or external_id and org_id. Card object will be passed in the body of the request as a json.\nWe require facility code and card number OR card_number_hex OR card_number_base36. The successful repsonse will be the created credential information.",
                "operationId": "postAccessCardViewV1",
                "parameters": [
                    {
                        "in": "query",
                        "name": "external_id",
                        "required": false,
                        "schema": {
                            "description": "A unique identifier managed externally provided by the customer.",
                            "title": "External Id",
                            "type": "string"
                        }
                    },
                    {
                        "in": "query",
                        "name": "user_id",
                        "required": false,
                        "schema": {
                            "description": "The unique identifier of the user managed by Verkada.",
                            "format": "uuid",
                            "title": "User Id",
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/PostCardBodyV1"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/CardObjectResponseV1"
                                }
                            }
                        },
                        "description": "OK"
                    }
                },
                "summary": "Add Card to User",
                "tags": [
                    "Access Credentials"
                ]
            }
        },
        "/access/v1/credentials/card/activate": {
            "put": {
                "description": "Given the Verkada defined user ID (OR user defined external ID)and Card ID, activate a specific access card for a user. Returns the updated access card information.",
                "operationId": "putAccessCardActivateViewV1",
                "parameters": [
                    {
                        "in": "query",
                        "name": "external_id",
                        "required": false,
                        "schema": {
                            "description": "A unique identifier managed externally provided by the customer.",
                            "title": "External Id",
                            "type": "string"
                        }
                    },
                    {
                        "in": "query",
                        "name": "user_id",
                        "required": false,
                        "schema": {
                            "description": "The unique identifier of the user managed by Verkada.",
                            "format": "uuid",
                            "title": "User Id",
                            "type": "string"
                        }
                    },
                    {
                        "in": "query",
                        "name": "card_id",
                        "required": true,
                        "schema": {
                            "description": "The unique identifier of the Access Card managed by Verkada.",
                            "title": "Card Id",
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/CardObjectResponseV1"
                                }
                            }
                        },
                        "description": "OK"
                    }
                },
                "summary": "Activate Access Card",
                "tags": [
                    "Access Credentials"
                ]
            }
        },
        "/access/v1/credentials/card/deactivate": {
            "put": {
                "description": "Given the Verkada defined user ID (OR user defined external ID)and Card ID, deactivate a specific access card for a user. Returns the updated access card information.",
                "operationId": "putAccessCardDeactivateViewV1",
                "parameters": [
                    {
                        "in": "query",
                        "name": "external_id",
                        "required": false,
                        "schema": {
                            "description": "A unique identifier managed externally provided by the customer.",
                            "title": "External Id",
                            "type": "string"
                        }
                    },
                    {
                        "in": "query",
                        "name": "user_id",
                        "required": false,
                        "schema": {
                            "description": "The unique identifier of the user managed by Verkada.",
                            "format": "uuid",
                            "title": "User Id",
                            "type": "string"
                        }
                    },
                    {
                        "in": "query",
                        "name": "card_id",
                        "required": true,
                        "schema": {
                            "description": "The unique identifier of the Access Card managed by Verkada.",
                            "title": "Card Id",
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/CardObjectResponseV1"
                                }
                            }
                        },
                        "description": "OK"
                    }
                },
                "summary": "Deactivate Access Card",
                "tags": [
                    "Access Credentials"
                ]
            }
        },
        "/access/v1/credentials/license_plate": {
            "delete": {
                "description": "Deletes a license plate credential from a specified user by providing the user_id or the external_id, the org_id, and the license_plate_number.",
                "operationId": "deleteLicensePlateViewV1",
                "parameters": [
                    {
                        "in": "query",
                        "name": "external_id",
                        "required": false,
                        "schema": {
                            "description": "A unique identifier managed externally provided by the customer.",
                            "title": "External Id",
                            "type": "string"
                        }
                    },
                    {
                        "in": "query",
                        "name": "user_id",
                        "required": false,
                        "schema": {
                            "description": "The unique identifier of the user managed by Verkada.",
                            "format": "uuid",
                            "title": "User Id",
                            "type": "string"
                        }
                    },
                    {
                        "in": "query",
                        "name": "license_plate_number",
                        "required": true,
                        "schema": {
                            "description": "The unique license plate number identifying a license plate credential for a user.",
                            "title": "License Plate Number",
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "ok"
                    }
                },
                "summary": "Delete License Plate from User",
                "tags": [
                    "Access Credentials"
                ]
            },
            "post": {
                "description": "Add a license plate credential to a user given a specified user_id or external_id and org_id. License plate object will be passed in the body of the request as a json.\nWe require a string of 6 alphanumeric values. The License Plate Object is returned.",
                "operationId": "postLicensePlateViewV1",
                "parameters": [
                    {
                        "in": "query",
                        "name": "external_id",
                        "required": false,
                        "schema": {
                            "description": "A unique identifier managed externally provided by the customer.",
                            "title": "External Id",
                            "type": "string"
                        }
                    },
                    {
                        "in": "query",
                        "name": "user_id",
                        "required": false,
                        "schema": {
                            "description": "The unique identifier of the user managed by Verkada.",
                            "format": "uuid",
                            "title": "User Id",
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/PostLicensePlateBodyV1"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/LicensePlateObjectResponseV1"
                                }
                            }
                        },
                        "description": "OK"
                    }
                },
                "summary": "Add License Plate to User",
                "tags": [
                    "Access Credentials"
                ]
            }
        },
        "/access/v1/credentials/license_plate/activate": {
            "put": {
                "description": "Given the Verkada defined user ID (OR user defined external ID)and Licence Plate Number, activate a users Licence Plate Credential.\nReturns the updated License Plate Object.",
                "operationId": "putLicensePlateActivateViewV1",
                "parameters": [
                    {
                        "in": "query",
                        "name": "external_id",
                        "required": false,
                        "schema": {
                            "description": "A unique identifier managed externally provided by the customer.",
                            "title": "External Id",
                            "type": "string"
                        }
                    },
                    {
                        "in": "query",
                        "name": "user_id",
                        "required": false,
                        "schema": {
                            "description": "The unique identifier of the user managed by Verkada.",
                            "format": "uuid",
                            "title": "User Id",
                            "type": "string"
                        }
                    },
                    {
                        "in": "query",
                        "name": "license_plate_number",
                        "required": true,
                        "schema": {
                            "description": "The unique license plate number identifying a license plate credential for a user.",
                            "title": "License Plate Number",
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/LicensePlateObjectResponseV1"
                                }
                            }
                        },
                        "description": "OK"
                    }
                },
                "summary": "Activate License Plate",
                "tags": [
                    "Access Credentials"
                ]
            }
        },
        "/access/v1/credentials/license_plate/deactivate": {
            "put": {
                "description": "Given the Verkada defined user ID (OR user defined external ID)and Licence Plate Number, deactivate a users Licence Plate Credential.\nReturns the updated License Plate Object.",
                "operationId": "putLicensePlateDeactivateViewV1",
                "parameters": [
                    {
                        "in": "query",
                        "name": "external_id",
                        "required": false,
                        "schema": {
                            "description": "A unique identifier managed externally provided by the customer.",
                            "title": "External Id",
                            "type": "string"
                        }
                    },
                    {
                        "in": "query",
                        "name": "user_id",
                        "required": false,
                        "schema": {
                            "description": "The unique identifier of the user managed by Verkada.",
                            "format": "uuid",
                            "title": "User Id",
                            "type": "string"
                        }
                    },
                    {
                        "in": "query",
                        "name": "license_plate_number",
                        "required": true,
                        "schema": {
                            "description": "The unique license plate number identifying a license plate credential for a user.",
                            "title": "License Plate Number",
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/LicensePlateObjectResponseV1"
                                }
                            }
                        },
                        "description": "OK"
                    }
                },
                "summary": "Deactivate License Plate",
                "tags": [
                    "Access Credentials"
                ]
            }
        },
        "/access/v1/credentials/mfa_code": {
            "delete": {
                "description": "Deletes a mfa code credential from a specified user by providing the user_id or the external_id, the org_id, and the mfa_code.",
                "operationId": "deleteMFACodeViewV1",
                "parameters": [
                    {
                        "in": "query",
                        "name": "external_id",
                        "required": false,
                        "schema": {
                            "description": "A unique identifier managed externally provided by the customer.",
                            "title": "External Id",
                            "type": "string"
                        }
                    },
                    {
                        "in": "query",
                        "name": "user_id",
                        "required": false,
                        "schema": {
                            "description": "The unique identifier of the user managed by Verkada.",
                            "format": "uuid",
                            "title": "User Id",
                            "type": "string"
                        }
                    },
                    {
                        "in": "query",
                        "name": "code",
                        "required": true,
                        "schema": {
                            "description": "The unique mfa code identifying a mfa code credential for a user.",
                            "title": "Code",
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "ok"
                    }
                },
                "summary": "Delete MFACode from User",
                "tags": [
                    "Access Credentials"
                ]
            },
            "post": {
                "description": "Add a mfa code credential to a user given a specified user_id or external_id and org_id. MFA code object will be passed in the body of the request as a json.\nWe require a string of 6 alphanumeric values. The MFA Code Object is returned.",
                "operationId": "postMFACodeViewV1",
                "parameters": [
                    {
                        "in": "query",
                        "name": "external_id",
                        "required": false,
                        "schema": {
                            "description": "A unique identifier managed externally provided by the customer.",
                            "title": "External Id",
                            "type": "string"
                        }
                    },
                    {
                        "in": "query",
                        "name": "user_id",
                        "required": false,
                        "schema": {
                            "description": "The unique identifier of the user managed by Verkada.",
                            "format": "uuid",
                            "title": "User Id",
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/PostMFACodeBodyV1"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/MFACodeObjectResponseV1"
                                }
                            }
                        },
                        "description": "OK"
                    }
                },
                "summary": "Add MFA Code to User",
                "tags": [
                    "Access Credentials"
                ]
            }
        },
        "/access/v1/door/access_level": {
            "get": {
                "description": "",
                "operationId": "getAccessLevelView",
                "parameters": [],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/AccessLevelListResponseV1"
                                }
                            }
                        },
                        "description": "OK"
                    }
                },
                "summary": "Get All Available Access Levels",
                "tags": [
                    "Access Levels"
                ]
            },
            "post": {
                "description": "",
                "operationId": "postAccessLevelView",
                "parameters": [],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/CreateAccessLevelRequestV1"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "ok"
                    },
                    "201": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/AccessLevelResponseV1"
                                }
                            }
                        },
                        "description": "Created"
                    }
                },
                "summary": "Create Access Level",
                "tags": [
                    "Access Levels"
                ]
            }
        },
        "/access/v1/door/access_level/{access_level_id}": {
            "delete": {
                "description": "",
                "operationId": "deleteAccessLevelDetailView",
                "parameters": [
                    {
                        "in": "path",
                        "name": "access_level_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "ok"
                    }
                },
                "summary": "Delete Access Level",
                "tags": [
                    "Access Levels"
                ]
            },
            "get": {
                "description": "",
                "operationId": "getAccessLevelDetailView",
                "parameters": [
                    {
                        "in": "path",
                        "name": "access_level_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/AccessLevelResponseV1"
                                }
                            }
                        },
                        "description": "OK"
                    }
                },
                "summary": "Get Access Level",
                "tags": [
                    "Access Levels"
                ]
            },
            "put": {
                "description": "",
                "operationId": "putAccessLevelDetailView",
                "parameters": [
                    {
                        "in": "path",
                        "name": "access_level_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/UpdateAccessLevelRequestV1"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/AccessLevelResponseV1"
                                }
                            }
                        },
                        "description": "OK"
                    }
                },
                "summary": "Update Access Level",
                "tags": [
                    "Access Levels"
                ]
            }
        },
        "/access/v1/door/access_level/{access_level_id}/access_schedule_event": {
            "post": {
                "description": "",
                "operationId": "postAccessLevelScheduleView",
                "parameters": [
                    {
                        "in": "path",
                        "name": "access_level_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/CreateAccessScheduleEventRequestV1"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "ok"
                    },
                    "201": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/AccessScheduleEventResponseV1"
                                }
                            }
                        },
                        "description": "Created"
                    }
                },
                "summary": "Add Access Schedule Event to Access Level",
                "tags": [
                    "Access Levels"
                ]
            }
        },
        "/access/v1/door/access_level/{access_level_id}/access_schedule_event/{event_id}": {
            "delete": {
                "description": "",
                "operationId": "deleteAccessLevelScheduleView",
                "parameters": [
                    {
                        "in": "path",
                        "name": "access_level_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "in": "path",
                        "name": "event_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "ok"
                    }
                },
                "summary": "Delete Access Schedule Event on Access Level",
                "tags": [
                    "Access Levels"
                ]
            },
            "get": {
                "description": "",
                "operationId": "getAccessLevelScheduleView",
                "parameters": [
                    {
                        "in": "path",
                        "name": "access_level_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "in": "path",
                        "name": "event_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/AccessScheduleEventResponseV1"
                                }
                            }
                        },
                        "description": "OK"
                    }
                },
                "summary": "Get Access Schedule Event Details",
                "tags": [
                    "Access Levels"
                ]
            },
            "put": {
                "description": "",
                "operationId": "putAccessLevelScheduleView",
                "parameters": [
                    {
                        "in": "path",
                        "name": "access_level_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "in": "path",
                        "name": "event_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/ModifyAccessScheduleEventRequestV1"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/AccessScheduleEventResponseV1"
                                }
                            }
                        },
                        "description": "OK"
                    }
                },
                "summary": "Update Access Schedule Event on Access Level",
                "tags": [
                    "Access Levels"
                ]
            }
        },
        "/access/v1/door/admin_unlock": {
            "post": {
                "description": "Sends a request to unlock a door with `door_id` irrespective of any user's door access privileges. The door_id is passed into the JSON object in the body of the request. The successful response will contain the unlocked `door_id` and the duration of the unlock.",
                "operationId": "postAccessAdminAPIUnlockViewV1",
                "parameters": [],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/PostAdminAPIUnlockBodyV1"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PostAPIUnlockResponseV1"
                                }
                            }
                        },
                        "description": "OK"
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiErrorModel"
                                }
                            }
                        },
                        "description": "Bad Request"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiErrorModel"
                                }
                            }
                        },
                        "description": "Forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiErrorModel"
                                }
                            }
                        },
                        "description": "Not Found"
                    }
                },
                "summary": "Unlock Door as Admin",
                "tags": [
                    "Access Doors"
                ]
            }
        },
        "/access/v1/door/exception_calendar": {
            "get": {
                "description": "",
                "operationId": "getAccessDoorExceptionCalendarsViewV1",
                "parameters": [
                    {
                        "in": "query",
                        "name": "last_updated_after",
                        "required": false,
                        "schema": {
                            "description": "A timestamp used to filter out Door Exception Calendar where <code>last_updated_at</code> is after the specified time.\nFormatted as a Unix timestamp in seconds.",
                            "title": "Last Updated After",
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/GetDoorExceptionCalendarsResponseV1"
                                }
                            }
                        },
                        "description": "OK"
                    }
                },
                "summary": "Get All Available Door Exception Calendars",
                "tags": [
                    "Access Door Exception Calendars"
                ]
            },
            "post": {
                "description": "",
                "operationId": "postAccessDoorExceptionCalendarsViewV1",
                "parameters": [],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/PostDoorExceptionCalendarBodyV1"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/DoorExceptionCalendarV1"
                                }
                            }
                        },
                        "description": "OK"
                    }
                },
                "summary": "Create Door Exception Calendar",
                "tags": [
                    "Access Door Exception Calendars"
                ]
            }
        },
        "/access/v1/door/exception_calendar/{calendar_id}": {
            "delete": {
                "description": "",
                "operationId": "deleteAccessDoorExceptionCalendarViewV1",
                "parameters": [
                    {
                        "in": "path",
                        "name": "calendar_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "ok"
                    }
                },
                "summary": "Delete Door Exception Calendar",
                "tags": [
                    "Access Door Exception Calendars"
                ]
            },
            "get": {
                "description": "",
                "operationId": "getAccessDoorExceptionCalendarViewV1",
                "parameters": [
                    {
                        "in": "path",
                        "name": "calendar_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/DoorExceptionCalendarV1"
                                }
                            }
                        },
                        "description": "OK"
                    }
                },
                "summary": "Get Door Exception Calendar",
                "tags": [
                    "Access Door Exception Calendars"
                ]
            },
            "put": {
                "description": "",
                "operationId": "putAccessDoorExceptionCalendarViewV1",
                "parameters": [
                    {
                        "in": "path",
                        "name": "calendar_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/PutDoorExceptionCalendarBodyV1"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/DoorExceptionCalendarV1"
                                }
                            }
                        },
                        "description": "OK"
                    }
                },
                "summary": "Update Door Exception Calendar",
                "tags": [
                    "Access Door Exception Calendars"
                ]
            }
        },
        "/access/v1/door/exception_calendar/{calendar_id}/exception": {
            "post": {
                "description": "",
                "operationId": "postAccessDoorExceptionsViewV1",
                "parameters": [
                    {
                        "in": "path",
                        "name": "calendar_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/PostDoorExceptionBodyV1"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/DoorExceptionV1"
                                }
                            }
                        },
                        "description": "OK"
                    }
                },
                "summary": "Add Exception to Door Exception Calendar",
                "tags": [
                    "Access Door Exception Calendars"
                ]
            }
        },
        "/access/v1/door/exception_calendar/{calendar_id}/exception/{exception_id}": {
            "delete": {
                "description": "",
                "operationId": "deleteAccessDoorExceptionViewV1",
                "parameters": [
                    {
                        "in": "path",
                        "name": "calendar_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "in": "path",
                        "name": "exception_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "ok"
                    }
                },
                "summary": "Delete Exception on Door Exception Calendar",
                "tags": [
                    "Access Door Exception Calendars"
                ]
            },
            "get": {
                "description": "",
                "operationId": "getAccessDoorExceptionViewV1",
                "parameters": [
                    {
                        "in": "path",
                        "name": "calendar_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "in": "path",
                        "name": "exception_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/DoorExceptionV1"
                                }
                            }
                        },
                        "description": "OK"
                    }
                },
                "summary": "Get Exception on Door Exception Calendar",
                "tags": [
                    "Access Door Exception Calendars"
                ]
            },
            "put": {
                "description": "",
                "operationId": "putAccessDoorExceptionViewV1",
                "parameters": [
                    {
                        "in": "path",
                        "name": "calendar_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "in": "path",
                        "name": "exception_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/PutDoorExceptionBodyV1"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/DoorExceptionV1"
                                }
                            }
                        },
                        "description": "OK"
                    }
                },
                "summary": "Update Exception on Door Exception Calendar",
                "tags": [
                    "Access Door Exception Calendars"
                ]
            }
        },
        "/access/v1/door/user_unlock": {
            "post": {
                "description": "Sends a request to unlock a door with `door_id` as the user with the specified `user_id` or `external_id`. The door_id and one of either the external ID or Verkada user ID (but not both) are passed in the json object in the body of the request. The unlock request will only be granted if the user with the specified `user_id` has door access permissions for that `door_id` through an Access Level in Verkada Command. The successful response will contain the unlocked `door_id` and the duration of the unlock.",
                "operationId": "postAccessUserAPIUnlockViewV1",
                "parameters": [],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/PostUserAPIUnlockBodyV1"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PostAPIUnlockResponseV1"
                                }
                            }
                        },
                        "description": "OK"
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiErrorModel"
                                }
                            }
                        },
                        "description": "Bad Request"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiErrorModel"
                                }
                            }
                        },
                        "description": "Forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiErrorModel"
                                }
                            }
                        },
                        "description": "Not Found"
                    }
                },
                "summary": "Unlock Door as User",
                "tags": [
                    "Access Doors"
                ]
            }
        },
        "/access/v1/doors": {
            "get": {
                "description": "Retrieves a list of all doors in the organization. The response can optionally be filtered to doors within sites with the requested `site_ids` or to the specific doors represented by the specified `door_ids`. Only one of `site_ids` or `door_ids` can be used to filter the response for a single request (not both). A successful response will contain one Door Information Object per corresponding undeleted door.",
                "operationId": "getAccessDoorInformationViewV1",
                "parameters": [
                    {
                        "in": "query",
                        "name": "door_ids",
                        "required": false,
                        "schema": {
                            "description": "The unique identifiers of doors to retrieve.",
                            "title": "Door Ids",
                            "type": "string"
                        }
                    },
                    {
                        "in": "query",
                        "name": "site_ids",
                        "required": false,
                        "schema": {
                            "description": "The unique identifiers of sites from which to retrieve doors.",
                            "title": "Site Ids",
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/GetDoorInformationResponseV1"
                                }
                            }
                        },
                        "description": "OK"
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiErrorModel"
                                }
                            }
                        },
                        "description": "Bad Request"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiErrorModel"
                                }
                            }
                        },
                        "description": "Forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiErrorModel"
                                }
                            }
                        },
                        "description": "Not Found"
                    }
                },
                "summary": "Get Doors",
                "tags": [
                    "Access Doors"
                ]
            }
        },
        "/access/v1/scenarios": {
            "get": {
                "description": "Lists all access scenarios for the organization.\nTo use this API, you need an API Key with \"Read\" permission for \"Access Scenario Management\" endpoints\nor an API Key with \"Read\" permission for \"Access Control\" endpoints.",
                "operationId": "getAccessScenarioListViewV1",
                "parameters": [
                    {
                        "in": "query",
                        "name": "scenario_ids",
                        "required": false,
                        "schema": {
                            "description": "IDs of scenarios to list.",
                            "items": {
                                "type": "string"
                            },
                            "title": "Scenario Ids",
                            "type": "array"
                        }
                    },
                    {
                        "in": "query",
                        "name": "site_ids",
                        "required": false,
                        "schema": {
                            "description": "IDs of scoped sites that the scenarios are applied to.",
                            "items": {
                                "type": "string"
                            },
                            "title": "Site Ids",
                            "type": "array"
                        }
                    },
                    {
                        "in": "query",
                        "name": "types",
                        "required": false,
                        "schema": {
                            "description": "Types of scenarios to list.",
                            "items": {
                                "type": "string"
                            },
                            "title": "Types",
                            "type": "array"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ScenarioListResponseV1"
                                }
                            }
                        },
                        "description": "OK"
                    }
                },
                "summary": "Get All Access Scenarios",
                "tags": [
                    "Access Scenarios"
                ]
            }
        },
        "/access/v1/scenarios/{scenario_id}/activate": {
            "post": {
                "description": "Activates a scenario with the given `scenario_id`.\nTo use this API, you need an API Key having \"Read/Write\" permission for \"Access Control\" endpoints. Manage via API must also be enabled for scenarios in your organization.",
                "operationId": "postAccessScenarioActivateViewV1",
                "parameters": [
                    {
                        "in": "path",
                        "name": "scenario_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PostScenarioActionResponseV1"
                                }
                            }
                        },
                        "description": "OK"
                    }
                },
                "summary": "Activate Access Scenario",
                "tags": [
                    "Access Scenarios"
                ]
            }
        },
        "/access/v1/scenarios/{scenario_id}/release": {
            "post": {
                "description": "Releases a scenario with the given `scenario_id`.\nTo use this API, you need an API Key having \"Read/Write\" permission for \"Access Control\" endpoints. Manage via API must also be enabled for scenarios in your organization.",
                "operationId": "postAccessScenarioReleaseViewV1",
                "parameters": [
                    {
                        "in": "path",
                        "name": "scenario_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PostScenarioActionResponseV1"
                                }
                            }
                        },
                        "description": "OK"
                    }
                },
                "summary": "Release Access Scenario",
                "tags": [
                    "Access Scenarios"
                ]
            }
        },
        "/alarms/v1/devices": {
            "get": {
                "description": "Gets information about the all the devices in an alarm site specified by <site_id>. Returns a subset of the alarm site's devices by specifying <code>device_ids<code>.",
                "operationId": "getAlarmsDevicesViewV1",
                "parameters": [
                    {
                        "in": "query",
                        "name": "site_id",
                        "required": true,
                        "schema": {
                            "description": "The unique identifier of the site",
                            "title": "Site Id",
                            "type": "string"
                        }
                    },
                    {
                        "in": "query",
                        "name": "device_ids",
                        "required": false,
                        "schema": {
                            "description": "A comma delimited list of device unique identifiers. If not supplied, all devices in the site will be returned.",
                            "title": "Device Ids",
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/AlarmsDevicesResponse"
                                }
                            }
                        },
                        "description": "OK"
                    }
                },
                "summary": "Get Alarm Devices",
                "tags": [
                    "Devices"
                ]
            }
        },
        "/alarms/v1/sites": {
            "get": {
                "description": "Returns information about a list of alarm sites",
                "operationId": "getAlarmsSitesViewV1",
                "parameters": [
                    {
                        "in": "query",
                        "name": "site_ids",
                        "required": false,
                        "schema": {
                            "description": "A comma delimited list of site unique identifiers. If not supplied, will return information on all sites.",
                            "title": "Site Ids",
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/AlarmsSitesResponseV1"
                                }
                            }
                        },
                        "description": "OK"
                    }
                },
                "summary": "Get Site Information",
                "tags": [
                    "Sites"
                ]
            }
        },
        "/cameras/v1/alerts": {
            "get": {
                "description": "Returns alerts for an organization within a specified time range.\n\nAlert types include camera offline, camera online, tamper, motion, crowd, and Person of Interest alerts.\n\nMotion alerts include whether people and/or vehicles were detected.\n\nCrowd alerts include the threshold set for the camera that detected the crowd and whether people or vehicles were detected.\n\nPerson of Interest alerts include the label set for the person.",
                "operationId": "getNotificationsViewV1",
                "parameters": [
                    {
                        "in": "query",
                        "name": "start_time",
                        "required": false,
                        "schema": {
                            "description": "The start of the time range for requested notifications.\nFormatted as a Unix timestamp in seconds.\nDefault value is an hour ago from the current time.",
                            "title": "Start Time",
                            "type": "integer"
                        }
                    },
                    {
                        "in": "query",
                        "name": "end_time",
                        "required": false,
                        "schema": {
                            "description": "The end of the time range for requested notifications.\nFormatted as a Unix timestamp in seconds.\nDefault value is the current time.",
                            "title": "End Time",
                            "type": "integer"
                        }
                    },
                    {
                        "in": "query",
                        "name": "include_image_url",
                        "required": false,
                        "schema": {
                            "default": false,
                            "description": "The flag to include/exclude image url for notification.\nDefaults to false.",
                            "title": "Include Image Url",
                            "type": "boolean"
                        }
                    },
                    {
                        "in": "query",
                        "name": "page_token",
                        "required": false,
                        "schema": {
                            "description": "The pagination token used to fetch the next page of results.",
                            "title": "Page Token",
                            "type": "string"
                        }
                    },
                    {
                        "in": "query",
                        "name": "page_size",
                        "required": false,
                        "schema": {
                            "default": 100,
                            "description": "The number of items returned in a single response.\nDefault is 100. Max is 200.",
                            "exclusiveMinimum": true,
                            "maximum": 200,
                            "minimum": 0,
                            "title": "Page Size",
                            "type": "integer"
                        }
                    },
                    {
                        "in": "query",
                        "name": "notification_type",
                        "required": false,
                        "schema": {
                            "description": "One or multiple comma separated values from <code>person_of_interest</code>, <code>license_plate_of_interest</code>, <code>tamper</code>, <code>crowd</code>, <code>motion</code>, <code>camera_offline</code>, <code>camera_online</code>, <code>line_crossing</code>, <code>loitering</code>.",
                            "title": "Notification Type",
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NotificationsResponseV1"
                                }
                            }
                        },
                        "description": "OK"
                    }
                },
                "summary": "Get Alerts",
                "tags": [
                    "Alerts"
                ]
            }
        },
        "/cameras/v1/analytics/dashboard_occupancy_trends": {
            "get": {
                "description": "Returns all occupancy trends data for a particular dashboard over a specified time range.\n\nResponses will include the start and end time of the data requested and org, dashboard information (ID, name) alongside the readings.",
                "operationId": "getDashboardOccupancyTrendsView",
                "parameters": [
                    {
                        "in": "query",
                        "name": "dashboard_id",
                        "required": true,
                        "schema": {
                            "description": "The unique identifier of the dashboard.",
                            "title": "Dashboard Id",
                            "type": "string"
                        }
                    },
                    {
                        "in": "query",
                        "name": "start_time",
                        "required": false,
                        "schema": {
                            "description": "The start of the time range for dashboard occupancy trends.\nFormatted as a Unix timestamp in seconds.\nDefaults to an hour from the current time.",
                            "title": "Start Time",
                            "type": "integer"
                        }
                    },
                    {
                        "in": "query",
                        "name": "end_time",
                        "required": false,
                        "schema": {
                            "description": "The end of the time range for dashboard occupancy trends.\nFormatted as a Unix timestamp in seconds.\nDefaults to the current time.",
                            "title": "End Time",
                            "type": "integer"
                        }
                    },
                    {
                        "in": "query",
                        "name": "interval",
                        "required": false,
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/components/schemas/IntervalEnum"
                                }
                            ],
                            "default": "1_hour",
                            "description": "The time interval for each array in <code>trend_in</code> and <code>trend_out</code>.\nOptions available are: <code>15_minutes</code>, <code>1_hour</code>, <code>1_day</code>.\nDefaults to <code>1_hour</code>."
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/DashboardOccupancyTrendsResponseV1"
                                }
                            }
                        },
                        "description": "OK"
                    }
                },
                "summary": "Get Dashboard Occupancy Trend Data",
                "tags": [
                    "Analytics"
                ]
            }
        },
        "/cameras/v1/analytics/lpr/images": {
            "get": {
                "description": "Returns the timestamps, detected license plate numbers, and images of all license plates seen by a camera.\n\nOnly works for cameras that are LPR enabled.\n\nResponse may be paginated if page_token exists.",
                "operationId": "getLPRImagesView",
                "parameters": [
                    {
                        "in": "query",
                        "name": "camera_id",
                        "required": true,
                        "schema": {
                            "description": "The unique identifier of the camera.",
                            "title": "Camera Id",
                            "type": "string"
                        }
                    },
                    {
                        "in": "query",
                        "name": "license_plate",
                        "required": false,
                        "schema": {
                            "description": "License plate number to filter by.",
                            "title": "License Plate",
                            "type": "string"
                        }
                    },
                    {
                        "in": "query",
                        "name": "start_time",
                        "required": false,
                        "schema": {
                            "description": "The start of the time range.\nFormatted as a Unix timestamp in seconds.\nDefaults to a day from the current time.",
                            "title": "Start Time",
                            "type": "integer"
                        }
                    },
                    {
                        "in": "query",
                        "name": "end_time",
                        "required": false,
                        "schema": {
                            "description": "The end of the time range.\nFormatted as a Unix timestamp in seconds.\nDefaults to the current time.",
                            "title": "End Time",
                            "type": "integer"
                        }
                    },
                    {
                        "in": "query",
                        "name": "page_size",
                        "required": false,
                        "schema": {
                            "default": 100,
                            "description": "The number of items returned in a single response.\nDefault is 100. Max is 200.",
                            "exclusiveMinimum": true,
                            "maximum": 200,
                            "minimum": 0,
                            "title": "Page Size",
                            "type": "integer"
                        }
                    },
                    {
                        "in": "query",
                        "name": "page_token",
                        "required": false,
                        "schema": {
                            "description": "The pagination token used to fetch the next page of results.",
                            "title": "Page Token",
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/LPRImagesResponse"
                                }
                            }
                        },
                        "description": "OK"
                    }
                },
                "summary": "Get seen license plates",
                "tags": [
                    "LPR"
                ]
            }
        },
        "/cameras/v1/analytics/lpr/license_plate_of_interest": {
            "delete": {
                "description": "Deletes a license plate from License Plates of Interest using a specified license plate number.",
                "operationId": "deleteLicensePlateOfInterestViewV1",
                "parameters": [
                    {
                        "in": "query",
                        "name": "license_plate",
                        "required": true,
                        "schema": {
                            "description": "The license plate number of the License Plate of Interest.",
                            "title": "License Plate",
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/LicensePlateOfInterest"
                                }
                            }
                        },
                        "description": "OK"
                    }
                },
                "summary": "Delete a License Plate of Interest",
                "tags": [
                    "LPR"
                ]
            },
            "get": {
                "description": "Returns creation time, description, and license plate number for all License Plates of Interest for an organization.",
                "operationId": "getLicensePlateOfInterestViewV1",
                "parameters": [
                    {
                        "in": "query",
                        "name": "page_size",
                        "required": false,
                        "schema": {
                            "default": 1000,
                            "description": "The number of items returned in a single response. Default is 1000.",
                            "exclusiveMinimum": true,
                            "maximum": 10000,
                            "minimum": 0,
                            "title": "Page Size",
                            "type": "integer"
                        }
                    },
                    {
                        "in": "query",
                        "name": "page_token",
                        "required": false,
                        "schema": {
                            "description": "The pagination token used to fetch the next page of results.",
                            "title": "Page Token",
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/GetAllLicensePlateOfInterestResponse"
                                }
                            }
                        },
                        "description": "OK"
                    }
                },
                "summary": "Get All License Plates of Interest",
                "tags": [
                    "LPR"
                ]
            },
            "patch": {
                "description": "Updates a license plate description from License Plates of Interest using a specified license plate number.",
                "operationId": "patchLicensePlateOfInterestViewV1",
                "parameters": [
                    {
                        "in": "query",
                        "name": "license_plate",
                        "required": true,
                        "schema": {
                            "description": "The license plate number of the License Plate of Interest.",
                            "title": "License Plate",
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/PatchLicensePlateOfInterestBodyRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/LicensePlateOfInterest"
                                }
                            }
                        },
                        "description": "OK"
                    }
                },
                "summary": "Update a License of Interest",
                "tags": [
                    "LPR"
                ]
            },
            "post": {
                "description": "Creates a License Plate of Interest for an organization using a specified description and license plate number.",
                "operationId": "postLicensePlateOfInterestViewV1",
                "parameters": [],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/LicensePlateOfInterestBodyRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/LicensePlateOfInterest"
                                }
                            }
                        },
                        "description": "OK"
                    }
                },
                "summary": "Create a License Plate of Interest",
                "tags": [
                    "LPR"
                ]
            }
        },
        "/cameras/v1/analytics/lpr/license_plate_of_interest/batch": {
            "delete": {
                "description": "",
                "operationId": "deleteLicensePlateOfInterestBulkOperationViewV1",
                "parameters": [],
                "requestBody": {
                    "content": {
                        "multipart/form-data": {
                            "schema": {
                                "$ref": "#/components/schemas/UploadLicensePlateCSVBody"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/LicensePlateOfInterestBulkOperationResponse"
                                }
                            }
                        },
                        "description": "OK"
                    }
                },
                "summary": "Delete the License Plates of Interest specified in the uploaded file.",
                "tags": [
                    "LPR"
                ]
            },
            "post": {
                "description": "",
                "operationId": "postLicensePlateOfInterestBulkOperationViewV1",
                "parameters": [],
                "requestBody": {
                    "content": {
                        "multipart/form-data": {
                            "schema": {
                                "$ref": "#/components/schemas/UploadLicensePlateCSVBody"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/LicensePlateOfInterestBulkOperationResponse"
                                }
                            }
                        },
                        "description": "OK"
                    }
                },
                "summary": "Create the License Plates of Interest specified in the uploaded file.",
                "tags": [
                    "LPR"
                ]
            }
        },
        "/cameras/v1/analytics/lpr/timestamps": {
            "get": {
                "description": "Returns the timestamps for a certain license plate. Only works for cameras that are LPR enabled.\n\nResponse may be paginated if page_token exists.",
                "operationId": "getLPRTimestampsView",
                "parameters": [
                    {
                        "in": "query",
                        "name": "camera_id",
                        "required": true,
                        "schema": {
                            "description": "The unique identifier of the camera.",
                            "title": "Camera Id",
                            "type": "string"
                        }
                    },
                    {
                        "in": "query",
                        "name": "license_plate",
                        "required": true,
                        "schema": {
                            "description": "The requested license plate number.",
                            "title": "License Plate",
                            "type": "string"
                        }
                    },
                    {
                        "in": "query",
                        "name": "start_time",
                        "required": false,
                        "schema": {
                            "description": "The start of the time range.\nFormatted as a Unix timestamp in seconds.\nDefaults to a day from the current time.",
                            "title": "Start Time",
                            "type": "integer"
                        }
                    },
                    {
                        "in": "query",
                        "name": "end_time",
                        "required": false,
                        "schema": {
                            "description": "The end of the time range.\nFormatted as a Unix timestamp in seconds.\nDefaults to the current time.",
                            "title": "End Time",
                            "type": "integer"
                        }
                    },
                    {
                        "in": "query",
                        "name": "page_size",
                        "required": false,
                        "schema": {
                            "default": 100,
                            "description": "The number of items returned in a single response.\nDefault is 100. Max is 200.",
                            "exclusiveMinimum": true,
                            "maximum": 200,
                            "minimum": 0,
                            "title": "Page Size",
                            "type": "integer"
                        }
                    },
                    {
                        "in": "query",
                        "name": "page_token",
                        "required": false,
                        "schema": {
                            "description": "The pagination token used to fetch the next page of results.",
                            "title": "Page Token",
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/LPRTimestampResponseV1"
                                }
                            }
                        },
                        "description": "OK"
                    }
                },
                "summary": "Get Timestamps for a License Plate",
                "tags": [
                    "LPR"
                ]
            }
        },
        "/cameras/v1/analytics/max_object_counts": {
            "get": {
                "description": "Returns the max count of people and vehicles within a specified time range.",
                "operationId": "getMaxObjectCountsViewV1",
                "parameters": [
                    {
                        "in": "query",
                        "name": "camera_id",
                        "required": true,
                        "schema": {
                            "description": "The unique identifier of the camera.",
                            "title": "Camera Id",
                            "type": "string"
                        }
                    },
                    {
                        "in": "query",
                        "name": "start_time",
                        "required": false,
                        "schema": {
                            "description": "The start of the time range for requested counts.\nFormatted as a Unix timestamp in seconds.\nDefault value is the current time.\nIf only providing a start time, the same value will be used for <code>end_time</code>",
                            "title": "Start Time",
                            "type": "integer"
                        }
                    },
                    {
                        "in": "query",
                        "name": "end_time",
                        "required": false,
                        "schema": {
                            "description": "The end of the time range for requested counts.\nFormatted as a Unix timestamp in seconds.\nIt can only be used if <code>start_time</code> is also provided",
                            "title": "End Time",
                            "type": "integer"
                        }
                    },
                    {
                        "in": "query",
                        "name": "search_zones",
                        "required": false,
                        "schema": {
                            "description": "Zones to search\nFormatted as coordinates ranging from <code>[0,0]</code> to <code>[9,9]</code>\ne.g., <code>[[3,3],[3,4],[4,3],[4,4]]</code>",
                            "items": {
                                "items": {
                                    "type": "integer"
                                },
                                "type": "array"
                            },
                            "title": "Search Zones",
                            "type": "array"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/MaxObjectCountsResponseV1"
                                }
                            }
                        },
                        "description": "OK"
                    }
                },
                "summary": "Get Max People/Vehicle Counts",
                "tags": [
                    "Analytics"
                ]
            }
        },
        "/cameras/v1/analytics/object_counts": {
            "get": {
                "description": "Returns the count of people and vehicles within a specified time range.",
                "operationId": "getObjectCountsViewV1",
                "parameters": [
                    {
                        "in": "query",
                        "name": "camera_id",
                        "required": true,
                        "schema": {
                            "description": "The unique identifier of the camera.",
                            "title": "Camera Id",
                            "type": "string"
                        }
                    },
                    {
                        "in": "query",
                        "name": "start_time",
                        "required": false,
                        "schema": {
                            "description": "The start of the time range for requested counts.\nFormatted as a Unix timestamp in seconds.\nDefault value is an hour ago from the current time.",
                            "title": "Start Time",
                            "type": "integer"
                        }
                    },
                    {
                        "in": "query",
                        "name": "end_time",
                        "required": false,
                        "schema": {
                            "description": "The end of the time range for requested counts.\nFormatted as a Unix timestamp in seconds.\nDefault value is the current time.",
                            "title": "End Time",
                            "type": "integer"
                        }
                    },
                    {
                        "in": "query",
                        "name": "page_token",
                        "required": false,
                        "schema": {
                            "description": "The pagination token used to fetch the next page of results.",
                            "title": "Page Token",
                            "type": "string"
                        }
                    },
                    {
                        "in": "query",
                        "name": "page_size",
                        "required": false,
                        "schema": {
                            "default": 100,
                            "description": "The number of items returned in a single response.\nDefault is 100. Max is 200.",
                            "exclusiveMinimum": true,
                            "maximum": 200,
                            "minimum": 0,
                            "title": "Page Size",
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ObjectCountResponseV1"
                                }
                            }
                        },
                        "description": "OK"
                    }
                },
                "summary": "Get People/Vehicle Counts",
                "tags": [
                    "Analytics"
                ]
            }
        },
        "/cameras/v1/analytics/object_position_mqtt": {
            "post": {
                "description": "Sets the MQTT config for a particular camera.\n\nObject Position Events from the camera will be published to the MQTT broker specified in the MQTT config.",
                "operationId": "postOccupancyTrendsMQTTConfigView",
                "parameters": [],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/OccupancyTrendsMQTTConfigSetRequestV1"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/OccupancyTrendsMQTTConfigSetResponseV1"
                                }
                            }
                        },
                        "description": "OK"
                    }
                },
                "summary": "Set Object Position MQTT Config",
                "tags": [
                    "Analytics"
                ]
            }
        },
        "/cameras/v1/analytics/occupancy_trends": {
            "get": {
                "description": "Returns all occupancy trends data for a particular camera over a specified time range.\n\nResponses will include the start and end time of the data requested and device information (ID, serial number) alongside the readings.",
                "operationId": "getOccupancyTrendsView",
                "parameters": [
                    {
                        "in": "query",
                        "name": "camera_id",
                        "required": true,
                        "schema": {
                            "description": "The unique identifier of the camera.",
                            "title": "Camera Id",
                            "type": "string"
                        }
                    },
                    {
                        "in": "query",
                        "name": "start_time",
                        "required": false,
                        "schema": {
                            "description": "The start of the time range for occupancy trends.\nFormatted as a Unix timestamp in seconds.\nDefaults to an hour from the current time.",
                            "title": "Start Time",
                            "type": "integer"
                        }
                    },
                    {
                        "in": "query",
                        "name": "end_time",
                        "required": false,
                        "schema": {
                            "description": "The end of the time range for occupancy trends.\nFormatted as a Unix timestamp in seconds.\nDefaults to the current time.",
                            "title": "End Time",
                            "type": "integer"
                        }
                    },
                    {
                        "in": "query",
                        "name": "interval",
                        "required": false,
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/components/schemas/IntervalEnum"
                                }
                            ],
                            "default": "1_hour",
                            "description": "The time interval for each array in <code>trend_in</code> and <code>trend_out</code>.\nOptions available are: <code>15_minutes</code>, <code>1_hour</code>, <code>1_day</code>.\nDefaults to <code>1_hour</code>."
                        }
                    },
                    {
                        "in": "query",
                        "name": "type",
                        "required": false,
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/components/schemas/OccupancyTrendsTypeEnum"
                                }
                            ],
                            "default": "person",
                            "description": "The type of the counted object.\nCurrently available type is <code>person</code> <code>vehicle</code>.\nDefault is <code>person</code>."
                        }
                    },
                    {
                        "in": "query",
                        "name": "preset_id",
                        "required": false,
                        "schema": {
                            "description": "The unique identifier of the camera preset.",
                            "title": "Preset Id",
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/OccupancyTrendsResponseV1"
                                }
                            }
                        },
                        "description": "OK"
                    }
                },
                "summary": "Get Occupancy Trend Data",
                "tags": [
                    "Analytics"
                ]
            }
        },
        "/cameras/v1/audio/status": {
            "get": {
                "description": "To use the Camera Audio API, you will need to generate an “Camera Audio” API key (separate from Read only and Read/write API keys).",
                "operationId": "getCameraAudioViewV1",
                "parameters": [
                    {
                        "in": "query",
                        "name": "camera_id",
                        "required": true,
                        "schema": {
                            "description": "The unique identifier of the camera.",
                            "title": "Camera Id",
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/CameraAudioStatusGetResponse"
                                }
                            }
                        },
                        "description": "OK"
                    }
                },
                "summary": "Get Camera Audio Status",
                "tags": [
                    "Audio"
                ]
            },
            "post": {
                "description": "To use the Camera Audio API, you will need to generate an “Camera Audio” API key (separate from Read only and Read/write API keys). This doesn't work if Camera Audio is globally disabled (visit <a href=\"https://help.verkada.com/en/articles/6937133-feature-manager\">Feature Manager</a>) or if audio is not supported by the camera model.\n\n\n<b>Response Codes:</b>\n\n<table>\n<tr>\n    <th>Response Code</th>\n    <th>Message</th>\n    <th>Troubleshooting Steps</th>\n</tr>\n<tr>\n    <td>412</td>\n    <td>Audio is not supported by the camera</td>\n    <td>This camera model's hardware does not support audio.</td>\n</tr>\n<tr>\n    <td>403</td>\n    <td>Audio is not enabled for the organization</td>\n    <td>Check your organization's Privacy and Security settings. If audio is not enabled in the <a href=\"https://help.verkada.com/en/articles/6937133-feature-manager\">Feature Manager</a>, you will not be able to toggle the camera's audio status. </td>\n</tr>\n</table>\n\nFor standard HTTP response codes, refer to our <a href=\"/reference/request-methods\">General Troubleshooting</a> page.",
                "operationId": "postCameraAudioViewV1",
                "parameters": [],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/CameraAudioStatusPostRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "ok"
                    }
                },
                "summary": "Update Camera Audio Status",
                "tags": [
                    "Audio"
                ]
            }
        },
        "/cameras/v1/cloud_backup/settings": {
            "get": {
                "description": "",
                "operationId": "getCloudBackupViewV1",
                "parameters": [
                    {
                        "in": "query",
                        "name": "camera_id",
                        "required": true,
                        "schema": {
                            "description": "The unique identifier of the camera.",
                            "title": "Camera Id",
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/CloudBackupSettingsGetResponse"
                                }
                            }
                        },
                        "description": "OK"
                    }
                },
                "summary": "Get cloud backup settings for a certain camera.",
                "tags": [
                    "CloudBackup"
                ]
            },
            "post": {
                "description": "If camera cloud backup has been enabled and disabled before,\nenable it again will start backup from last disabled time",
                "operationId": "postCloudBackupViewV1",
                "parameters": [],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/CloudBackupSettingsPostRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "ok"
                    }
                },
                "summary": "Update cloud backup settings for a certain camera.",
                "tags": [
                    "CloudBackup"
                ]
            }
        },
        "/cameras/v1/devices": {
            "get": {
                "description": "Returns details of all cameras within the organization.\n\nDetails returned per camera are name, site, location, model, serial number, camera ID, MAC address, local IP, device retention, extended cloud retention (if any), date camera added to command, firmware update status, camera status, location latitude, location longitude, and location angle (in degrees).",
                "operationId": "getCameraInfoViewV1",
                "parameters": [
                    {
                        "in": "query",
                        "name": "page_token",
                        "required": false,
                        "schema": {
                            "description": "The pagination token used to fetch the next page of results.",
                            "title": "Page Token",
                            "type": "string"
                        }
                    },
                    {
                        "in": "query",
                        "name": "page_size",
                        "required": false,
                        "schema": {
                            "default": 100,
                            "description": "The number of items returned in a single response.\nDefault is 100. Max is 200.",
                            "exclusiveMinimum": true,
                            "maximum": 200,
                            "minimum": 0,
                            "title": "Page Size",
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/CameraInfoResponseV1"
                                }
                            }
                        },
                        "description": "OK"
                    }
                },
                "summary": "Get Camera Data",
                "tags": [
                    "Devices"
                ]
            }
        },
        "/cameras/v1/footage/link": {
            "get": {
                "description": "Returns link to video footage for a specified camera which will play footage from a specified timestamp.",
                "operationId": "getHistoryUrlViewV1",
                "parameters": [
                    {
                        "in": "query",
                        "name": "camera_id",
                        "required": true,
                        "schema": {
                            "description": "The unique identifier of the camera.",
                            "title": "Camera Id",
                            "type": "string"
                        }
                    },
                    {
                        "in": "query",
                        "name": "timestamp",
                        "required": false,
                        "schema": {
                            "description": "The timestamp of the footage on a specified camera.\nFormatted as a Unix timestamp in seconds.\nIf no timestamp is specified, a live link will be returned",
                            "title": "Timestamp",
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HistoryUrlResponse"
                                }
                            }
                        },
                        "description": "OK"
                    }
                },
                "summary": "Get Link to Footage",
                "tags": [
                    "Footage"
                ]
            }
        },
        "/cameras/v1/footage/thumbnails": {
            "get": {
                "description": "Returns a low-resolution or high-resolution thumbnail from a specified camera at or near a specified time.\n\nDefaults to low-resolution thumbnails.",
                "operationId": "getThumbnailImageViewV1",
                "parameters": [
                    {
                        "in": "query",
                        "name": "camera_id",
                        "required": true,
                        "schema": {
                            "description": "The unique identifier of the camera.",
                            "title": "Camera Id",
                            "type": "string"
                        }
                    },
                    {
                        "in": "query",
                        "name": "timestamp",
                        "required": false,
                        "schema": {
                            "description": "The approximate timestamp of the requested thumbnail.\nFormatted as a Unix timestamp in seconds.\nDefaults to the current time.",
                            "title": "Timestamp",
                            "type": "integer"
                        }
                    },
                    {
                        "in": "query",
                        "name": "resolution",
                        "required": false,
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/components/schemas/ResolutionEnum"
                                }
                            ],
                            "default": "low-res",
                            "description": "Returns a low-resolution thumbnail if this parameter is set to 'low-res'.\nReturns a high-resolution thumbnail if this parameter is set to 'hi-res'.\n\nDefaults to a low-resolution thumbnail."
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "ok"
                    }
                },
                "summary": "Get Thumbnail Image",
                "tags": [
                    "Footage"
                ]
            }
        },
        "/cameras/v1/footage/thumbnails/latest": {
            "get": {
                "description": "Returns the latest thumbnail from a specified camera in either low resolution or high resolution.",
                "operationId": "getThumbnailLatestViewV1",
                "parameters": [
                    {
                        "in": "query",
                        "name": "camera_id",
                        "required": true,
                        "schema": {
                            "description": "The unique identifier of camera.",
                            "title": "Camera Id",
                            "type": "string"
                        }
                    },
                    {
                        "in": "query",
                        "name": "resolution",
                        "required": false,
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/components/schemas/ResolutionEnum"
                                }
                            ],
                            "default": "low-res",
                            "description": "Returns a low-resolution thumbnail if this parameter is set to 'low-res'.\nReturns a high-resolution thumbnail if this parameter is set to 'hi-res'.\nDefaults to a low-resolution thumbnail."
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "ok"
                    }
                },
                "summary": "Get Latest Thumbnail Image",
                "tags": [
                    "Footage"
                ]
            }
        },
        "/cameras/v1/footage/thumbnails/link": {
            "get": {
                "description": "Returns a link to thumbnail image from a specified camera at a specified time.",
                "operationId": "getThumbnailLinkViewV1",
                "parameters": [
                    {
                        "in": "query",
                        "name": "camera_id",
                        "required": true,
                        "schema": {
                            "description": "The unique identifier of camera.",
                            "title": "Camera Id",
                            "type": "string"
                        }
                    },
                    {
                        "in": "query",
                        "name": "timestamp",
                        "required": false,
                        "schema": {
                            "description": "The timestamp when thumbnail was captured.\nFormatted as a Unix timestamp in seconds.\nDefaults to the current time.",
                            "title": "Timestamp",
                            "type": "integer"
                        }
                    },
                    {
                        "in": "query",
                        "name": "expiry",
                        "required": false,
                        "schema": {
                            "default": 86400,
                            "description": "The expiry duration for the generated link.\nFormatted as a Unix timestamp in seconds.\nDefaults to one day.",
                            "title": "Expiry",
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ThumbnailResponse"
                                }
                            }
                        },
                        "description": "OK"
                    }
                },
                "summary": "Get Thumbnail Link",
                "tags": [
                    "Footage"
                ]
            }
        },
        "/cameras/v1/footage/token": {
            "get": {
                "description": "This is a prerequisite to stream live or historical footage. It returns a JWT (JSON Web Token) which provides access to the streaming endpoint for 30 minutes. For detailed information on streaming footage, refer to <a href=\"https://apidocs.verkada.com/reference/getfootagestreamviewv1\">Stream Footage (Live or Historical)</a>.",
                "operationId": "getFootageTokenViewV1",
                "parameters": [],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/FootageTokenResponseV1"
                                }
                            }
                        },
                        "description": "OK"
                    }
                },
                "security": [
                    {
                        "GetToken": []
                    }
                ],
                "summary": "Get Streaming Token",
                "tags": [
                    "Footage"
                ]
            }
        },
        "/cameras/v1/occupancy_trend_enabled": {
            "get": {
                "description": "Returns a list of of all cameras that support occupancy trends with its line presets ids in the organization.\n\nDetails returned per camera are camera_id and list of preset_ids of the line presets of the camera.",
                "operationId": "getOccupancyTrendsCamerasViewV1",
                "parameters": [],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/OccupancyTrendsCamerasResponseV1"
                                }
                            }
                        },
                        "description": "OK"
                    }
                },
                "summary": "Get Occupancy Trends Cameras",
                "tags": [
                    "Devices"
                ]
            }
        },
        "/cameras/v1/people/person_of_interest": {
            "delete": {
                "description": "Deletes a Person of Interest from an organization using a specified person ID.",
                "operationId": "deletePersonOfInterestViewV1",
                "parameters": [
                    {
                        "in": "query",
                        "name": "person_id",
                        "required": true,
                        "schema": {
                            "description": "The unique identifier of the Person of Interest.",
                            "title": "Person Id",
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PersonOfInterest"
                                }
                            }
                        },
                        "description": "OK"
                    }
                },
                "summary": "Delete a Person of Interest",
                "tags": [
                    "People"
                ]
            },
            "get": {
                "description": "Returns the time of creation, label, last time seen, and person ID for each Person of Interest for an organization.",
                "operationId": "getPersonOfInterestViewV1",
                "parameters": [
                    {
                        "in": "query",
                        "name": "page_size",
                        "required": false,
                        "schema": {
                            "default": 100,
                            "description": "The number of items returned in a single response.\nDefault is 100. Max is 200.",
                            "exclusiveMinimum": true,
                            "maximum": 200,
                            "minimum": 0,
                            "title": "Page Size",
                            "type": "integer"
                        }
                    },
                    {
                        "in": "query",
                        "name": "page_token",
                        "required": false,
                        "schema": {
                            "description": "The pagination token used to fetch the next page of results.",
                            "title": "Page Token",
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PersonOfInterestList"
                                }
                            }
                        },
                        "description": "OK"
                    }
                },
                "summary": "Get All Person of Interest",
                "tags": [
                    "People"
                ]
            },
            "patch": {
                "description": "Updates a label of Person of Interest for an organization using a specified person ID.",
                "operationId": "patchPersonOfInterestViewV1",
                "parameters": [
                    {
                        "in": "query",
                        "name": "person_id",
                        "required": true,
                        "schema": {
                            "description": "The unique identifier of the Person of Interest.",
                            "title": "Person Id",
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/PathPersonOfInterestRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PersonOfInterest"
                                }
                            }
                        },
                        "description": "OK"
                    }
                },
                "summary": "Update a Person of Interest",
                "tags": [
                    "People"
                ]
            },
            "post": {
                "description": "Creates a Person of Interest for an organization using a specified base64 encoded string of face image and label.",
                "operationId": "postPersonOfInterestViewV1",
                "parameters": [],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/PersonOfInterestPostBodyRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PersonOfInterest"
                                }
                            }
                        },
                        "description": "OK"
                    }
                },
                "summary": "Create a Person of Interest",
                "tags": [
                    "People"
                ]
            }
        },
        "/cameras/v1/video_tagging/event": {
            "delete": {
                "description": "",
                "operationId": "deleteVideoTaggingEventViewV1",
                "parameters": [
                    {
                        "in": "query",
                        "name": "camera_id",
                        "required": true,
                        "schema": {
                            "description": "The unique identifier of the camera.",
                            "title": "Camera Id",
                            "type": "string"
                        }
                    },
                    {
                        "in": "query",
                        "name": "time_ms",
                        "required": true,
                        "schema": {
                            "description": "The event epoch time in milliseconds.",
                            "title": "Time Ms",
                            "type": "integer"
                        }
                    },
                    {
                        "in": "query",
                        "name": "event_type_uid",
                        "required": true,
                        "schema": {
                            "description": "The unique identifier of the event type.",
                            "title": "Event Type Uid",
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "ok"
                    }
                },
                "summary": "Delete a Helix Event",
                "tags": [
                    "Methods"
                ]
            },
            "get": {
                "description": "",
                "operationId": "getVideoTaggingEventViewV1",
                "parameters": [
                    {
                        "in": "query",
                        "name": "camera_id",
                        "required": true,
                        "schema": {
                            "description": "The unique identifier of the camera.",
                            "title": "Camera Id",
                            "type": "string"
                        }
                    },
                    {
                        "in": "query",
                        "name": "time_ms",
                        "required": true,
                        "schema": {
                            "description": "The event epoch time in milliseconds.",
                            "title": "Time Ms",
                            "type": "integer"
                        }
                    },
                    {
                        "in": "query",
                        "name": "event_type_uid",
                        "required": true,
                        "schema": {
                            "description": "The unique identifier of the event type.",
                            "title": "Event Type Uid",
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/VideoTaggingEventV1"
                                }
                            }
                        },
                        "description": "OK"
                    }
                },
                "summary": "Get a Helix Event",
                "tags": [
                    "Methods"
                ]
            },
            "patch": {
                "description": "",
                "operationId": "patchVideoTaggingEventViewV1",
                "parameters": [
                    {
                        "in": "query",
                        "name": "camera_id",
                        "required": true,
                        "schema": {
                            "description": "The unique identifier of the camera.",
                            "title": "Camera Id",
                            "type": "string"
                        }
                    },
                    {
                        "in": "query",
                        "name": "time_ms",
                        "required": true,
                        "schema": {
                            "description": "The event epoch time in milliseconds.",
                            "title": "Time Ms",
                            "type": "integer"
                        }
                    },
                    {
                        "in": "query",
                        "name": "event_type_uid",
                        "required": true,
                        "schema": {
                            "description": "The unique identifier of the event type.",
                            "title": "Event Type Uid",
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/PatchVideoTaggingEventRequestV1"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "ok"
                    }
                },
                "summary": "Update a Helix Event",
                "tags": [
                    "Methods"
                ]
            },
            "post": {
                "description": "",
                "operationId": "postVideoTaggingEventViewV1",
                "parameters": [],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/VideoTaggingEventPostBodyRequestV1"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "ok"
                    }
                },
                "summary": "Create a Helix Event",
                "tags": [
                    "Methods"
                ]
            }
        },
        "/cameras/v1/video_tagging/event/search": {
            "post": {
                "description": "",
                "operationId": "postVideoTaggingEventSearchViewV1",
                "parameters": [],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/VideoTaggingEventSearchRequestV1"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/VideoTaggingEventListV1"
                                }
                            }
                        },
                        "description": "OK"
                    }
                },
                "summary": "Search a Helix Event",
                "tags": [
                    "Methods"
                ]
            }
        },
        "/cameras/v1/video_tagging/event_type": {
            "delete": {
                "description": "",
                "operationId": "deleteVideoTaggingEventTypeViewV1",
                "parameters": [
                    {
                        "in": "query",
                        "name": "event_type_uid",
                        "required": true,
                        "schema": {
                            "description": "The unique identifier of the event type.",
                            "title": "Event Type Uid",
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "ok"
                    }
                },
                "summary": "Delete a Helix Event Type",
                "tags": [
                    "Methods"
                ]
            },
            "get": {
                "description": "",
                "operationId": "getVideoTaggingEventTypeViewV1",
                "parameters": [
                    {
                        "in": "query",
                        "name": "event_type_uid",
                        "required": false,
                        "schema": {
                            "description": "The unique identifier of the event type.",
                            "title": "Event Type Uid",
                            "type": "string"
                        }
                    },
                    {
                        "in": "query",
                        "name": "name",
                        "required": false,
                        "schema": {
                            "description": "The name of the event type.",
                            "title": "Name",
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/VideoTaggingEventTypeListV1"
                                }
                            }
                        },
                        "description": "OK"
                    }
                },
                "summary": "Get List of Helix Event Types",
                "tags": [
                    "Methods"
                ]
            },
            "patch": {
                "description": "",
                "operationId": "patchVideoTaggingEventTypeViewV1",
                "parameters": [
                    {
                        "in": "query",
                        "name": "event_type_uid",
                        "required": true,
                        "schema": {
                            "description": "The unique identifier of the event type.",
                            "title": "Event Type Uid",
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/PatchVideoTaggingEventTypeRequestV1"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "ok"
                    }
                },
                "summary": "Update a Helix Event Type",
                "tags": [
                    "Methods"
                ]
            },
            "post": {
                "description": "",
                "operationId": "postVideoTaggingEventTypeViewV1",
                "parameters": [],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/VideoTaggingEventTypePostBodyRequestV1"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/VideoTaggingEventTypeV1"
                                }
                            }
                        },
                        "description": "OK"
                    }
                },
                "summary": "Create a Helix Event Type",
                "tags": [
                    "Methods"
                ]
            }
        },
        "/core/v1/audit_log": {
            "get": {
                "description": "Returns audit logs for an organization within a specified time range.\n\nAll audit logs include a timestamp in ISO 8601 date time format, user info, IP address, event info and device inf.",
                "operationId": "getAuditLogsViewV1",
                "parameters": [
                    {
                        "in": "query",
                        "name": "start_time",
                        "required": false,
                        "schema": {
                            "description": "The start of time range for requested audit logs.\nFormatted as a Unix timestamp in seconds.\nDefaults to an hour from the current time.",
                            "title": "Start Time",
                            "type": "integer"
                        }
                    },
                    {
                        "in": "query",
                        "name": "end_time",
                        "required": false,
                        "schema": {
                            "description": "The end of time range for requested audit logs.\nFormatted as a Unix timestamp in seconds.\nDefaults to the current time.",
                            "title": "End Time",
                            "type": "integer"
                        }
                    },
                    {
                        "in": "query",
                        "name": "use_processed_timestamp",
                        "required": false,
                        "schema": {
                            "default": false,
                            "description": "Whether to return audit logs where `processed_timestamp` is between `start_time` and `end_time` instead of `timestamp`. Useful when polling for new audit logs on a regular cadence to ensure logs that had not finished processing during an earlier polling window are still eventually captured.\n\nNote that audit logs where `timestamp` is before 2025-08-12 do not support this feature.",
                            "title": "Use Processed Timestamp",
                            "type": "boolean"
                        }
                    },
                    {
                        "in": "query",
                        "name": "page_token",
                        "required": false,
                        "schema": {
                            "description": "The pagination token used to fetch the next page of results.",
                            "title": "Page Token",
                            "type": "string"
                        }
                    },
                    {
                        "in": "query",
                        "name": "page_size",
                        "required": false,
                        "schema": {
                            "default": 100,
                            "description": "The number of items returned in a single response.\nDefault is 100. Max is 200.",
                            "exclusiveMinimum": true,
                            "maximum": 200,
                            "minimum": 0,
                            "title": "Page Size",
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/AuditLogResponseV1"
                                }
                            }
                        },
                        "description": "OK"
                    }
                },
                "summary": "Get Audit Logs",
                "tags": [
                    "Audit Log"
                ]
            }
        },
        "/core/v1/user": {
            "delete": {
                "description": "Deletes a user for an organization based on either provided user ID or an external ID set during creation.",
                "operationId": "deleteUserViewV1",
                "parameters": [
                    {
                        "in": "query",
                        "name": "user_id",
                        "required": false,
                        "schema": {
                            "description": "The unique identifier of the user managed by Verkada.",
                            "title": "User Id",
                            "type": "string"
                        }
                    },
                    {
                        "in": "query",
                        "name": "external_id",
                        "required": false,
                        "schema": {
                            "description": "A unique identifier managed externally provided by the consumer.",
                            "title": "External Id",
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/DeleteUserResponse"
                                }
                            }
                        },
                        "description": "OK"
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BadRequestDelete"
                                }
                            }
                        },
                        "description": "Bad Request"
                    }
                },
                "summary": "Delete User",
                "tags": [
                    "Users"
                ]
            },
            "get": {
                "description": "Returns a user for an organization based on either provided user ID or an external ID set during creation.",
                "operationId": "getUserViewV1",
                "parameters": [
                    {
                        "in": "query",
                        "name": "user_id",
                        "required": false,
                        "schema": {
                            "description": "The unique identifier of the user managed by Verkada.",
                            "title": "User Id",
                            "type": "string"
                        }
                    },
                    {
                        "in": "query",
                        "name": "external_id",
                        "required": false,
                        "schema": {
                            "description": "A unique identifier managed externally provided by the consumer.",
                            "title": "External Id",
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/GetUserResponse"
                                }
                            }
                        },
                        "description": "OK"
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BadRequestGet"
                                }
                            }
                        },
                        "description": "Bad Request"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NotFound"
                                }
                            }
                        },
                        "description": "Not Found"
                    }
                },
                "summary": "Get User",
                "tags": [
                    "Users"
                ]
            },
            "post": {
                "description": "Creates a user for in an organization. External ID required.\nOtherwise, the newly created user will contain a user ID which can be used for identification.",
                "operationId": "postUserViewV1",
                "parameters": [],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/CreateUserRequestBody"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/CreateUserResponse"
                                }
                            }
                        },
                        "description": "OK"
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BadRequestCreate"
                                }
                            }
                        },
                        "description": "Bad Request"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ConflictingExternalId"
                                }
                            }
                        },
                        "description": "Conflict"
                    }
                },
                "summary": "Create User",
                "tags": [
                    "Users"
                ]
            },
            "put": {
                "description": "Updates a user's metadata for an organization based on either provided user ID or an external ID set during creation.",
                "operationId": "putUserViewV1",
                "parameters": [
                    {
                        "in": "query",
                        "name": "user_id",
                        "required": false,
                        "schema": {
                            "description": "The unique identifier of the user managed by Verkada.",
                            "title": "User Id",
                            "type": "string"
                        }
                    },
                    {
                        "in": "query",
                        "name": "external_id",
                        "required": false,
                        "schema": {
                            "description": "A unique identifier managed externally provided by the consumer.",
                            "title": "External Id",
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/UpdateUserRequestBody"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/UpdateUserResponse"
                                }
                            }
                        },
                        "description": "OK"
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BadRequestUpdate"
                                }
                            }
                        },
                        "description": "Bad Request"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NotFound"
                                }
                            }
                        },
                        "description": "Not Found"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ConflictingExternalId"
                                }
                            }
                        },
                        "description": "Conflict"
                    }
                },
                "summary": "Update User",
                "tags": [
                    "Users"
                ]
            }
        },
        "/environment/v1/alerts": {
            "get": {
                "description": "Returns all alerts for all (or subset of) sensors in an org over a specified time range.\n\nThe response will include a list of sensor alerts for the organization (or given devices), including the device that triggered the alert, the alert threshold, and start and end timestamp of the alert.",
                "operationId": "getSensorAlertsViewV1",
                "parameters": [
                    {
                        "in": "query",
                        "name": "device_ids",
                        "required": true,
                        "schema": {
                            "description": "A comma separated list of sensor IDs.",
                            "title": "Device Ids",
                            "type": "string"
                        }
                    },
                    {
                        "in": "query",
                        "name": "start_time",
                        "required": false,
                        "schema": {
                            "description": "The start of the time range for requested alerts.\nFormatted as a Unix timestamp in seconds.\nDefault value is an hour from the current time.",
                            "title": "Start Time",
                            "type": "integer"
                        }
                    },
                    {
                        "in": "query",
                        "name": "end_time",
                        "required": false,
                        "schema": {
                            "description": "The end of the time range for requested alerts.\nFormatted in Unix timestamp in seconds.\nDefault value is the current time.",
                            "title": "End Time",
                            "type": "integer"
                        }
                    },
                    {
                        "in": "query",
                        "name": "page_size",
                        "required": false,
                        "schema": {
                            "default": 100,
                            "description": "The number of items returned in a single response.\nDefault is 100. Max is 200.",
                            "exclusiveMinimum": true,
                            "maximum": 200,
                            "minimum": 0,
                            "title": "Page Size",
                            "type": "integer"
                        }
                    },
                    {
                        "in": "query",
                        "name": "page_token",
                        "required": false,
                        "schema": {
                            "description": "The pagination token used to fetch the next page of results.",
                            "title": "Page Token",
                            "type": "string"
                        }
                    },
                    {
                        "in": "query",
                        "name": "fields",
                        "required": false,
                        "schema": {
                            "description": "Retrieves alerts only for the given fields.\n\nFields must be one or multiple comma separated values from <code>humidity</code>, <code>motion</code>, <code>noise_level</code>, <code>pm_2_5</code>, <code>pm_4_0</code>, <code>pm_1_0_0</code>, <code>tamper</code>, <code>temperature</code>, <code>tvoc</code>(SV11), <code>usa_air_quality_index</code>, <code>vape_index</code>, <code>carbon_dioxide</code>, <code>carbon_monoxide</code>, <code>barometric_pressure</code>, <code>formaldehyde</code>, <code>ambient_light</code>, <code>tvoc_index</code>(SV23/SV25),<code>heat_index</code>.\n\nIf left blank, alerts of all sensor types will be returned in the response.",
                            "title": "Fields",
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/SensorAlertsResponseV1"
                                }
                            }
                        },
                        "description": "OK"
                    }
                },
                "summary": "Get Sensor Alerts",
                "tags": [
                    "Alerts"
                ]
            }
        },
        "/environment/v1/data": {
            "get": {
                "description": "Returns all sensor readings for a particular sensor over a specified time range.\n\nResponses will include the start and end time of the data requested and device information (ID, serial number) alongside the readings.",
                "operationId": "getSensorDataViewV1",
                "parameters": [
                    {
                        "in": "query",
                        "name": "device_id",
                        "required": true,
                        "schema": {
                            "description": "The unique identifier of the device.",
                            "title": "Device Id",
                            "type": "string"
                        }
                    },
                    {
                        "in": "query",
                        "name": "start_time",
                        "required": false,
                        "schema": {
                            "description": "The start of the time range for requested sensor data.\nFormatted as a Unix timestamp in seconds.\nDefaults to an hour from the current time.",
                            "title": "Start Time",
                            "type": "integer"
                        }
                    },
                    {
                        "in": "query",
                        "name": "end_time",
                        "required": false,
                        "schema": {
                            "description": "The end of the time range for requested sensor data.\nFormatted as a Unix timestamp in seconds.\nDefaults to the current time.",
                            "title": "End Time",
                            "type": "integer"
                        }
                    },
                    {
                        "in": "query",
                        "name": "page_token",
                        "required": false,
                        "schema": {
                            "description": "The pagination token used to fetch the next page of results.",
                            "title": "Page Token",
                            "type": "string"
                        }
                    },
                    {
                        "in": "query",
                        "name": "page_size",
                        "required": false,
                        "schema": {
                            "default": 100,
                            "description": "The number of items returned in a single response.\nDefault is 100. Max is 200.",
                            "exclusiveMinimum": true,
                            "maximum": 200,
                            "minimum": 0,
                            "title": "Page Size",
                            "type": "integer"
                        }
                    },
                    {
                        "in": "query",
                        "name": "fields",
                        "required": false,
                        "schema": {
                            "description": "One or multiple comma separated values from <code>humidity</code>, <code>motion</code>, <code>noise_level</code>, <code>pm_2_5</code>, <code>pm_4_0</code>, <code>pm_1_0_0</code>, <code>tamper</code>, <code>temperature</code>, <code>tvoc</code>(SV11), <code>usa_air_quality_index</code>, <code>vape_index</code>, <code>carbon_dioxide</code>, <code>carbon_monoxide</code>, <code>barometric_pressure</code>, <code>formaldehyde</code>, <code>ambient_light</code>, <code>tvoc_index</code>(SV23/SV25), <code>heat_index</code>.\n\nIf blank, all sensor readings will be returned in the response.",
                            "title": "Fields",
                            "type": "string"
                        }
                    },
                    {
                        "in": "query",
                        "name": "interval",
                        "required": false,
                        "schema": {
                            "description": "The time interval for the requested sensor data.\n\nData is stored with 1 second intervals for 30 days, and with 5 minute intervals for data between 30 days and 365 days old.\n\nA valid value for this field is a number followed by a supported format. Supported formats are <code>s</code>, <code>m</code>, and <code>h</code> for seconds, minutes, and hours, respectively.\n\nFor example, `5m` would specify a 5 minutes interval for the data.\n\nIf left blank, a default resolution will be calculated based on time range.",
                            "title": "Interval",
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/SensorDataResponseV1"
                                }
                            }
                        },
                        "description": "OK"
                    }
                },
                "summary": "Get Sensor Data",
                "tags": [
                    "Data"
                ]
            }
        },
        "/events/v1/access": {
            "get": {
                "description": "Returns events for an organization within a specified time range.",
                "operationId": "getEventsViewV1",
                "parameters": [
                    {
                        "in": "query",
                        "name": "start_time",
                        "required": false,
                        "schema": {
                            "description": "The start of the time range for requested events.\nFormatted as a Unix timestamp in seconds.\nDefault value is an hour ago from the current time.",
                            "title": "Start Time",
                            "type": "integer"
                        }
                    },
                    {
                        "in": "query",
                        "name": "end_time",
                        "required": false,
                        "schema": {
                            "description": "The end of the time range for requested events.\nFormatted as a Unix timestamp in seconds.\nDefault value is the current time.",
                            "title": "End Time",
                            "type": "integer"
                        }
                    },
                    {
                        "in": "query",
                        "name": "page_token",
                        "required": false,
                        "schema": {
                            "description": "The pagination token used to fetch the next page of results.",
                            "title": "Page Token",
                            "type": "string"
                        }
                    },
                    {
                        "in": "query",
                        "name": "page_size",
                        "required": false,
                        "schema": {
                            "default": 100,
                            "description": "The number of items returned in a single response.\nDefault is 100. Max is 200.",
                            "exclusiveMinimum": true,
                            "maximum": 200,
                            "minimum": 0,
                            "title": "Page Size",
                            "type": "integer"
                        }
                    },
                    {
                        "in": "query",
                        "name": "event_type",
                        "required": false,
                        "schema": {
                            "description": "One or multiple comma separated values from <code>door_opened</code>, <code>door_rejected</code>, <code>door_granted</code>, <code>door_forced_open</code>, <code>door_held_open</code>, <code>door_tailgating</code>, <code>door_crowd_detection</code>, <code>door_tamper</code>, <code>door_poi_detection</code>, <code>door_initialized</code>, <code>door_armed</code>, <code>door_armed_button_pressed</code>, <code>door_aux_unlock</code>, <code>door_locked</code>, <code>door_unlocked</code>, <code>door_unarmed_event</code>, <code>door_code_entered_event</code>, <code>door_button_press_entered_event</code>, <code>door_lock_state_changed</code>, <code>door_lockdown</code>, <code>door_auxinput_change_state</code>, <code>door_auxinput_held</code>, <code>door_low_battery</code>, <code>door_critical_battery</code>, <code>door_mobile_nfc_scan_accepted</code>, <code>door_mobile_nfc_scan_rejected</code>, <code>door_user_database_corrupt</code>, <code>door_keycard_entered_accepted</code>, <code>door_keycard_entered_rejected</code>, <code>door_code_entered_accepted</code>, <code>door_code_entered_rejected</code>, <code>door_remote_unlock_accepted</code>, <code>door_remote_unlock_rejected</code>, <code>door_press_to_exit_accepted</code>, <code>door_ble_unlock_attempt_accepted</code>, <code>door_ble_unlock_attempt_rejected</code>, <code>door_acu_offline</code>, <code>door_fire_alarm_triggered</code>, <code>door_fire_alarm_released</code>, <code>door_acu_fire_alarm_triggered</code>, <code>door_acu_fire_alarm_released</code>, <code>door_schedule_toggle</code>, <code>door_acu_dpi_cut</code>, <code>door_acu_dpi_short</code>, <code>door_acu_rex_cut</code>, <code>door_acu_rex_short</code>, <code>door_acu_rex2_cut</code>, <code>door_acu_rex2_short</code>, <code>door_acu_auxinput_cut</code>, <code>door_acu_auxinput_short</code>, <code>door_lockdown_debounced</code>, <code>door_lp_presented_accepted</code>, <code>door_lp_presented_rejected</code>, <code>door_apb_double_entry</code>, <code>door_apb_double_exit</code>, <code>all_access_granted</code>, <code>all_access_rejected</code>, <code>door_auxoutput_activated</code>.<code>door_auxoutput_deactivated</code>.<code>door_schedule_override_applied</code>, <code>door_schedule_override_removed</code>.",
                            "title": "Event Type",
                            "type": "string"
                        }
                    },
                    {
                        "in": "query",
                        "name": "site_id",
                        "required": false,
                        "schema": {
                            "description": "One or multiple comma separated values of site identifiers.",
                            "title": "Site Id",
                            "type": "string"
                        }
                    },
                    {
                        "in": "query",
                        "name": "device_id",
                        "required": false,
                        "schema": {
                            "description": "One or multiple comma separated values of device identifiers.",
                            "title": "Device Id",
                            "type": "string"
                        }
                    },
                    {
                        "in": "query",
                        "name": "user_id",
                        "required": false,
                        "schema": {
                            "description": "One or multiple comma separated values of user identifiers.",
                            "title": "User Id",
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/EventsResponseV1"
                                }
                            }
                        },
                        "description": "OK"
                    }
                },
                "summary": "Get Access Events",
                "tags": [
                    "Events"
                ]
            }
        },
        "/guest/v1/deny_list": {
            "delete": {
                "description": "Deletes all deny list entries, including the CSV, POI entries, and photos from the S3 buckets.",
                "operationId": "deleteDenyListView",
                "parameters": [
                    {
                        "in": "query",
                        "name": "site_id",
                        "required": false,
                        "schema": {
                            "description": "The unique identifier of the Guest site. Valid sites can be retrieved with the Guest Site API.",
                            "format": "uuid",
                            "title": "Site Id",
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "ok"
                    }
                },
                "summary": "Delete a Guest deny list",
                "tags": [
                    "Deny List"
                ]
            },
            "get": {
                "description": "Returns a deny list csv jsonified.",
                "operationId": "getDenyListView",
                "parameters": [
                    {
                        "in": "query",
                        "name": "site_id",
                        "required": false,
                        "schema": {
                            "description": "The unique identifier of the Guest site. Valid sites can be retrieved with the Guest Site API.",
                            "format": "uuid",
                            "title": "Site Id",
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/GetDenyListResponse"
                                }
                            }
                        },
                        "description": "OK"
                    }
                },
                "summary": "Get Guest deny list",
                "tags": [
                    "DenyList"
                ]
            },
            "post": {
                "description": "Uploads deny list in csv format to vdoorman.",
                "operationId": "postDenyListView",
                "parameters": [
                    {
                        "in": "query",
                        "name": "site_id",
                        "required": false,
                        "schema": {
                            "description": "The unique identifier of the Guest site. Valid sites can be retrieved with the Guest Site API.",
                            "format": "uuid",
                            "title": "Site Id",
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/DenyListBodyRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PostDenyListResponse"
                                }
                            }
                        },
                        "description": "OK"
                    }
                },
                "summary": "Post Guest Deny List",
                "tags": [
                    "Deny List"
                ]
            }
        },
        "/guest/v1/sites": {
            "get": {
                "description": "Returns a list of Guest sites in an organization.",
                "operationId": "getGuestSiteView",
                "parameters": [],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/GuestSiteResponse"
                                }
                            }
                        },
                        "description": "OK"
                    }
                },
                "summary": "Get Guest Sites",
                "tags": [
                    "Sites"
                ]
            }
        },
        "/guest/v1/visits": {
            "get": {
                "description": "Returns a list of visits in a site.",
                "operationId": "getVisitView",
                "parameters": [
                    {
                        "in": "query",
                        "name": "site_id",
                        "required": true,
                        "schema": {
                            "description": "The unique identifier of the Guest site. Valid sites can be retrieved with the Guest Site API.",
                            "format": "uuid",
                            "title": "Site Id",
                            "type": "string"
                        }
                    },
                    {
                        "in": "query",
                        "name": "start_time",
                        "required": true,
                        "schema": {
                            "description": "The start of the time range for requested visits. Formatted as a UNIX timestamp. Must be at most one day away from end_time.",
                            "title": "Start Time",
                            "type": "integer"
                        }
                    },
                    {
                        "in": "query",
                        "name": "end_time",
                        "required": true,
                        "schema": {
                            "description": "The end of the time range for requested visits. Formatted as a UNIX timestamp. Must be at most one day away from start_time.",
                            "title": "End Time",
                            "type": "integer"
                        }
                    },
                    {
                        "in": "query",
                        "name": "page_token",
                        "required": false,
                        "schema": {
                            "description": "The pagination token used to fetch the next page of results.",
                            "title": "Page Token",
                            "type": "string"
                        }
                    },
                    {
                        "in": "query",
                        "name": "page_size",
                        "required": false,
                        "schema": {
                            "default": 100,
                            "description": "The number of items returned in a single response.\nDefault is 100. Max is 200.",
                            "exclusiveMinimum": true,
                            "maximum": 200,
                            "minimum": 0,
                            "title": "Page Size",
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/VisitResponse"
                                }
                            }
                        },
                        "description": "OK"
                    }
                },
                "summary": "Get Guest visits",
                "tags": [
                    "Visits"
                ]
            }
        },
        "/stream/cameras/v1/footage/stream/{key}": {
            "get": {
                "description": "<b>Introduction:</b>\nAlthough many Verkada customers access camera footage via Command, we offer a flexible solution for integrating third-party applications with Verkada cameras. Streaming API allows users to stream both live and historical footage from cameras using the <a href=\"https://developer.apple.com/streaming/\">HLS (HTTP Live Streaming) protocol</a>. HLS is an open protocol designed for streaming media content over the internet, supported by many video players. This document serves as a guide for integrating camera footage into third-party applications.\n\n<b>Prerequisites:</b>\nBefore integrating with the Streaming API, ensure you have the following:\n<ol>\n<li>Access to the Verkada API. Read our <a href=\"https://apidocs.verkada.com/reference/quick-start-guide\">Quick Start Guide</a></li>\n<li>An application equipped with a video player capable of streaming via HLS protocol (i.e <a href=\"https://github.com/video-dev/hls.js\">HLS.js</a>)</li>\n<li>A backend server capable of communicating with Verkada API servers</li>\n</ol>\n\n<b>Steps to Stream Footage:</b>\nFollow these steps to stream footage using the Streaming API:\n\n<b>Step 1</b>: Acquire a JSON Web Token (JWT) via <a href=\"https://apidocs.verkada.com/reference/getfootagetokenviewv1\">Get Streaming Token</a> endpoint\n\nTo access the streaming endpoint, obtain a JWT via the Get Streaming Token endpoint. While the streaming endpoint doesn't require an API Key, it requires a valid JWT as a query parameter for streaming footage.\n\n<b>Step 2</b>: Assemble the API endpoint URL\nConstruct the full API endpoint URL with the necessary parameters. Determine whether you're streaming live or historical footage, specify the resolution (low or high), identify the camera, and identify the organization. Refer to the parameter documentation for detailed specifications.\n\nCertain parameters must have a single value, while others don't need to be manually specified. Ensure all parameters have the correct values. Upon completing this step, you will have a fully constructed URL for the endpoint, which will return an m3u8 playlist file in response.\n\n<b>Note</b>: Specify the <code>key</code> as <code>stream.m3u8</code> to start HLS streaming for live or historical footage.\n\n<b>Step 3</b>: Call the endpoint to stream footage\n\nOnce you've assembled the endpoint URL, you can either directly call the endpoint or let compatible video players handle the streaming process. Most HLS-compatible players will automatically interact with the endpoint, manage the m3u8 playlist response, and request subsequent video segments.\n\nAlternatively, if you want to directly handle the m3u8 playlist output in your frontend code, you can parse the list of video segment files and render footage according to your application's requirements.\n\n<b>Response Codes:</b>\n\n<table>\n<tr>\n    <th>Response Code</th>\n    <th>Message</th>\n    <th>Troubleshooting Steps</th>\n</tr>\n<tr>\n    <td>500</td>\n    <td>Failed authentication step</td>\n    <td>Check if a valid JSON web token was submitted.</td>\n</tr>\n<tr>\n    <td>500</td>\n    <td>Internal Server Error</td>\n    <td>Verkada's server might be experiencing issues. Submit a support ticket if it fails repeatedly.</td>\n</tr>\n<tr>\n    <td>500</td>\n    <td>Error Fetching Live Video m3u8</td>\n    <td>Check if all query parameters have correct values.</td>\n</tr>\n<tr>\n    <td>500</td>\n    <td>Error Fetching Historical Video m3u8</td>\n    <td>Check if all query parameters have correct values and the footage needed (i.e. timestamp specified) is within the camera's days of retention.</td>\n</tr>\n<tr>\n    <td>500</td>\n    <td>Error Fetching Live Video Init mp4 File</td>\n    <td>Check if all query parameters have correct values.</td>\n</tr>\n<tr>\n    <td>500</td>\n    <td>Error Fetching Historical Video Init mp4 File</td>\n    <td>Check if all query parameters have correct values and the footage needed (i.e. timestamp specified) is within the camera's days of retention.</td>\n</tr>\n<tr>\n    <td>500</td>\n    <td>Error Fetching Historical Video m4s File</td>\n    <td>Check if all query parameters have correct values.</td>\n</tr>\n<tr>\n    <td>500</td>\n    <td>Error Fetching Live Video m4s File</td>\n    <td>Check if all query parameters have correct values.</td>\n</tr>\n<tr>\n    <td>500</td>\n    <td>Error Fetching Historical Video Encryption Key</td>\n    <td>Check if all query parameters have correct values.</td>\n</tr>\n</table>\n\nFor standard HTTP response codes, refer to our <a href=\"/reference/request-methods\">General Troubleshooting</a> page.",
                "operationId": "getFootageStreamViewV1",
                "parameters": [
                    {
                        "in": "path",
                        "name": "key",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "in": "query",
                        "name": "org_id",
                        "required": true,
                        "schema": {
                            "description": "The unique identifier of the organization.",
                            "title": "Org Id",
                            "type": "string"
                        }
                    },
                    {
                        "in": "query",
                        "name": "camera_id",
                        "required": true,
                        "schema": {
                            "description": "The unique identifier of the camera.",
                            "title": "Camera Id",
                            "type": "string"
                        }
                    },
                    {
                        "in": "query",
                        "name": "start_time",
                        "required": false,
                        "schema": {
                            "default": 0,
                            "description": "The start time of the video stream on a specified camera.\nFormatted as epoch time in seconds.\nFor live footage stream, set to <code>0</code>.\nFor history footage stream, <code>start_time</code> - <code>end_time</code> should be less than or equal to <code>3600</code>.\n\nDefault: <code>0</code>",
                            "title": "Start Time",
                            "type": "integer"
                        }
                    },
                    {
                        "in": "query",
                        "name": "end_time",
                        "required": false,
                        "schema": {
                            "default": 0,
                            "description": "The end time of the video stream on a specified camera.\nFormatted as epoch time in seconds.\nFor live footage stream, set to <code>0</code>.\nFor history footage stream, <code>start_time</code> - <code>end_time</code> should be less than or equal to <code>3600</code>.\n\nDefault: <code>0</code>",
                            "title": "End Time",
                            "type": "integer"
                        }
                    },
                    {
                        "in": "query",
                        "name": "codec",
                        "required": false,
                        "schema": {
                            "default": "hevc",
                            "description": "The codec used for the video stream.\n\nDefault: <code>hevc</code>",
                            "title": "Codec",
                            "type": "string"
                        }
                    },
                    {
                        "in": "query",
                        "name": "resolution",
                        "required": false,
                        "schema": {
                            "default": "low_res",
                            "description": "The resolution of the video stream.\nFor live video stream, set to <code>high_res</code> for the high resolution stream, and set to <code>low_res</code> for the low resolution stream.\nFor history video streaming, set to <code>high_res</code> for a mix of low and high resolution video stream with high resolution footage prioritized when available and set to <code>low_res</code> for only low resolution footage.\n\nDefault: <code>low_res</code>",
                            "title": "Resolution",
                            "type": "string"
                        }
                    },
                    {
                        "in": "query",
                        "name": "type",
                        "required": false,
                        "schema": {
                            "default": "stream",
                            "description": "The video type.\nThis parameter is reserved for solely future compatibility. Set to <code>stream</code>.\n\nDefault: <code>stream</code>",
                            "title": "Type",
                            "type": "string"
                        }
                    },
                    {
                        "in": "query",
                        "name": "jwt",
                        "required": true,
                        "schema": {
                            "description": "A short lived token that will be used to verify the permission to stream live or history footage from the camera.\nThis can be acquired with the <a href='https://apidocs.verkada.com/reference/getfootagetokenviewv1'>Get Streaming Token endpoint</a>.",
                            "title": "Jwt",
                            "type": "string"
                        }
                    },
                    {
                        "in": "query",
                        "name": "file",
                        "required": false,
                        "schema": {
                            "default": "",
                            "description": "File name to fetch the video segments.\nThe API User should not have to manually specify this parameter. It should be pre-loaded in the URLs contained in the HLS playlist file.",
                            "title": "File",
                            "type": "string"
                        }
                    },
                    {
                        "in": "query",
                        "name": "prefetch",
                        "required": false,
                        "schema": {
                            "default": "",
                            "description": "List of segments to preload.\nThe API User should not have to manually specify this parameter. It should be pre-loaded in the URLs contained in the HLS playlist file.",
                            "title": "Prefetch",
                            "type": "string"
                        }
                    },
                    {
                        "in": "query",
                        "name": "camera",
                        "required": false,
                        "schema": {
                            "default": "",
                            "description": "The unique identifier of the camera.\nThe API User should not have to manually specify this parameter. It should be pre-loaded in the URLs contained in the HLS playlist file.",
                            "title": "Camera",
                            "type": "string"
                        }
                    },
                    {
                        "in": "query",
                        "name": "source",
                        "required": false,
                        "schema": {
                            "default": "",
                            "description": "The source of video segments.\nThe API User should not have to manually specify this parameter. It should be pre-loaded in the URLs contained in the HLS playlist file.",
                            "title": "Source",
                            "type": "string"
                        }
                    },
                    {
                        "in": "query",
                        "name": "source_encrypted",
                        "required": false,
                        "schema": {
                            "default": "",
                            "description": "The encryption state of video segments.\nThe API User should not have to manually specify this parameter. It should be pre-loaded in the URLs contained in the HLS playlist file.",
                            "title": "Source Encrypted",
                            "type": "string"
                        }
                    },
                    {
                        "in": "query",
                        "name": "bucket",
                        "required": false,
                        "schema": {
                            "default": "",
                            "description": "The location for cloud backup segment.\nThe API User should not have to manually specify this parameter. It should be pre-loaded in the URLs contained in the HLS playlist file.",
                            "title": "Bucket",
                            "type": "string"
                        }
                    },
                    {
                        "in": "query",
                        "name": "start_ts",
                        "required": false,
                        "schema": {
                            "default": "",
                            "description": "The start time of video segments. Used for recent historical segments.\nThe API User should not have to manually specify this parameter. It should be pre-loaded in the URLs contained in the HLS playlist file.",
                            "title": "Start Ts",
                            "type": "string"
                        }
                    },
                    {
                        "in": "query",
                        "name": "ts",
                        "required": false,
                        "schema": {
                            "default": "",
                            "description": "The timestamp of video segments.\nThe API User should not have to manually specify this parameter. It should be pre-loaded in the URLs contained in the HLS playlist file.",
                            "title": "Ts",
                            "type": "string"
                        }
                    },
                    {
                        "in": "query",
                        "name": "offset",
                        "required": false,
                        "schema": {
                            "default": "",
                            "description": "The offset of video segments. Only relevant for recent historical segments.\nThe API User should not have to manually specify this parameter. It should be pre-loaded in the URLs contained in the HLS playlist file.",
                            "title": "Offset",
                            "type": "string"
                        }
                    },
                    {
                        "in": "query",
                        "name": "transcode",
                        "required": false,
                        "schema": {
                            "default": false,
                            "description": "If a segment should be transcoded to H264.\nThe API User should not have to manually specify this parameter. It should be pre-loaded in the URLs contained in the HLS playlist file.",
                            "title": "Transcode",
                            "type": "boolean"
                        }
                    },
                    {
                        "in": "query",
                        "name": "data_location",
                        "required": false,
                        "schema": {
                            "default": "",
                            "description": "The location of video segments.\nThe API User should not have to manually specify this parameter. It should be pre-loaded in the URLs contained in the HLS playlist file.",
                            "title": "Data Location",
                            "type": "string"
                        }
                    },
                    {
                        "in": "query",
                        "name": "byte_range",
                        "required": false,
                        "schema": {
                            "default": "",
                            "description": "The byte range of video segments.\nThe API User should not have to manually specify this parameter. It should be pre-loaded in the URLs contained in the HLS playlist file.",
                            "title": "Byte Range",
                            "type": "string"
                        }
                    },
                    {
                        "in": "query",
                        "name": "init_byte_range",
                        "required": false,
                        "schema": {
                            "default": "",
                            "description": "The byte range of init segment.\nThe API User should not have to manually specify this parameter. It should be pre-loaded in the URLs contained in the HLS playlist file.",
                            "title": "Init Byte Range",
                            "type": "string"
                        }
                    },
                    {
                        "in": "query",
                        "name": "iv",
                        "required": false,
                        "schema": {
                            "default": "",
                            "description": "The initialization vector of video segments.\nThe API User should not have to manually specify this parameter. It should be pre-loaded in the URLs contained in the HLS playlist file.",
                            "title": "Iv",
                            "type": "string"
                        }
                    },
                    {
                        "in": "query",
                        "name": "key_name",
                        "required": false,
                        "schema": {
                            "default": "",
                            "description": "The key name of video segments.\nThe API User should not have to manually specify this parameter. It should be pre-loaded in the URLs contained in the HLS playlist file.",
                            "title": "Key Name",
                            "type": "string"
                        }
                    },
                    {
                        "in": "query",
                        "name": "init",
                        "required": false,
                        "schema": {
                            "default": "",
                            "description": "The init segment of video segments.\nThe API User should not have to manually specify this parameter. It should be pre-loaded in the URLs contained in the HLS playlist file.",
                            "title": "Init",
                            "type": "string"
                        }
                    },
                    {
                        "in": "query",
                        "name": "stream_id",
                        "required": false,
                        "schema": {
                            "default": "",
                            "description": "The stream identifier of video segments.\nThe API User should not have to manually specify this parameter. It should be pre-loaded in the URLs contained in the HLS playlist file.",
                            "title": "Stream Id",
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "ok"
                    }
                },
                "security": [],
                "summary": "Stream Footage (Live or Historical)",
                "tags": [
                    "Footage"
                ]
            }
        },
        "/token": {
            "post": {
                "description": "API Tokens are required to make requests to any Verkada API endpoints with the exception of the Get Streaming Token endpoints, which requires a top-level API Key for authentication, as well as the Stream Footage (live or historical) API that requires a JSON Web Token (JWT).\n\nAPI Tokens inherit permissions from the top-level API key used to generate them and will be limited to that same permission scope. If the API Key used to generate an API Token only has Camera Read-Only permissions, then the associated API Token would only be authorized to call Camera GET endpoints.\n\nAPI Tokens are valid for 30 minutes and cannot be refreshed. Users will need to call the Get API Token endpoint again to retrieve a new Token if their previous one has expired. When making a call using an expired API Token, users will receive a 401 Authentication Error as well as the following error message:\n\n<code>{'id': '0e2d', 'message': 'Token expired', 'data': None}</code>",
                "operationId": "postLoginApiKeyViewV2",
                "parameters": [],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiLoginToken"
                                }
                            }
                        },
                        "description": "OK"
                    }
                },
                "security": [
                    {
                        "GetToken": []
                    }
                ],
                "summary": "Get API Token",
                "tags": [
                    "API Login"
                ]
            }
        },
        "/v2/analytics/operational_dashboard/{dashboard_id}/widget_trends/query": {
            "post": {
                "description": "Returns all data for a particular dashboard's widgets over a specified time range.\n\nResponses will include the start and end time of the data requested and dashboard information (ID, name) alongside the readings.",
                "operationId": "postDashboardWidgetTrendsView",
                "parameters": [
                    {
                        "in": "path",
                        "name": "dashboard_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/DashboardWidgetTrendsRequestV2"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/DashboardWidgetTrendsResponseV2"
                                }
                            }
                        },
                        "description": "OK"
                    }
                },
                "summary": "Get Dashboard Widget Trend Data",
                "tags": [
                    "Analytics"
                ]
            }
        },
        "/v2/events": {
            "get": {
                "description": "Returns unified events from camera and access control devices within a specified time range.\n\nThis endpoint consolidates events from camera and access control devices in your organization,\nproviding a single interface to retrieve security events and access control events.\n\n**Default Behavior**: Returns events from all supported product types from the last hour if no filters are specified.\n\n### Supported Event Types\n\n**Camera Events:**\n- `camera_online`, `camera_offline` - Camera connectivity status\n- `motion` - Motion detection events\n- `person_of_interest` - Person of Interest detections\n- `license_plate_of_interest` - License Plate of Interest detections\n- `tamper` - Camera tampering events\n- `crowd` - Crowd detection events\n- `line_crossing` - Line crossing rule violations\n- `loitering` - Loitering/dwell time violations\n\n**Access Control Events:**\n- `door_opened`, `door_granted`, `door_rejected` - Access events\n- `door_forced_open`, `door_held_open` - Security violations\n- `door_tailgating` - Tailgating detection\n- `door_tamper` - Door tampering events\n- `door_offline` - Access control unit connectivity\n- Plus 50+ additional access control event types for comprehensive monitoring\n\n### Filtering\n\nUse these query parameters to filter results:\n- **`product_types`**: Comma-separated product types (`camera`, `access_control`)\n- **`device_ids`**: Comma-separated list of device IDs to filter by\n- **`event_types`**: Comma-separated list of event types (see supported types above)\n- **`start_time`**: Start time in ISO 8601 format (e.g., `2025-01-17T09:00:00Z`)\n- **`end_time`**: End time in ISO 8601 format (defaults to current time if not specified)\n- **`site_ids`**: Comma-separated list of site IDs (for access control events)\n\n### Pagination\n\nThis endpoint uses cursor-based pagination with these parameters:\n- **`limit`**: Number of events to return (1-1000, default 100)\n- **`cursor`**: Pagination cursor from previous response for next page\n- Continue paginating while the response includes a `cursor` value\n\n\n\n### Examples\n\nGet all events from the last hour:\n```\nGET /v2/events\n```\n\nGet only camera motion events from a specific time range:\n```\nGET /v2/events?product_types=camera&event_types=motion&start_time=2025-01-17T09:00:00Z&end_time=2025-01-17T17:00:00Z\n```\n\nGet access control events for specific doors:\n```\nGET /v2/events?product_types=access_control&device_ids=door1,door2&limit=50\n```",
                "operationId": "getEventsViewV2",
                "parameters": [
                    {
                        "in": "query",
                        "name": "start_time",
                        "required": false,
                        "schema": {
                            "description": "Start time for events in ISO 8601 format (e.g., '2025-01-17T21:06:20Z'). Defaults to 1 hour ago if not specified.",
                            "title": "Start Time",
                            "type": "string"
                        }
                    },
                    {
                        "in": "query",
                        "name": "end_time",
                        "required": false,
                        "schema": {
                            "description": "End time for events in ISO 8601 format (e.g., '2025-01-17T22:06:20Z'). Defaults to current time if not specified.",
                            "title": "End Time",
                            "type": "string"
                        }
                    },
                    {
                        "in": "query",
                        "name": "product_types",
                        "required": false,
                        "schema": {
                            "description": "Comma-separated list of product types to filter by. Valid values: 'camera', 'access_control'. If not specified, events from all supported product types are returned.",
                            "title": "Product Types",
                            "type": "string"
                        }
                    },
                    {
                        "in": "query",
                        "name": "device_ids",
                        "required": false,
                        "schema": {
                            "description": "Comma-separated list of specific device IDs to filter by.",
                            "title": "Device Ids",
                            "type": "string"
                        }
                    },
                    {
                        "in": "query",
                        "name": "event_types",
                        "required": false,
                        "schema": {
                            "description": "Comma-separated list of event types to filter by. Valid values vary by device type. If not specified, all event types are returned.",
                            "title": "Event Types",
                            "type": "string"
                        }
                    },
                    {
                        "in": "query",
                        "name": "site_ids",
                        "required": false,
                        "schema": {
                            "description": "Comma-separated list of site IDs to filter by (applies to access control events).",
                            "title": "Site Ids",
                            "type": "string"
                        }
                    },
                    {
                        "in": "query",
                        "name": "limit",
                        "required": false,
                        "schema": {
                            "default": 100,
                            "description": "Maximum number of events to return. Default is 100, maximum is 1000.",
                            "exclusiveMinimum": true,
                            "maximum": 1000,
                            "minimum": 0,
                            "title": "Limit",
                            "type": "integer"
                        }
                    },
                    {
                        "in": "query",
                        "name": "cursor",
                        "required": false,
                        "schema": {
                            "description": "Pagination cursor for retrieving the next page of results.",
                            "title": "Cursor",
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/EventsResponseV2"
                                }
                            }
                        },
                        "description": "OK"
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/EventsErrorResponse"
                                }
                            }
                        },
                        "description": "Bad Request"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/EventsErrorResponse"
                                }
                            }
                        },
                        "description": "Forbidden"
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/EventsErrorResponse"
                                }
                            }
                        },
                        "description": "Internal Server Error"
                    }
                },
                "summary": "Get Events",
                "tags": [
                    "Events"
                ]
            }
        },
        "/viewing_station/v1/devices": {
            "get": {
                "description": "Gets information about the all the Viewing Stations in an organization.",
                "operationId": "getViewingStationDevicesViewV1",
                "parameters": [],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ViewingStationDevicesResponse"
                                }
                            }
                        },
                        "description": "OK"
                    }
                },
                "summary": "Get Viewing Station Devices",
                "tags": [
                    "Devices"
                ]
            }
        }
    },
    "security": [
        {
            "ApiToken": []
        },
        {
            "ApiKey": []
        }
    ],
    "servers": [
        {
            "url": "https://{region}.verkada.com",
            "variables": {
                "region": {
                    "default": "api",
                    "enum": [
                        "api",
                        "api.eu",
                        "api.au"
                    ]
                }
            }
        }
    ],
    "tags": [],
    "x-explorer-enabled": true,
    "x-proxy-enabled": true,
    "x-samples-enabled": true,
    "x-samples-languages": [
        "curl",
        "node",
        "ruby",
        "javascript",
        "python"
    ]
}